<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>Create a Dynamic Web Application with User Authentication - PHP WordPress Course</title>
<meta content="Welcome to our final project! Today, we'll build a dynamic PHP web application with user authentication. This project ties together everything you've learned ab" name="description"/>
<meta content="PHP, WordPress, web development, project:, dynamic, web, app" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">Project: Dynamic Web App</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 10</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_planning_php_application.html">Planning Application</a></li>
<li><a class="sidebar-link" href="/02module/php_implementing_user_input.html">User Input</a></li>
<li><a class="sidebar-link" href="/02module/php_working_with_sessions_cookies.html">Sessions &amp; Cookies</a></li>
<li><a class="sidebar-link" href="/02module/php_creating_reusable_php_components.html">Reusable Components</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/project_php_dynamic_web_app_with_authentication.html">Project: Dynamic App</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_inheritance.html">← Prev: Session 9: Advanced OOP</a></li>
<li><a class="sidebar-link next-session" href="/03module/intro_to_mysql.html">Next: Module 3: MySQL →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>Create a Dynamic Web Application with User Authentication</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 180 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: PHP Projects</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP programming concepts</li>
<li>Write clean, maintainable code</li>
<li>Apply best practices</li>
<li>Build dynamic applications</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="introduction">
            <h2>Understanding the Problem</h2>
            <p>Welcome to our final project! Today, we'll build a dynamic PHP web application with user authentication. This project ties together everything you've learned about PHP, including:</p>
            
            <ul>
                <li>Object-oriented programming</li>
                <li>Database interactions with MySQL</li>
                <li>User input validation and processing</li>
                <li>Sessions and cookies</li>
                <li>Security best practices</li>
            </ul>
            
            <p>Think of this project as building your own house. You have all the tools and materials (PHP concepts), and now you need to put them together to create something functional, secure, and well-designed.</p>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 800" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="800" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="166.66666666666669" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="633.3333333333334" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="166.66666666666669" y1="200" x2="633.3333333333334" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="166.66666666666669" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="400.0" y1="200" x2="633.3333333333334" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="200" x2="633.3333333333334" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="283.33333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[User Login/Logout] A </text>
    <line x1="283.33333333333337" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.00000000000006" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; E[User Dashboard] A </text>
    <line x1="516.6666666666667" y1="80" x2="633.3333333333334" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="575.0" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; G[Database Storage] C </text>
    <line x1="166.66666666666669" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="283.33333333333337" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; H[Session Management] D </text>
    <line x1="400.0" y1="200" x2="633.3333333333334" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; G F </text>
    <rect x="223.33333333333337" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Project Goal</text>
    <rect x="438.66666666666674" y="55" width="156" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">User Registration</text>
    <rect x="88.66666666666669" y="175" width="156" height="50" 
          rx="5" class="node-rect"/>
    <text x="166.66666666666669" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">User Login/Logout</text>
    <rect x="205.33333333333337" y="175" width="156" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Protected Content</text>
    <rect x="334.0" y="175" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">User Dashboard</text>
    <rect x="434.66666666666674" y="175" width="164" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Content Management</text>
    <rect x="559.3333333333334" y="175" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="633.3333333333334" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Database Storage</text>
    <rect x="318.0" y="295" width="164" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Session Management</text>
</svg>
</div>
            
            <h3>Project Requirements</h3>
            <ul>
                <li><strong>User Authentication:</strong> Registration, login, and logout functionality</li>
                <li><strong>User Profiles:</strong> Store and display user information</li>
                <li><strong>Content Management:</strong> Users can create, read, update, and delete content</li>
                <li><strong>Access Control:</strong> Different content visibility based on user roles</li>
                <li><strong>Security:</strong> Protection against common vulnerabilities</li>
                <li><strong>Responsive Design:</strong> Works on mobile and desktop devices</li>
            </ul>
        </section>

        <section class="planning">
            <h2>Devising a Plan</h2>
            <p>Following George Polya's problem-solving approach, let's break this complex project into manageable steps. We'll create a simple blog application where users can register, login, and manage their posts.</p>
            
            <div class="whiteboard-plan">
                <h3>Project Plan</h3>
                <ol>
                    <li><strong>Set up project structure</strong>
                        <ul>
                            <li>Create folders and files</li>
                            <li>Set up the database</li>
                        </ul>
                    </li>
                    <li><strong>Create the database interaction layer</strong>
                        <ul>
                            <li>Design database tables</li>
                            <li>Create a Database class for connections</li>
                        </ul>
                    </li>
                    <li><strong>Build user authentication system</strong>
                        <ul>
                            <li>Registration form and processing</li>
                            <li>Login/logout functionality</li>
                            <li>Password hashing and security</li>
                        </ul>
                    </li>
                    <li><strong>Create session management</strong>
                        <ul>
                            <li>Start and manage sessions</li>
                            <li>Store user data in sessions</li>
                        </ul>
                    </li>
                    <li><strong>Develop content management</strong>
                        <ul>
                            <li>Create forms for adding/editing content</li>
                            <li>Build display pages for content</li>
                        </ul>
                    </li>
                    <li><strong>Implement access control</strong>
                        <ul>
                            <li>Different views for guests vs. logged-in users</li>
                            <li>Admin vs. regular user permissions</li>
                        </ul>
                    </li>
                    <li><strong>Add UI improvements and responsive design</strong>
                        <ul>
                            <li>Basic CSS styling</li>
                            <li>Responsive layouts</li>
                        </ul>
                    </li>
                    <li><strong>Test and debug the application</strong>
                        <ul>
                            <li>Test all functionality</li>
                            <li>Fix any bugs</li>
                        </ul>
                    </li>
                </ol>
            </div>
            
            <div class="architecture">
                <h3>Application Architecture</h3>
                <p>We'll use a simple Model-View-Controller (MVC) approach to organize our code. Think of this like constructing a building with clear separation between the foundation, walls, and interior design.</p>
                
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 700" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="700" fill="#fafafa" rx="8"/>
    
    <rect x="47.5" y="55" width="180" height="50" 
          rx="5" class="node-rect"/>
    <text x="137.5" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">User Interface Layer</text>
    <rect x="165.0" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Views</text>
    <rect x="210.5" y="55" width="204" height="50" 
          rx="5" class="node-rect"/>
    <text x="312.5" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Application Logic Layer</text>
    <rect x="340.0" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Controllers</text>
    <rect x="409.5" y="55" width="156" height="50" 
          rx="5" class="node-rect"/>
    <text x="487.5" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Data Access Layer</text>
    <rect x="515.0" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Models</text>
    <rect x="602.5" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="662.5" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">(Database)</text>
</svg>
</div>
                
                <h3>Project Structure</h3>
                <pre>
blog_app/
│
├── config/
│   └── config.php           # Database and application configuration
│
├── includes/
│   ├── Database.php         # Database connection and queries
│   ├── User.php             # User model for authentication and profiles
│   ├── Post.php             # Post model for content management
│   └── Session.php          # Session management
│
├── public/
│   ├── css/
│   │   └── style.css        # CSS styles
│   ├── js/
│   │   └── script.js        # JavaScript functionality
│   └── index.php            # Entry point and routing
│
├── views/
│   ├── auth/
│   │   ├── login.php        # Login form
│   │   └── register.php     # Registration form
│   ├── posts/
│   │   ├── create.php       # Create post form
│   │   ├── edit.php         # Edit post form
│   │   └── view.php         # View single post
│   ├── layouts/
│   │   ├── header.php       # Page header
│   │   └── footer.php       # Page footer
│   ├── home.php             # Homepage with post listings
│   └── dashboard.php        # User dashboard
│
└── controllers/
    ├── auth_controller.php  # Handles authentication
    ├── post_controller.php  # Handles post operations
    └── user_controller.php  # Handles user profile operations
</pre>
            </div>
        </section>

        <section class="implementation">
            <h2>Executing the Plan</h2>
            <p>Now, let's implement our web application step by step, starting with the project structure and database setup.</p>
            
            <div class="step">
                <h3>Step 1: Setting Up the Project Structure</h3>
                <p>First, create the folder structure as outlined above. This organizes our code into logical sections, making it easier to maintain.</p>
                <p>Think of this like preparing the construction site and laying out the blueprint for our building.</p>
                
                <h4>Creating the Configuration File</h4>
                <p><strong>File:</strong> <code>config/config.php</code></p>
                <pre><code>&lt;?php
// Database configuration
define('DB_HOST', 'localhost');
define('DB_USER', 'root'); // Replace with your database username
define('DB_PASS', '');     // Replace with your database password
define('DB_NAME', 'blog_app');

// Application configuration
define('SITE_NAME', 'My Blog');
define('APP_URL', 'http://localhost/blog_app'); // Replace with your application URL

// Error reporting
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Start session if not already started
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}
</code></pre>
            </div>
            
            <div class="step">
                <h3>Step 2: Setting Up the Database</h3>
                <p>Next, we'll create the database and tables for our application. We'll use MySQL to store our users, posts, and other data.</p>
                
                <h4>Database Schema</h4>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
    
    <!-- Background -->
    <rect x="0" y="0" width="600" height="300" rx="8" fill="#e3f2fd" 
          stroke="#1976d2" stroke-width="2"/>
    
    <!-- Icon -->
    <g transform="translate(300, 100)">
        <rect x="-40" y="-30" width="80" height="60" rx="5" 
              fill="white" stroke="#1976d2" stroke-width="2"/>
        <line x1="-20" y1="-10" x2="20" y2="-10" 
              stroke="#1976d2" stroke-width="2"/>
        <line x1="-20" y1="0" x2="20" y2="0" 
              stroke="#1976d2" stroke-width="2"/>
        <line x1="-20" y1="10" x2="20" y2="10" 
              stroke="#1976d2" stroke-width="2"/>
    </g>
    
    <!-- Text -->
    <text x="300" y="180" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="18" 
          fill="#0d47a1" font-weight="bold">
        Flowchart
    </text>
    
    <text x="300" y="210" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="14" 
          fill="#0d47a1" opacity="0.8">
        (Diagram converted to static representation)
    </text>
    
    <!-- Original content hint -->
    <text x="300" y="240" text-anchor="middle" 
          font-family="monospace" font-size="10" 
          fill="#0d47a1" opacity="0.5">
        erDiagram USERS { int id PK string username string...
    </text>
</svg>
</div>
                
                <h4>Creating the Database</h4>
                <p>Open your MySQL client (phpMyAdmin, MySQL Workbench, etc.) and execute these SQL commands:</p>
                
                <pre><code>-- Create the database
CREATE DATABASE IF NOT EXISTS blog_app;

-- Use the database
USE blog_app;

-- Create users table
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('user', 'admin') DEFAULT 'user',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Create posts table
CREATE TABLE IF NOT EXISTS posts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
</code></pre>
            </div>
            
            <div class="step">
                <h3>Step 3: Creating the Database Class</h3>
                <p>Now, let's create a class to handle database connections and queries. This follows the object-oriented approach and makes our code more maintainable.</p>
                
                <h4>Database Connection Class</h4>
                <p><strong>File:</strong> <code>includes/Database.php</code></p>
                <pre><code>&lt;?php
class Database {
    private $host = DB_HOST;
    private $user = DB_USER;
    private $pass = DB_PASS;
    private $dbname = DB_NAME;
    
    private $connection;
    private $error;
    private $statement;
    private static $instance = null;
    
    // Constructor - establishes database connection
    private function __construct() {
        // DSN (Data Source Name)
        $dsn = 'mysql:host=' . $this->host . ';dbname=' . $this->dbname;
        
        // Set PDO options
        $options = array(
            PDO::ATTR_PERSISTENT => true,
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION
        );
        
        // Create PDO instance
        try {
            $this->connection = new PDO($dsn, $this->user, $this->pass, $options);
        } catch(PDOException $e) {
            $this->error = $e->getMessage();
            echo 'Connection Error: ' . $this->error;
        }
    }
    
    // Get instance of Database (Singleton pattern)
    public static function getInstance() {
        if (!self::$instance) {
            self::$instance = new Database();
        }
        return self::$instance;
    }
    
    // Prepare statement with query
    public function query($sql) {
        $this->statement = $this->connection->prepare($sql);
        return $this;
    }
    
    // Bind values to prepared statement using named parameters
    public function bind($param, $value, $type = null) {
        if (is_null($type)) {
            switch (true) {
                case is_int($value):
                    $type = PDO::PARAM_INT;
                    break;
                case is_bool($value):
                    $type = PDO::PARAM_BOOL;
                    break;
                case is_null($value):
                    $type = PDO::PARAM_NULL;
                    break;
                default:
                    $type = PDO::PARAM_STR;
            }
        }
        
        $this->statement->bindValue($param, $value, $type);
        return $this;
    }
    
    // Execute the prepared statement
    public function execute() {
        return $this->statement->execute();
    }
    
    // Get result set as array of objects
    public function resultSet() {
        $this->execute();
        return $this->statement->fetchAll(PDO::FETCH_OBJ);
    }
    
    // Get single record as object
    public function single() {
        $this->execute();
        return $this->statement->fetch(PDO::FETCH_OBJ);
    }
    
    // Get row count
    public function rowCount() {
        return $this->statement->rowCount();
    }
    
    // Get last inserted ID
    public function lastInsertId() {
        return $this->connection->lastInsertId();
    }
}
</code></pre>

                <p><strong>Explanation:</strong> This Database class uses the Singleton pattern to ensure only one database connection exists at a time, saving server resources. It uses PDO (PHP Data Objects) for database interactions, which is more secure and flexible than older methods like mysqli.</p>
                
                <p><strong>Real-world analogy:</strong> Think of this class as the receptionist at a busy office building. Instead of each visitor (code request) setting up their own way to talk to people in the building (database), everyone goes through the same receptionist who knows how to connect them efficiently and securely.</p>
            </div>
            
            <div class="step">
                <h3>Step 4: Creating the User Class</h3>
                <p>Next, we'll create a User class to handle user-related operations like registration, login, and profile management.</p>
                
                <h4>User Class</h4>
                <p><strong>File:</strong> <code>includes/User.php</code></p>
                <pre><code>&lt;?php
class User {
    private $db;
    
    // Constructor - initialize database connection
    public function __construct() {
        $this->db = Database::getInstance();
    }
    
    // Register user
    public function register($data) {
        // Prepare query
        $this->db->query('INSERT INTO users (username, email, password) VALUES (:username, :email, :password)');
        
        // Hash password
        $data['password'] = password_hash($data['password'], PASSWORD_DEFAULT);
        
        // Bind values
        $this->db->bind(':username', $data['username']);
        $this->db->bind(':email', $data['email']);
        $this->db->bind(':password', $data['password']);
        
        // Execute
        if ($this->db->execute()) {
            return true;
        } else {
            return false;
        }
    }
    
    // Login user
    public function login($username, $password) {
        // Prepare query
        $this->db->query('SELECT * FROM users WHERE username = :username');
        
        // Bind value
        $this->db->bind(':username', $username);
        
        // Get single record
        $user = $this->db->single();
        
        // Check if user exists
        if (!$user) {
            return false;
        }
        
        // Verify password
        if (password_verify($password, $user->password)) {
            return $user;
        } else {
            return false;
        }
    }
    
    // Find user by username
    public function findUserByUsername($username) {
        // Prepare query
        $this->db->query('SELECT * FROM users WHERE username = :username');
        
        // Bind value
        $this->db->bind(':username', $username);
        
        // Get single record
        $user = $this->db->single();
        
        // Check if user exists
        if ($this->db->rowCount() > 0) {
            return true;
        } else {
            return false;
        }
    }
    
    // Find user by email
    public function findUserByEmail($email) {
        // Prepare query
        $this->db->query('SELECT * FROM users WHERE email = :email');
        
        // Bind value
        $this->db->bind(':email', $email);
        
        // Get single record
        $user = $this->db->single();
        
        // Check if user exists
        if ($this->db->rowCount() > 0) {
            return true;
        } else {
            return false;
        }
    }
    
    // Get user by ID
    public function getUserById($id) {
        // Prepare query
        $this->db->query('SELECT * FROM users WHERE id = :id');
        
        // Bind value
        $this->db->bind(':id', $id);
        
        // Return single record
        return $this->db->single();
    }
}
</code></pre>

                <p><strong>Explanation:</strong> The User class manages all user-related functionality. It uses our Database class for all database interactions. We've included methods for registration, login, and finding users by different criteria.</p>
                
                <p><strong>Security note:</strong> We're using PHP's built-in <code>password_hash()</code> and <code>password_verify()</code> functions for secure password handling. Never store plain-text passwords in your database!</p>
                
                <p><strong>Real-world analogy:</strong> This class is like a membership office at a club. It handles signing up new members (registration), checking members' IDs at the door (login), and keeping track of member information (profiles).</p>
            </div>
            
            <div class="step">
                <h3>Step 5: Creating the Post Class</h3>
                <p>Now, let's create a Post class to handle blog post operations.</p>
                
                <h4>Post Class</h4>
                <p><strong>File:</strong> <code>includes/Post.php</code></p>
                <pre><code>&lt;?php
class Post {
    private $db;
    
    // Constructor - initialize database connection
    public function __construct() {
        $this->db = Database::getInstance();
    }
    
    // Get all posts
    public function getPosts() {
        // Join with users table to get the username
        $this->db->query('SELECT 
                            p.*, 
                            u.username 
                          FROM 
                            posts p 
                          JOIN 
                            users u 
                          ON 
                            p.user_id = u.id 
                          ORDER BY 
                            p.created_at DESC');
        
        return $this->db->resultSet();
    }
    
    // Get posts by user ID
    public function getPostsByUser($userId) {
        $this->db->query('SELECT * FROM posts WHERE user_id = :user_id ORDER BY created_at DESC');
        $this->db->bind(':user_id', $userId);
        
        return $this->db->resultSet();
    }
    
    // Get single post
    public function getPostById($id) {
        // Join with users table to get the username
        $this->db->query('SELECT 
                            p.*, 
                            u.username 
                          FROM 
                            posts p 
                          JOIN 
                            users u 
                          ON 
                            p.user_id = u.id 
                          WHERE 
                            p.id = :id');
        
        $this->db->bind(':id', $id);
        
        return $this->db->single();
    }
    
    // Add post
    public function addPost($data) {
        // Prepare query
        $this->db->query('INSERT INTO posts (user_id, title, content) VALUES (:user_id, :title, :content)');
        
        // Bind values
        $this->db->bind(':user_id', $data['user_id']);
        $this->db->bind(':title', $data['title']);
        $this->db->bind(':content', $data['content']);
        
        // Execute
        if ($this->db->execute()) {
            return true;
        } else {
            return false;
        }
    }
    
    // Update post
    public function updatePost($data) {
        // Prepare query
        $this->db->query('UPDATE posts SET title = :title, content = :content WHERE id = :id');
        
        // Bind values
        $this->db->bind(':id', $data['id']);
        $this->db->bind(':title', $data['title']);
        $this->db->bind(':content', $data['content']);
        
        // Execute
        if ($this->db->execute()) {
            return true;
        } else {
            return false;
        }
    }
    
    // Delete post
    public function deletePost($id) {
        // Prepare query
        $this->db->query('DELETE FROM posts WHERE id = :id');
        
        // Bind value
        $this->db->bind(':id', $id);
        
        // Execute
        if ($this->db->execute()) {
            return true;
        } else {
            return false;
        }
    }
    
    // Check if user owns post
    public function isOwnedByUser($postId, $userId) {
        $this->db->query('SELECT * FROM posts WHERE id = :id AND user_id = :user_id');
        $this->db->bind(':id', $postId);
        $this->db->bind(':user_id', $userId);
        
        $this->db->single();
        
        return $this->db->rowCount() > 0;
    }
}
</code></pre>

                <p><strong>Explanation:</strong> The Post class manages all blog post operations. It includes methods for retrieving, creating, updating, and deleting posts. We also have a method to check if a user owns a post, which is important for access control.</p>
                
                <p><strong>Real-world analogy:</strong> This class functions like a publishing house. It handles creating new books (posts), editing existing ones, removing outdated titles, and making sure authors can only modify their own work.</p>
            </div>
            
            <div class="step">
                <h3>Step 6: Creating the Session Class</h3>
                <p>Next, we'll create a Session class to handle user sessions and flash messages.</p>
                
                <h4>Session Class</h4>
                <p><strong>File:</strong> <code>includes/Session.php</code></p>
                <pre><code>&lt;?php
class Session {
    private static $instance = null;
    
    // Constructor - starts the session if not already started
    private function __construct() {
        if (session_status() === PHP_SESSION_NONE) {
            session_start();
        }
    }
    
    // Get instance of Session (Singleton pattern)
    public static function getInstance() {
        if (!self::$instance) {
            self::$instance = new Session();
        }
        return self::$instance;
    }
    
    // Set user session
    public function setUser($user) {
        $_SESSION['user_id'] = $user->id;
        $_SESSION['user_username'] = $user->username;
        $_SESSION['user_email'] = $user->email;
        $_SESSION['user_role'] = $user->role;
    }
    
    // Check if user is logged in
    public function isLoggedIn() {
        return isset($_SESSION['user_id']);
    }
    
    // Get logged in user data
    public function getUser() {
        if ($this->isLoggedIn()) {
            return (object) [
                'id' => $_SESSION['user_id'],
                'username' => $_SESSION['user_username'],
                'email' => $_SESSION['user_email'],
                'role' => $_SESSION['user_role']
            ];
        }
        return null;
    }
    
    // Logout user
    public function logout() {
        unset($_SESSION['user_id']);
        unset($_SESSION['user_username']);
        unset($_SESSION['user_email']);
        unset($_SESSION['user_role']);
        session_destroy();
    }
    
    // Set flash message
    public function setFlash($name, $message, $type = 'success') {
        // Remove any existing flash with same name
        if (isset($_SESSION['flash'][$name])) {
            unset($_SESSION['flash'][$name]);
        }
        
        // Set new flash message
        $_SESSION['flash'][$name] = [
            'message' => $message,
            'type' => $type
        ];
    }
    
    // Get flash message and unset it
    public function getFlash($name) {
        if (isset($_SESSION['flash'][$name])) {
            $flash = $_SESSION['flash'][$name];
            unset($_SESSION['flash'][$name]);
            return $flash;
        }
        return null;
    }
    
    // Check if flash message exists
    public function hasFlash($name) {
        return isset($_SESSION['flash'][$name]);
    }
}
</code></pre>

                <p><strong>Explanation:</strong> The Session class manages user sessions and flash messages (temporary messages displayed once, like success or error notifications). It uses the Singleton pattern to ensure only one session instance exists.</p>
                
                <p><strong>Real-world analogy:</strong> This class acts like a security badge system. It remembers who you are as you move through the application (session) and also handles temporary announcements that only need to be seen once (flash messages).</p>
            </div>
            
            <div class="step">
                <h3>Step 7: Creating Utility Functions</h3>
                <p>Let's create some utility functions to simplify common tasks throughout our application.</p>
                
                <h4>Utilities File</h4>
                <p><strong>File:</strong> <code>includes/utilities.php</code></p>
                <pre><code>&lt;?php
// Redirect to another page
function redirect($page) {
    header('Location: ' . APP_URL . '/' . $page);
    exit;
}

// Sanitize input data
function sanitize($dirty) {
    return htmlspecialchars($dirty, ENT_QUOTES, 'UTF-8');
}

// Flash message display
function displayFlash($name) {
    $session = Session::getInstance();
    if ($session->hasFlash($name)) {
        $flash = $session->getFlash($name);
        echo '&lt;div class="alert alert-' . $flash['type'] . '"&gt;' . $flash['message'] . '&lt;/div&gt;';
    }
}

// Check if form is submitted
function isPost() {
    return $_SERVER['REQUEST_METHOD'] === 'POST';
}

// Check if user is logged in
function isLoggedIn() {
    $session = Session::getInstance();
    return $session->isLoggedIn();
}

// Get logged in user
function getLoggedInUser() {
    $session = Session::getInstance();
    return $session->getUser();
}

// Check if user is admin
function isAdmin() {
    $session = Session::getInstance();
    $user = $session->getUser();
    return $user && $user->role === 'admin';
}

// Require login to access page
function requireLogin() {
    if (!isLoggedIn()) {
        $session = Session::getInstance();
        $session->setFlash('login_required', 'Please log in to access this page', 'warning');
        redirect('login.php');
    }
}

// Require admin role to access page
function requireAdmin() {
    if (!isAdmin()) {
        $session = Session::getInstance();
        $session->setFlash('admin_required', 'You do not have permission to access this page', 'danger');
        redirect('index.php');
    }
}
</code></pre>

                <p><strong>Explanation:</strong> These utility functions provide shortcuts for common tasks like redirecting users, sanitizing input, displaying flash messages, and checking user permissions.</p>
                
                <p><strong>Real-world analogy:</strong> Think of these utilities as the small tools in your toolbox – screwdrivers, pliers, and wrenches – that you use frequently for quick, simple tasks.</p>
            </div>
            
            <div class="step">
                <h3>Step 8: Creating the Entry Point</h3>
                <p>Now, let's create our main index.php file, which will serve as the entry point to our application.</p>
                
                <h4>Entry Point File</h4>
                <p><strong>File:</strong> <code>public/index.php</code></p>
                <pre><code>&lt;?php
// Load configuration
require_once '../config/config.php';

// Load classes
require_once '../includes/Database.php';
require_once '../includes/User.php';
require_once '../includes/Post.php';
require_once '../includes/Session.php';
require_once '../includes/utilities.php';

// Initialize session
$session = Session::getInstance();

// Initialize models
$user = new User();
$post = new Post();

// Simple router based on GET parameter
$page = isset($_GET['page']) ? $_GET['page'] : 'home';

// Load appropriate controller based on page
switch ($page) {
    case 'register':
        require_once '../controllers/auth_controller.php';
        require_once '../views/auth/register.php';
        break;
    case 'login':
        require_once '../controllers/auth_controller.php';
        require_once '../views/auth/login.php';
        break;
    case 'logout':
        require_once '../controllers/auth_controller.php';
        logoutUser();
        break;
    case 'dashboard':
        requireLogin();
        require_once '../controllers/user_controller.php';
        require_once '../views/dashboard.php';
        break;
    case 'create-post':
        requireLogin();
        require_once '../controllers/post_controller.php';
        require_once '../views/posts/create.php';
        break;
    case 'edit-post':
        requireLogin();
        require_once '../controllers/post_controller.php';
        require_once '../views/posts/edit.php';
        break;
    case 'delete-post':
        requireLogin();
        require_once '../controllers/post_controller.php';
        deletePost();
        break;
    case 'post':
        require_once '../controllers/post_controller.php';
        require_once '../views/posts/view.php';
        break;
    default:
        require_once '../controllers/post_controller.php';
        require_once '../views/home.php';
}
</code></pre>

                <p><strong>Explanation:</strong> This file acts as the main entry point and router for our application. It loads all necessary files, initializes our session and models, and routes requests to the appropriate controllers and views based on the page parameter.</p>
                
                <p><strong>Real-world analogy:</strong> Think of this file as the front desk at a hotel. Visitors (users) arrive with different needs (page requests), and the front desk directs them to the appropriate department or room (controller and view).</p>
            </div>
            
            <div class="step">
                <h3>Step 9: Creating Controllers</h3>
                <p>Let's create our controllers to handle the application logic.</p>
                
                <h4>Authentication Controller</h4>
                <p><strong>File:</strong> <code>controllers/auth_controller.php</code></p>
                <pre><code>&lt;?php
// Handle user registration
function registerUser() {
    global $user, $session;
    
    // Validate form submission
    if (!isPost()) {
        return;
    }
    
    // Sanitize POST data
    $data = [
        'username' => trim($_POST['username']),
        'email' => trim($_POST['email']),
        'password' => trim($_POST['password']),
        'confirm_password' => trim($_POST['confirm_password']),
        'username_err' => '',
        'email_err' => '',
        'password_err' => '',
        'confirm_password_err' => ''
    ];
    
    // Validate username
    if (empty($data['username'])) {
        $data['username_err'] = 'Please enter a username';
    } elseif ($user->findUserByUsername($data['username'])) {
        $data['username_err'] = 'Username is already taken';
    }
    
    // Validate email
    if (empty($data['email'])) {
        $data['email_err'] = 'Please enter an email';
    } elseif ($user->findUserByEmail($data['email'])) {
        $data['email_err'] = 'Email is already registered';
    }
    
    // Validate password
    if (empty($data['password'])) {
        $data['password_err'] = 'Please enter a password';
    } elseif (strlen($data['password']) < 6) {
        $data['password_err'] = 'Password must be at least 6 characters';
    }
    
    // Validate confirm password
    if (empty($data['confirm_password'])) {
        $data['confirm_password_err'] = 'Please confirm password';
    } elseif ($data['password'] != $data['confirm_password']) {
        $data['confirm_password_err'] = 'Passwords do not match';
    }
    
    // Check if there are any errors
    if (empty($data['username_err']) && empty($data['email_err']) && 
        empty($data['password_err']) && empty($data['confirm_password_err'])) {
        
        // Register user
        if ($user->register($data)) {
            $session->setFlash('register_success', 'You are now registered and can log in', 'success');
            redirect('login.php');
        } else {
            die('Something went wrong');
        }
    }
    
    return $data;
}

// Handle user login
function loginUser() {
    global $user, $session;
    
    // Validate form submission
    if (!isPost()) {
        return;
    }
    
    // Sanitize POST data
    $data = [
        'username' => trim($_POST['username']),
        'password' => trim($_POST['password']),
        'username_err' => '',
        'password_err' => ''
    ];
    
    // Validate username
    if (empty($data['username'])) {
        $data['username_err'] = 'Please enter username';
    }
    
    // Validate password
    if (empty($data['password'])) {
        $data['password_err'] = 'Please enter password';
    }
    
    // Check if user exists
    if (empty($data['username_err']) && empty($data['password_err'])) {
        // Attempt to login
        $loggedInUser = $user->login($data['username'], $data['password']);
        
        if ($loggedInUser) {
            // Create user session
            $session->setUser($loggedInUser);
            redirect('dashboard.php');
        } else {
            $data['password_err'] = 'Incorrect username or password';
        }
    }
    
    return $data;
}

// Handle user logout
function logoutUser() {
    global $session;
    
    // Clear session
    $session->logout();
    $session->setFlash('logout_success', 'You have been logged out', 'success');
    redirect('login.php');
}

// Process the registration form
$registrationData = registerUser();

// Process the login form
$loginData = loginUser();
</code></pre>

                <h4>Post Controller</h4>
                <p><strong>File:</strong> <code>controllers/post_controller.php</code></p>
                <pre><code>&lt;?php
// Get all posts for home page
function getAllPosts() {
    global $post;
    return $post->getPosts();
}

// Get single post by ID
function getPost() {
    global $post;
    
    // Check if post ID is provided
    if (!isset($_GET['id'])) {
        redirect('index.php');
    }
    
    // Get post by ID
    $postItem = $post->getPostById($_GET['id']);
    
    // Check if post exists
    if (!$postItem) {
        redirect('index.php');
    }
    
    return $postItem;
}

// Handle creating a new post
function createPost() {
    global $post, $session;
    
    // Validate form submission
    if (!isPost()) {
        return;
    }
    
    // Sanitize POST data
    $data = [
        'user_id' => getLoggedInUser()->id,
        'title' => trim($_POST['title']),
        'content' => trim($_POST['content']),
        'title_err' => '',
        'content_err' => ''
    ];
    
    // Validate title
    if (empty($data['title'])) {
        $data['title_err'] = 'Please enter a title';
    }
    
    // Validate content
    if (empty($data['content'])) {
        $data['content_err'] = 'Please enter content';
    }
    
    // Check if there are any errors
    if (empty($data['title_err']) && empty($data['content_err'])) {
        // Add post
        if ($post->addPost($data)) {
            $session->setFlash('post_success', 'Post created successfully', 'success');
            redirect('dashboard.php');
        } else {
            die('Something went wrong');
        }
    }
    
    return $data;
}

// Handle updating a post
function updatePost() {
    global $post, $session;
    
    // Check if post ID is provided
    if (!isset($_GET['id'])) {
        redirect('dashboard.php');
    }
    
    // Get post by ID
    $postItem = $post->getPostById($_GET['id']);
    
    // Check if post exists and user owns it
    if (!$postItem || !$post->isOwnedByUser($postItem->id, getLoggedInUser()->id)) {
        redirect('dashboard.php');
    }
    
    // Validate form submission
    if (!isPost()) {
        return [
            'id' => $postItem->id,
            'title' => $postItem->title,
            'content' => $postItem->content,
            'title_err' => '',
            'content_err' => ''
        ];
    }
    
    // Sanitize POST data
    $data = [
        'id' => $_GET['id'],
        'title' => trim($_POST['title']),
        'content' => trim($_POST['content']),
        'title_err' => '',
        'content_err' => ''
    ];
    
    // Validate title
    if (empty($data['title'])) {
        $data['title_err'] = 'Please enter a title';
    }
    
    // Validate content
    if (empty($data['content'])) {
        $data['content_err'] = 'Please enter content';
    }
    
    // Check if there are any errors
    if (empty($data['title_err']) && empty($data['content_err'])) {
        // Update post
        if ($post->updatePost($data)) {
            $session->setFlash('post_success', 'Post updated successfully', 'success');
            redirect('dashboard.php');
        } else {
            die('Something went wrong');
        }
    }
    
    return $data;
}

// Handle deleting a post
function deletePost() {
    global $post, $session;
    
    // Check if post ID is provided
    if (!isset($_GET['id'])) {
        redirect('dashboard.php');
    }
    
    // Check if user owns the post
    if (!$post->isOwnedByUser($_GET['id'], getLoggedInUser()->id)) {
        $session->setFlash('post_error', 'You do not have permission to delete this post', 'danger');
        redirect('dashboard.php');
    }
    
    // Delete post
    if ($post->deletePost($_GET['id'])) {
        $session->setFlash('post_success', 'Post deleted successfully', 'success');
    } else {
        $session->setFlash('post_error', 'Failed to delete post', 'danger');
    }
    
    redirect('dashboard.php');
}

// Process functions based on the current action
$posts = getAllPosts();
$postData = createPost();
$updateData = updatePost();
$viewData = getPost();
</code></pre>

                <h4>User Controller</h4>
                <p><strong>File:</strong> <code>controllers/user_controller.php</code></p>
                <pre><code>&lt;?php
// Get posts by the logged-in user for dashboard
function getUserPosts() {
    global $post;
    
    // Get logged in user ID
    $userId = getLoggedInUser()->id;
    
    // Get posts by user
    return $post->getPostsByUser($userId);
}

// Get user posts for dashboard
$userPosts = getUserPosts();
</code></pre>

                <p><strong>Explanation:</strong> These controllers handle the application logic for authentication, post management, and user-related operations. They process form submissions, validate input, interact with models, and redirect users as needed.</p>
                
                <p><strong>Real-world analogy:</strong> Controllers are like managers in a company. They receive requests from clients (views), delegate work to specialists (models), make decisions based on business rules, and coordinate the response back to the client.</p>
            </div>
            
            <div class="step">
                <h3>Step 10: Creating Views</h3>
                <p>Now, let's create our views to display the user interface.</p>
                
                <h4>Header Layout</h4>
                <p><strong>File:</strong> <code>views/layouts/header.php</code></p>
                <pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;&lt;?php echo SITE_NAME; ?&gt;&lt;/title&gt;
    &lt;link rel="stylesheet" href="&lt;?php echo APP_URL; ?&gt;/css/style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;header&gt;
        &lt;nav class="navbar"&gt;
            &lt;div class="container"&gt;
                &lt;h1 class="logo"&gt;&lt;a href="&lt;?php echo APP_URL; ?&gt;/"&gt;&lt;?php echo SITE_NAME; ?&gt;&lt;/a&gt;&lt;/h1&gt;
                &lt;ul class="nav-links"&gt;
                    &lt;li&gt;&lt;a href="&lt;?php echo APP_URL; ?&gt;/"&gt;Home&lt;/a&gt;&lt;/li&gt;
                    &lt;?php if(isLoggedIn()) : ?&gt;
                        &lt;li&gt;&lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=dashboard"&gt;Dashboard&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=logout"&gt;Logout&lt;/a&gt;&lt;/li&gt;
                    &lt;?php else : ?&gt;
                        &lt;li&gt;&lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=login"&gt;Login&lt;/a&gt;&lt;/li&gt;
                        &lt;li&gt;&lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=register"&gt;Register&lt;/a&gt;&lt;/li&gt;
                    &lt;?php endif; ?&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/nav&gt;
    &lt;/header&gt;
    
    &lt;div class="container"&gt;
</code></pre>

                <h4>Footer Layout</h4>
                <p><strong>File:</strong> <code>views/layouts/footer.php</code></p>
                <pre><code>    &lt;/div&gt; &lt;!-- End container --&gt;
    
    &lt;footer&gt;
        &lt;div class="container"&gt;
            &lt;p&gt;&amp;copy; &lt;?php echo date('Y'); ?&gt; &lt;?php echo SITE_NAME; ?&gt;. All rights reserved.&lt;/p&gt;
        &lt;/div&gt;
    &lt;/footer&gt;
    
    &lt;script src="&lt;?php echo APP_URL; ?&gt;/js/script.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

                <h4>Home Page</h4>
                <p><strong>File:</strong> <code>views/home.php</code></p>
                <pre><code>&lt;?php require_once '../views/layouts/header.php'; ?&gt;

&lt;div class="hero"&gt;
    &lt;h2&gt;Welcome to &lt;?php echo SITE_NAME; ?&gt;&lt;/h2&gt;
    &lt;p&gt;Share your thoughts and ideas with the world!&lt;/p&gt;
&lt;/div&gt;

&lt;div class="posts"&gt;
    &lt;h2&gt;Latest Posts&lt;/h2&gt;
    
    &lt;?php if(empty($posts)) : ?&gt;
        &lt;p&gt;No posts found.&lt;/p&gt;
    &lt;?php else : ?&gt;
        &lt;?php foreach($posts as $post) : ?&gt;
            &lt;div class="post-card"&gt;
                &lt;h3&gt;&lt;?php echo sanitize($post->title); ?&gt;&lt;/h3&gt;
                &lt;p class="post-meta"&gt;
                    Posted by &lt;?php echo sanitize($post->username); ?&gt; 
                    on &lt;?php echo date('F j, Y', strtotime($post->created_at)); ?&gt;
                &lt;/p&gt;
                &lt;div class="post-excerpt"&gt;
                    &lt;?php echo substr(sanitize($post->content), 0, 200) . '...'; ?&gt;
                &lt;/div&gt;
                &lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=post&amp;id=&lt;?php echo $post->id; ?&gt;" class="btn btn-primary"&gt;Read More&lt;/a&gt;
            &lt;/div&gt;
        &lt;?php endforeach; ?&gt;
    &lt;?php endif; ?&gt;
&lt;/div&gt;

&lt;?php require_once '../views/layouts/footer.php'; ?&gt;
</code></pre>

                <h4>Registration Form</h4>
                <p><strong>File:</strong> <code>views/auth/register.php</code></p>
                <pre><code>&lt;?php require_once '../views/layouts/header.php'; ?&gt;

&lt;div class="auth-container"&gt;
    &lt;h2&gt;Register&lt;/h2&gt;
    &lt;p&gt;Create an account to start posting&lt;/p&gt;
    
    &lt;form action="&lt;?php echo APP_URL; ?&gt;/index.php?page=register" method="post"&gt;
        &lt;div class="form-group"&gt;
            &lt;label for="username"&gt;Username&lt;/label&gt;
            &lt;input type="text" name="username" id="username" class="&lt;?php echo (!empty($registrationData['username-err'])) ? 'is-invalid' : ''; ?&gt;" value="&lt;?php echo sanitize($registrationData['username'] ?? ''); ?&gt;"&gt;
            &lt;span class="invalid-feedback"&gt;&lt;?php echo $registrationData['username_err'] ?? ''; ?&gt;&lt;/span&gt;
        &lt;/div&gt;
        
        &lt;div class="form-group"&gt;
            &lt;label for="email"&gt;Email&lt;/label&gt;
            &lt;input type="email" name="email" id="email" class="&lt;?php echo (!empty($registrationData['email-err'])) ? 'is-invalid' : ''; ?&gt;" value="&lt;?php echo sanitize($registrationData['email'] ?? ''); ?&gt;"&gt;
            &lt;span class="invalid-feedback"&gt;&lt;?php echo $registrationData['email_err'] ?? ''; ?&gt;&lt;/span&gt;
        &lt;/div&gt;
        
        &lt;div class="form-group"&gt;
            &lt;label for="password"&gt;Password&lt;/label&gt;
            &lt;input type="password" name="password" id="password" class="&lt;?php echo (!empty($registrationData['password-err'])) ? 'is-invalid' : ''; ?&gt;" value="&lt;?php echo sanitize($registrationData['password'] ?? ''); ?&gt;"&gt;
            &lt;span class="invalid-feedback"&gt;&lt;?php echo $registrationData['password_err'] ?? ''; ?&gt;&lt;/span&gt;
        &lt;/div&gt;
        
        &lt;div class="form-group"&gt;
            &lt;label for="confirm_password"&gt;Confirm Password&lt;/label&gt;
            &lt;input type="password" name="confirm_password" id="confirm_password" class="&lt;?php echo (!empty($registrationData['confirm-password_err'])) ? 'is-invalid' : ''; ?&gt;" value="&lt;?php echo sanitize($registrationData['confirm_password'] ?? ''); ?&gt;"&gt;
            &lt;span class="invalid-feedback"&gt;&lt;?php echo $registrationData['confirm_password_err'] ?? ''; ?&gt;&lt;/span&gt;
        &lt;/div&gt;
        
        &lt;div class="form-group"&gt;
            &lt;button type="submit" class="btn btn-primary"&gt;Register&lt;/button&gt;
        &lt;/div&gt;
        
        &lt;p&gt;Already have an account? &lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=login"&gt;Login&lt;/a&gt;&lt;/p&gt;
    &lt;/form&gt;
&lt;/div&gt;

&lt;?php require_once '../views/layouts/footer.php'; ?&gt;
</code></pre>

                <h4>Login Form</h4>
                <p><strong>File:</strong> <code>views/auth/login.php</code></p>
                <pre><code>&lt;?php require_once '../views/layouts/header.php'; ?&gt;

&lt;div class="auth-container"&gt;
    &lt;h2&gt;Login&lt;/h2&gt;
    &lt;p&gt;Log in to access your account&lt;/p&gt;
    
    &lt;?php displayFlash('register_success'); ?&gt;
    &lt;?php displayFlash('logout_success'); ?&gt;
    &lt;?php displayFlash('login_required'); ?&gt;
    
    &lt;form action="&lt;?php echo APP_URL; ?&gt;/index.php?page=login" method="post"&gt;
        &lt;div class="form-group"&gt;
            &lt;label for="username"&gt;Username&lt;/label&gt;
            &lt;input type="text" name="username" id="username" class="&lt;?php echo (!empty($loginData['username-err'])) ? 'is-invalid' : ''; ?&gt;" value="&lt;?php echo sanitize($loginData['username'] ?? ''); ?&gt;"&gt;
            &lt;span class="invalid-feedback"&gt;&lt;?php echo $loginData['username_err'] ?? ''; ?&gt;&lt;/span&gt;
        &lt;/div&gt;
        
        &lt;div class="form-group"&gt;
            &lt;label for="password"&gt;Password&lt;/label&gt;
            &lt;input type="password" name="password" id="password" class="&lt;?php echo (!empty($loginData['password-err'])) ? 'is-invalid' : ''; ?&gt;" value="&lt;?php echo sanitize($loginData['password'] ?? ''); ?&gt;"&gt;
            &lt;span class="invalid-feedback"&gt;&lt;?php echo $loginData['password_err'] ?? ''; ?&gt;&lt;/span&gt;
        &lt;/div&gt;
        
        &lt;div class="form-group"&gt;
            &lt;button type="submit" class="btn btn-primary"&gt;Login&lt;/button&gt;
        &lt;/div&gt;
        
        &lt;p&gt;Don't have an account? &lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=register"&gt;Register&lt;/a&gt;&lt;/p&gt;
    &lt;/form&gt;
&lt;/div&gt;

&lt;?php require_once '../views/layouts/footer.php'; ?&gt;
</code></pre>

                <h4>User Dashboard</h4>
                <p><strong>File:</strong> <code>views/dashboard.php</code></p>
                <pre><code>&lt;?php require_once '../views/layouts/header.php'; ?&gt;

&lt;div class="dashboard"&gt;
    &lt;h2&gt;Welcome, &lt;?php echo sanitize(getLoggedInUser()->username); ?&gt;&lt;/h2&gt;
    
    &lt;?php displayFlash('post_success'); ?&gt;
    &lt;?php displayFlash('post_error'); ?&gt;
    
    &lt;div class="dashboard-actions"&gt;
        &lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=create-post" class="btn btn-primary"&gt;Create New Post&lt;/a&gt;
    &lt;/div&gt;
    
    &lt;h3&gt;Your Posts&lt;/h3&gt;
    
    &lt;?php if(empty($userPosts)) : ?&gt;
        &lt;p&gt;You haven't created any posts yet.&lt;/p&gt;
    &lt;?php else : ?&gt;
        &lt;div class="post-list"&gt;
            &lt;?php foreach($userPosts as $post) : ?&gt;
                &lt;div class="post-item"&gt;
                    &lt;h4&gt;&lt;?php echo sanitize($post->title); ?&gt;&lt;/h4&gt;
                    &lt;p class="post-meta"&gt;Posted on &lt;?php echo date('F j, Y', strtotime($post->created_at)); ?&gt;&lt;/p&gt;
                    &lt;div class="post-actions"&gt;
                        &lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=post&amp;id=&lt;?php echo $post->id; ?&gt;" class="btn btn-sm btn-secondary"&gt;View&lt;/a&gt;
                        &lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=edit-post&amp;id=&lt;?php echo $post->id; ?&gt;" class="btn btn-sm btn-primary"&gt;Edit&lt;/a&gt;
                        &lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=delete-post&amp;id=&lt;?php echo $post->id; ?&gt;" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete this post?')"&gt;Delete&lt;/a&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;?php endforeach; ?&gt;
        &lt;/div&gt;
    &lt;?php endif; ?&gt;
&lt;/div&gt;

&lt;?php require_once '../views/layouts/footer.php'; ?&gt;
</code></pre>

                <h4>Create Post Form</h4>
                <p><strong>File:</strong> <code>views/posts/create.php</code></p>
                <pre><code>&lt;?php require_once '../views/layouts/header.php'; ?&gt;

&lt;div class="post-form"&gt;
    &lt;h2&gt;Create New Post&lt;/h2&gt;
    
    &lt;form action="&lt;?php echo APP_URL; ?&gt;/index.php?page=create-post" method="post"&gt;
        &lt;div class="form-group"&gt;
            &lt;label for="title"&gt;Title&lt;/label&gt;
            &lt;input type="text" name="title" id="title" class="&lt;?php echo (!empty($postData['title-err'])) ? 'is-invalid' : ''; ?&gt;" value="&lt;?php echo sanitize($postData['title'] ?? ''); ?&gt;"&gt;
            &lt;span class="invalid-feedback"&gt;&lt;?php echo $postData['title_err'] ?? ''; ?&gt;&lt;/span&gt;
        &lt;/div&gt;
        
        &lt;div class="form-group"&gt;
            &lt;label for="content"&gt;Content&lt;/label&gt;
            &lt;textarea name="content" id="content" rows="10" class="&lt;?php echo (!empty($postData['content-err'])) ? 'is-invalid' : ''; ?&gt;"&gt;&lt;?php echo sanitize($postData['content'] ?? ''); ?&gt;&lt;/textarea&gt;
            &lt;span class="invalid-feedback"&gt;&lt;?php echo $postData['content_err'] ?? ''; ?&gt;&lt;/span&gt;
        &lt;/div&gt;
        
        &lt;div class="form-group"&gt;
            &lt;button type="submit" class="btn btn-primary"&gt;Create Post&lt;/button&gt;
            &lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=dashboard" class="btn btn-secondary"&gt;Cancel&lt;/a&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/div&gt;

&lt;?php require_once '../views/layouts/footer.php'; ?&gt;
</code></pre>

                <h4>Edit Post Form</h4>
                <p><strong>File:</strong> <code>views/posts/edit.php</code></p>
                <pre><code>&lt;?php require_once '../views/layouts/header.php'; ?&gt;

&lt;div class="post-form"&gt;
    &lt;h2&gt;Edit Post&lt;/h2&gt;
    
    &lt;form action="&lt;?php echo APP_URL; ?&gt;/index.php?page=edit-post&amp;id=&lt;?php echo $updateData['id']; ?&gt;" method="post"&gt;
        &lt;div class="form-group"&gt;
            &lt;label for="title"&gt;Title&lt;/label&gt;
            &lt;input type="text" name="title" id="title" class="&lt;?php echo (!empty($updateData['title-err'])) ? 'is-invalid' : ''; ?&gt;" value="&lt;?php echo sanitize($updateData['title']); ?&gt;"&gt;
            &lt;span class="invalid-feedback"&gt;&lt;?php echo $updateData['title_err'] ?? ''; ?&gt;&lt;/span&gt;
        &lt;/div&gt;
        
        &lt;div class="form-group"&gt;
            &lt;label for="content"&gt;Content&lt;/label&gt;
            &lt;textarea name="content" id="content" rows="10" class="&lt;?php echo (!empty($updateData['content-err'])) ? 'is-invalid' : ''; ?&gt;"&gt;&lt;?php echo sanitize($updateData['content']); ?&gt;&lt;/textarea&gt;
            &lt;span class="invalid-feedback"&gt;&lt;?php echo $updateData['content_err'] ?? ''; ?&gt;&lt;/span&gt;
        &lt;/div&gt;
        
        &lt;div class="form-group"&gt;
            &lt;button type="submit" class="btn btn-primary"&gt;Update Post&lt;/button&gt;
            &lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=dashboard" class="btn btn-secondary"&gt;Cancel&lt;/a&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/div&gt;

&lt;?php require_once '../views/layouts/footer.php'; ?&gt;
</code></pre>

                <h4>View Single Post</h4>
                <p><strong>File:</strong> <code>views/posts/view.php</code></p>
                <pre><code>&lt;?php require_once '../views/layouts/header.php'; ?&gt;

&lt;div class="post-detail"&gt;
    &lt;h2&gt;&lt;?php echo sanitize($viewData->title); ?&gt;&lt;/h2&gt;
    
    &lt;div class="post-meta"&gt;
        Posted by &lt;?php echo sanitize($viewData->username); ?&gt; 
        on &lt;?php echo date('F j, Y', strtotime($viewData->created_at)); ?&gt;
    &lt;/div&gt;
    
    &lt;div class="post-content"&gt;
        &lt;?php echo nl2br(sanitize($viewData->content)); ?&gt;
    &lt;/div&gt;
    
    &lt;div class="post-actions"&gt;
        &lt;a href="&lt;?php echo APP_URL; ?&gt;/" class="btn btn-secondary"&gt;Back to Posts&lt;/a&gt;
        
        &lt;?php if (isLoggedIn() && $viewData->user_id == getLoggedInUser()->id) : ?&gt;
            &lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=edit-post&amp;id=&lt;?php echo $viewData->id; ?&gt;" class="btn btn-primary"&gt;Edit&lt;/a&gt;
            &lt;a href="&lt;?php echo APP_URL; ?&gt;/index.php?page=delete-post&amp;id=&lt;?php echo $viewData->id; ?&gt;" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this post?')"&gt;Delete&lt;/a&gt;
        &lt;?php endif; ?&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;?php require_once '../views/layouts/footer.php'; ?&gt;
</code></pre>

                <p><strong>Explanation:</strong> These view files create the user interface for our application. They include forms for user registration, login, and post management, as well as pages to display posts and user dashboards.</p>
                
                <p><strong>Real-world analogy:</strong> Think of views as the storefronts of our application. They're what users actually see and interact with, while all the complex business logic happens behind the scenes.</p>
            </div>
            
            <div class="step">
                <h3>Step 11: Creating CSS Styles</h3>
                <p>Let's add some basic CSS to make our application look presentable.</p>
                
                <h4>CSS Styles</h4>
                <p><strong>File:</strong> <code>public/css/style.css</code></p>
                <pre><code>/* General Styles */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: Arial, Helvetica, sans-serif;
    line-height: 1.6;
    background-color: #f4f4f4;
    color: #333;
    margin: 0;
    padding: 0;
}

.container {
    max-width: 1100px;
    margin: 0 auto;
    padding: 0 20px;
}

a {
    color: #007bff;
    text-decoration: none;
}

a:hover {
    color: #0056b3;
    text-decoration: underline;
}

/* Header & Navigation */
header {
    background-color: #333;
    color: #fff;
    padding: 1rem 0;
    margin-bottom: 30px;
}

.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.logo a {
    color: #fff;
    text-decoration: none;
    font-size: 1.5rem;
}

.nav-links {
    display: flex;
    list-style: none;
}

.nav-links li {
    margin-left: 20px;
}

.nav-links a {
    color: #fff;
    text-decoration: none;
}

.nav-links a:hover {
    color: #ccc;
}

/* Footer */
footer {
    background-color: #333;
    color: #fff;
    text-align: center;
    padding: 1rem 0;
    margin-top: 30px;
}

/* Forms */
.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.form-group input,
.form-group textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.form-group textarea {
    resize: vertical;
}

.is-invalid {
    border-color: #dc3545 !important;
}

.invalid-feedback {
    color: #dc3545;
    display: block;
    margin-top: 5px;
    font-size: 0.9rem;
}

/* Buttons */
.btn {
    display: inline-block;
    padding: 10px 15px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    text-align: center;
    text-decoration: none;
    margin-right: 5px;
}

.btn-sm {
    padding: 5px 10px;
    font-size: 0.8rem;
}

.btn-primary {
    background-color: #007bff;
    color: #fff;
}

.btn-primary:hover {
    background-color: #0056b3;
    color: #fff;
    text-decoration: none;
}

.btn-secondary {
    background-color: #6c757d;
    color: #fff;
}

.btn-secondary:hover {
    background-color: #5a6268;
    color: #fff;
    text-decoration: none;
}

.btn-danger {
    background-color: #dc3545;
    color: #fff;
}

.btn-danger:hover {
    background-color: #bd2130;
    color: #fff;
    text-decoration: none;
}

/* Alerts */
.alert {
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 5px;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-warning {
    background-color: #fff3cd;
    color: #856404;
    border: 1px solid #ffeeba;
}

.alert-danger {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

/* Auth Pages */
.auth-container {
    max-width: 500px;
    margin: 0 auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.auth-container h2 {
    margin-bottom: 20px;
    text-align: center;
}

.auth-container p {
    margin-bottom: 20px;
    text-align: center;
}

/* Home Page */
.hero {
    background-color: #007bff;
    color: #fff;
    padding: 50px 0;
    text-align: center;
    margin-bottom: 30px;
}

.hero h2 {
    font-size: 2.5rem;
    margin-bottom: 10px;
}

.posts h2 {
    margin-bottom: 20px;
}

.post-card {
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin-bottom: 20px;
}

.post-card h3 {
    margin-bottom: 10px;
}

.post-meta {
    color: #6c757d;
    margin-bottom: 10px;
    font-size: 0.9rem;
}

.post-excerpt {
    margin-bottom: 15px;
}

/* Dashboard */
.dashboard h2 {
    margin-bottom: 20px;
}

.dashboard-actions {
    margin-bottom: 30px;
}

.post-list {
    margin-top: 20px;
}

.post-item {
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    padding: 15px;
    margin-bottom: 15px;
}

.post-item h4 {
    margin-bottom: 5px;
}

.post-actions {
    margin-top: 10px;
}

/* Post Forms */
.post-form {
    max-width: 800px;
    margin: 0 auto;
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    padding: 20px;
}

.post-form h2 {
    margin-bottom: 20px;
}

/* Post Detail */
.post-detail {
    background-color: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    padding: 20px;
}

.post-detail h2 {
    margin-bottom: 10px;
}

.post-content {
    margin: 20px 0;
    line-height: 1.8;
}

/* Responsive Design */
@media (max-width: 768px) {
    .navbar {
        flex-direction: column;
    }
    
    .logo {
        margin-bottom: 10px;
    }
    
    .nav-links {
        margin-top: 10px;
    }
    
    .nav-links li {
        margin: 0 10px;
    }
}
</code></pre>

                <p><strong>Explanation:</strong> This CSS file provides basic styling for our application, including layout, colors, typography, and responsive design for different screen sizes.</p>
                
                <p><strong>Real-world analogy:</strong> CSS is like the paint, furniture, and decorations in a house. It doesn't change the structure or functionality, but it makes everything look good and enhances the user experience.</p>
            </div>
            
            <div class="step">
                <h3>Step 12: Adding Basic JavaScript</h3>
                <p>Let's add some simple JavaScript for interactive features.</p>
                
                <h4>JavaScript File</h4>
                <p><strong>File:</strong> <code>public/js/script.js</code></p>
                <pre><code>// Wait for DOM to load
document.addEventListener('DOMContentLoaded', function() {
    // Auto-hide alerts after 5 seconds
    const alerts = document.querySelectorAll('.alert');
    alerts.forEach(function(alert) {
        setTimeout(function() {
            alert.style.opacity = '0';
            alert.style.transition = 'opacity 1s';
            
            // Remove from DOM after fade out
            setTimeout(function() {
                alert.remove();
            }, 1000);
        }, 5000);
    });
    
    // Confirm delete actions
    const deleteButtons = document.querySelectorAll('[data-confirm]');
    deleteButtons.forEach(function(button) {
        button.addEventListener('click', function(e) {
            if (!confirm(this.getAttribute('data-confirm'))) {
                e.preventDefault();
            }
        });
    });
});
</code></pre>

                <p><strong>Explanation:</strong> This JavaScript file adds two simple interactive features: automatically hiding alert messages after a few seconds and confirming delete actions before proceeding.</p>
                
                <p><strong>Real-world analogy:</strong> If HTML is the structure and CSS is the appearance, JavaScript is the behavior of our application. It's like adding automated features to a house, such as lights that turn off automatically or doors that lock when closed.</p>
            </div>
        </section>

        <section class="testing">
            <h2>Looking Back and Testing</h2>
            <p>Now that we've built our application, let's test it to make sure everything works as expected.</p>
            
            <div class="testing-steps">
                <h3>Testing Checklist</h3>
                <ol>
                    <li><strong>Database Setup</strong>
                        <ul>
                            <li>Verify that the database and tables are created correctly</li>
                            <li>Check that foreign key relationships are working</li>
                        </ul>
                    </li>
                    <li><strong>User Registration</strong>
                        <ul>
                            <li>Test registration with valid data</li>
                            <li>Test validation for empty fields</li>
                            <li>Test validation for duplicate username/email</li>
                            <li>Test validation for password requirements</li>
                        </ul>
                    </li>
                    <li><strong>User Login</strong>
                        <ul>
                            <li>Test login with valid credentials</li>
                            <li>Test login with invalid credentials</li>
                            <li>Verify that session is created on successful login</li>
                        </ul>
                    </li>
                    <li><strong>User Logout</strong>
                        <ul>
                            <li>Verify that session is destroyed on logout</li>
                            <li>Check that user is redirected correctly</li>
                        </ul>
                    </li>
                    <li><strong>Post Management</strong>
                        <ul>
                            <li>Test creating a new post</li>
                            <li>Test editing an existing post</li>
                            <li>Test deleting a post</li>
                            <li>Test validation for post fields</li>
                        </ul>
                    </li>
                    <li><strong>Access Control</strong>
                        <ul>
                            <li>Verify that only logged-in users can access protected pages</li>
                            <li>Check that users can only edit/delete their own posts</li>
                        </ul>
                    </li>
                    <li><strong>UI Testing</strong>
                        <ul>
                            <li>Test responsive design on different screen sizes</li>
                            <li>Verify that all links work correctly</li>
                            <li>Check that forms and buttons function as expected</li>
                        </ul>
                    </li>
                </ol>
            </div>
            
            <div class="debug-tips">
                <h3>Debugging Tips</h3>
                <ul>
                    <li><strong>Check Error Messages:</strong> PHP errors can provide valuable information about what's going wrong.</li>
                    <li><strong>Use var_dump() or print_r():</strong> Output variables to see their contents at different points in your code.</li>
                    <li><strong>Check Database Queries:</strong> Use tools like phpMyAdmin to run your queries directly and see the results.</li>
                    <li><strong>Browser Developer Tools:</strong> Use the browser's console and network tabs to debug JavaScript and HTTP requests.</li>
                    <li><strong>Step-by-Step Testing:</strong> Test one feature at a time to isolate problems.</li>
                </ul>
                
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 1300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="1300" fill="#fafafa" rx="8"/>
    
    <line x1="166.66666666666669" y1="200" x2="633.3333333333334" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="190.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="400.0" y1="200" x2="330.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="200" x2="470.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="633.3333333333334" y1="200" x2="610.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="190.0" y1="320" x2="610.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="330.0" y1="320" x2="610.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="470.0" y1="320" x2="610.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="610.0" y1="320" x2="400.0" y2="440" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="400.0" y1="80" x2="166.66666666666669" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="283.33333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">PHP Error</text>
    <line x1="400.0" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="341.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">Database Error</text>
    <line x1="400.0" y1="80" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.0" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">JavaScript Error</text>
    <line x1="400.0" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="458.33333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">Display Error</text>
    <line x1="400.0" y1="440" x2="283.33333333333337" y2="560" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="341.6666666666667" y="495.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="400.0" y1="440" x2="516.6666666666667" y2="560" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="458.33333333333337" y="495.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <line x1="400.0" y1="80" x2="633.3333333333334" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt;|Display Error| F[Inspect HTML/CSS] C </text>
    <line x1="283.33333333333337" y1="200" x2="330.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="306.6666666666667" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; H[Fix Query or Database Schema] E </text>
    <line x1="516.6666666666667" y1="200" x2="610.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="563.3333333333334" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; J[Fix HTML/CSS] G </text>
    <line x1="190.0" y1="320" x2="610.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.0" y="315.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; K I </text>
    <line x1="470.0" y1="320" x2="400.0" y2="440" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="435.0" y="375.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; K K </text>
    <rect x="456.66666666666674" y="535" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="560" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Error Occurs</text>
    <rect x="80.66666666666669" y="175" width="172" height="50" 
          rx="5" class="node-rect"/>
    <text x="166.66666666666669" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Check PHP Error Log</text>
    <rect x="177.33333333333337" y="175" width="212" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Test Query in phpMyAdmin</text>
    <rect x="306.0" y="175" width="188" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Check Browser Console</text>
    <rect x="442.66666666666674" y="175" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Inspect HTML/CSS</text>
    <rect x="567.3333333333334" y="175" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="633.3333333333334" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Fix Code Issue</text>
    <rect x="68.0" y="295" width="244" height="50" 
          rx="5" class="node-rect"/>
    <text x="190.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Fix Query or Database Schema</text>
    <rect x="244.0" y="295" width="172" height="50" 
          rx="5" class="node-rect"/>
    <text x="330.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Fix JavaScript Code</text>
    <rect x="410.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="470.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Fix HTML/CSS</text>
    <rect x="550.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="610.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Re-test</text>
    <rect x="209.33333333333337" y="535" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="560" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Continue Testing</text>
    <rect x="340.0" y="55" width="120" height="50" 
          transform="rotate(45 400.0 80)" class="node-rect"/>
    <text x="400.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Error Type?</text>
    <rect x="330.0" y="415" width="140" height="50" 
          transform="rotate(45 400.0 440)" class="node-rect"/>
    <text x="400.0" y="440" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Problem Solved?</text>
</svg>
</div>
            </div>
        </section>

        <section class="extensions">
            <h2>Extending the Application</h2>
            <p>After completing the basic version of our application, here are some ways you could extend it with additional features:</p>
            
            <div class="extension-ideas">
                <h3>Feature Extensions</h3>
                <ul>
                    <li><strong>User Profiles</strong>
                        <ul>
                            <li>Add profile pictures</li>
                            <li>Include user bio and additional information</li>
                            <li>Allow users to update their profile settings</li>
                        </ul>
                    </li>
                    <li><strong>Comments System</strong>
                        <ul>
                            <li>Allow users to comment on posts</li>
                            <li>Implement nested replies</li>
                            <li>Add comment moderation</li>
                        </ul>
                    </li>
                    <li><strong>Categories and Tags</strong>
                        <ul>
                            <li>Organize posts by categories</li>
                            <li>Implement tagging system</li>
                            <li>Add filtering by category/tag</li>
                        </ul>
                    </li>
                    <li><strong>Search Functionality</strong>
                        <ul>
                            <li>Add search form</li>
                            <li>Implement basic search functionality</li>
                            <li>Add advanced search options</li>
                        </ul>
                    </li>
                    <li><strong>Admin Dashboard</strong>
                        <ul>
                            <li>Create admin user role</li>
                            <li>Build admin dashboard</li>
                            <li>Implement user and content management</li>
                        </ul>
                    </li>
                    <li><strong>API Endpoints</strong>
                        <ul>
                            <li>Create RESTful API for posts</li>
                            <li>Implement authentication for API</li>
                            <li>Add rate limiting and security</li>
                        </ul>
                    </li>
                </ul>
            </div>
            
            <div class="security-improvements">
                <h3>Security Enhancements</h3>
                <ul>
                    <li><strong>CSRF Protection</strong>
                        <ul>
                            <li>Implement CSRF tokens for forms</li>
                            <li>Validate tokens on form submission</li>
                        </ul>
                    </li>
                    <li><strong>Input Validation</strong>
                        <ul>
                            <li>More thorough validation of user inputs</li>
                            <li>Implement server-side validation libraries</li>
                        </ul>
                    </li>
                    <li><strong>XSS Prevention</strong>
                        <ul>
                            <li>HTML purification for user-generated content</li>
                            <li>Content Security Policy implementation</li>
                        </ul>
                    </li>
                    <li><strong>Rate Limiting</strong>
                        <ul>
                            <li>Limit login attempts</li>
                            <li>Protect against brute force attacks</li>
                        </ul>
                    </li>
                    <li><strong>Two-Factor Authentication</strong>
                        <ul>
                            <li>Add optional 2FA for user accounts</li>
                            <li>Implement email or app-based verification</li>
                        </ul>
                    </li>
                </ul>
            </div>
        </section>

        <section class="conclusion">
            <h2>Conclusion</h2>
            <p>Congratulations! You've successfully built a dynamic web application with user authentication using PHP and MySQL. This project has covered many important aspects of web development:</p>
            
            <ul>
                <li>Setting up a structured PHP application</li>
                <li>Working with databases using PDO</li>
                <li>Implementing secure user authentication</li>
                <li>Creating a session management system</li>
                <li>Building CRUD (Create, Read, Update, Delete) functionality</li>
                <li>Implementing access control</li>
                <li>Creating a responsive user interface</li>
            </ul>
            
            <p>By following George Polya's problem-solving approach, we broke down a complex project into manageable steps, devised a clear plan, executed it systematically, and tested our solution thoroughly.</p>
            
            <p>As you continue to develop this application, remember that this is just the beginning. Web development is a continuous learning process, and there are always new techniques, tools, and best practices to explore.</p>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="400" fill="#fafafa" rx="8"/>
    
    <rect x="294.0" y="55" width="212" height="50" 
          rx="25" class="node-rect"/>
    <text x="400.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">(Web Development Journey</text>
</svg>
</div>
            
            <p>Keep building, keep learning, and most importantly, keep solving problems one step at a time!</p>
        </section>
        
        <section class="additional-resources">
            <h2>Additional Resources</h2>
            <ul>
                <li><a href="https://www.php.net/manual/en/">PHP Official Documentation</a></li>
                <li><a href="https://www.mysql.com/products/workbench/">MySQL Workbench</a></li>
                <li><a href="https://phptherightway.com/">PHP The Right Way</a></li>
                <li><a href="https://www.w3schools.com/php/">W3Schools PHP Tutorial</a></li>
                <li><a href="https://www.owasp.org/index.php/Main_Page">OWASP Web Security Resources</a></li>
            </ul>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
<script src="/assets/js/mermaid-universal-fix.js"></script>
</body>
</html>
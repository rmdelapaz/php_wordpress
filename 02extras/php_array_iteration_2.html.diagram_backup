<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>PHP Array Iteration: Traversing and Processing Data Efficiently - PHP WordPress Course</title>
<meta content="Advanced array iteration techniques." name="description"/>
<meta content="PHP, WordPress, web development, php, array, iteration, advanced" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Array Iteration Advanced</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 5</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_indexed_array.html">Indexed Arrays</a></li>
<li><a class="sidebar-link" href="/02module/php_associative_arrays.html">Associative Arrays</a></li>
<li><a class="sidebar-link" href="/02module/php_multidimensional_arrays.html">Multidimensional Arrays</a></li>
<li><a class="sidebar-link" href="/02module/php_array_functions.html">Array Functions</a></li>
<li><a class="sidebar-link" href="/02module/php_array_sorting.html">Array Sorting</a></li>
<li><a class="sidebar-link" href="/02module/php_array_iteration.html">Array Iteration</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_array_creation_manipulation.html">Homework: Arrays</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_for_loops.html">← Prev: Session 4: Loops</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_function_declaration_and_calling.html">Next: Session 6: Functions →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>PHP Array Iteration: Traversing and Processing Data Efficiently</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 30 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: Arrays and Data Manipulation</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP array operations</li>
<li>Work with different array types</li>
<li>Use array functions effectively</li>
<li>Manipulate complex data structures</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="intro">
            <h2>The Power of Array Iteration in Web Development</h2>
            <p>Welcome to our deep dive into PHP array iteration! As we continue our journey through PHP's array capabilities, we now focus on how to efficiently traverse and process array data. Iteration—the ability to systematically access each element of an array—is one of the most fundamental operations in programming, especially in web development where we constantly need to process lists of data.</p>
            
            <p>Think of array iteration like walking through a warehouse filled with products. You need an organized way to visit each item, examine it, perhaps modify it, and then move on to the next one. In web development, those "items" might be user records, blog posts, product listings, or any collection of data that powers your website or application.</p>
            
            <p>When working with WordPress, which is built on PHP, mastering array iteration becomes even more crucial. From processing custom post types to handling plugin options, from manipulating widget data to working with WooCommerce products—array iteration is an essential skill that you'll use daily as a WordPress developer.</p>
        </section>

        <section class="iteration-basics">
            <h2>Understanding Iteration: Concepts and Terminology</h2>
            
            <p>Before diving into specific techniques, let's establish a clear understanding of what happens during array iteration:</p>
            
            <div class="concept">
                <h3>What Is Array Iteration?</h3>
                <p>Array iteration is the process of accessing each element in an array, one at a time, in a systematic way. This allows you to:</p>
                <ul>
                    <li>Read values stored in the array</li>
                    <li>Modify elements as needed</li>
                    <li>Perform consistent operations on each item</li>
                    <li>Filter or transform the data</li>
                </ul>
                
                <div class="visualization">
                    
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="600" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="400.0" y1="320" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="341.6666666666667" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="400.0" y1="320" x2="400.0" y2="440" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.0" y="375.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <line x1="283.33333333333337" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.00000000000006" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; Process[&quot;Process Element&quot;] Process </text>
    <rect x="193.33333333333337" y="55" width="180" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Access First Element</text>
    <rect x="213.33333333333337" y="175" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Process Element</text>
    <rect x="426.66666666666674" y="175" width="180" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Move to Next Element</text>
    <rect x="456.66666666666674" y="55" width="120" height="50" 
          rx="25" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">[&quot;Start&quot;]</text>
    <rect x="340.0" y="415" width="120" height="50" 
          rx="25" class="node-rect"/>
    <text x="400.0" y="440" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">[&quot;Finish&quot;]</text>
    <rect x="334.0" y="295" width="132" height="50" 
          transform="rotate(45 400.0 320)" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">More Elements?</text>
</svg>
</div>
                </div>
            </div>
            
            <div class="concept">
                <h3>Key Terms in Array Iteration</h3>
                <ul>
                    <li><strong>Current Element</strong>: The array element currently being processed during iteration</li>
                    <li><strong>Current Key</strong>: The key or index associated with the current element</li>
                    <li><strong>Internal Array Pointer</strong>: A position indicator that PHP maintains to track which array element is currently being processed</li>
                    <li><strong>Iterative Statement</strong>: A programming construct (like a loop) that handles the process of moving from one element to the next</li>
                    <li><strong>Callback Function</strong>: A function that gets applied to each element during some forms of iteration</li>
                </ul>
            </div>
            
            <div class="concept">
                <h3>Iteration vs. Traversal</h3>
                <p>While often used interchangeably, there's a subtle difference:</p>
                <ul>
                    <li><strong>Traversal</strong> refers to simply visiting each element in sequence</li>
                    <li><strong>Iteration</strong> typically implies both traversal and performing some operation on each element</li>
                </ul>
                <p>In practice, PHP developers use "iteration" for both concepts.</p>
            </div>
        </section>

        <section class="loop-iteration">
            <h2>Basic Loop Iteration Techniques</h2>
            
            <p>Let's start with the fundamental loop-based methods for iterating through arrays in PHP:</p>
            
            <div class="technique">
                <h3>foreach Loop: The PHP Developer's Best Friend</h3>
                <p>The <code>foreach</code> loop is the most elegant and commonly used method for array iteration in PHP. It was specifically designed for traversing arrays and objects, making it the preferred choice in most situations.</p>
                
                <div class="code-example">
                    <pre><code>// Basic foreach loop (values only)
$fruits = ["Apple", "Banana", "Cherry", "Dragon fruit"];

foreach ($fruits as $fruit) {
    echo $fruit . " is a delicious fruit.&lt;br&gt;";
}
// Outputs:
// Apple is a delicious fruit.
// Banana is a delicious fruit.
// Cherry is a delicious fruit.
// Dragon fruit is a delicious fruit.

// foreach with both keys and values
$user = [
    "name" => "John Doe",
    "email" => "john@example.com",
    "age" => 28,
    "city" => "New York"
];

foreach ($user as $key => $value) {
    echo "User's " . $key . " is " . $value . "&lt;br&gt;";
}
// Outputs:
// User's name is John Doe
// User's email is john@example.com
// User's age is 28
// User's city is New York</code></pre>
                </div>
                
                <div class="advantages">
                    <h4>Advantages of foreach:</h4>
                    <ul>
                        <li>Clean, readable syntax specifically designed for arrays</li>
                        <li>Automatically handles both indexed and associative arrays</li>
                        <li>Easy access to both keys and values</li>
                        <li>No need to know array size or structure in advance</li>
                        <li>Automatically resets the array pointer when finished</li>
                    </ul>
                </div>
                
                <div class="best-practices">
                    <h4>Best Practices with foreach:</h4>
                    <ul>
                        <li>Use descriptive variable names that reflect the content (e.g., <code>$product</code> rather than <code>$item</code>)</li>
                        <li>When you need both keys and values, consistently order them as <code>foreach ($array as $key => $value)</code></li>
                        <li>If you only need values, use the simpler <code>foreach ($array as $value)</code> syntax</li>
                        <li>Consider using <code>&</code> reference when you need to modify array elements</li>
                    </ul>
                </div>
                
                <div class="modifications">
                    <h4>Modifying Array Elements During Iteration</h4>
                    <p>You can modify array elements during iteration by using the <code>&</code> reference operator:</p>
                    
                    <pre><code>// Modifying array elements using reference
$numbers = [1, 2, 3, 4, 5];

// Double each number
foreach ($numbers as &$number) {
    $number *= 2;
}
// Don't forget to unset the reference after the loop
unset($number);

print_r($numbers);
// Outputs: Array ( [0] => 2 [1] => 4 [2] => 6 [3] => 8 [4] => 10 )</code></pre>
                    
                    <div class="warning">
                        <p><strong>Important:</strong> When using references with <code>foreach</code>, always unset the reference variable after the loop. Otherwise, it will continue to reference the last array element, which can cause unexpected bugs if you reuse the variable name.</p>
                    </div>
                </div>
                
                <div class="real-world">
                    <h4>Real-World Application: Processing WordPress Posts</h4>
                    <pre><code>// Get recent WordPress posts
$recent_posts = get_posts([
    'post_type' => 'post',
    'posts_per_page' => 5,
    'orderby' => 'date',
    'order' => 'DESC'
]);

// Process each post
foreach ($recent_posts as $post) {
    // Setup post data (makes template tags work)
    setup_postdata($post);
    
    echo '&lt;div class="post"&gt;';
    echo '&lt;h3&gt;&lt;a href="' . get_permalink($post) . '"&gt;' . get_the_title($post) . '&lt;/a&gt;&lt;/h3&gt;';
    echo '&lt;div class="meta"&gt;Posted on: ' . get_the_date('F j, Y', $post) . '&lt;/div&gt;';
    echo '&lt;div class="excerpt"&gt;' . get_the_excerpt($post) . '&lt;/div&gt;';
    echo '&lt;/div&gt;';
}

// Always reset post data after the loop
wp_reset_postdata();</code></pre>
                </div>
            </div>
            
            <div class="technique">
                <h3>for Loop: When You Need More Control</h3>
                <p>The <code>for</code> loop is a more traditional construct that works well for indexed arrays when you need precise control over the iteration process.</p>
                
                <div class="code-example">
                    <pre><code>// Basic for loop with indexed array
$colors = ["Red", "Green", "Blue", "Yellow", "Purple"];
$count = count($colors);

for ($i = 0; $i < $count; $i++) {
    echo "Color at position " . $i . " is " . $colors[$i] . "&lt;br&gt;";
}
// Outputs:
// Color at position 0 is Red
// Color at position 1 is Green
// Color at position 2 is Blue
// Color at position 3 is Yellow
// Color at position 4 is Purple

// Iterating in reverse order
for ($i = $count - 1; $i >= 0; $i--) {
    echo "Color at position " . $i . " is " . $colors[$i] . "&lt;br&gt;";
}
// Outputs:
// Color at position 4 is Purple
// Color at position 3 is Yellow
// Color at position 2 is Blue
// Color at position 1 is Green
// Color at position 0 is Red

// Stepping through every other element
for ($i = 0; $i < $count; $i += 2) {
    echo "Every other color: " . $colors[$i] . "&lt;br&gt;";
}
// Outputs:
// Every other color: Red
// Every other color: Blue
// Every other color: Purple</code></pre>
                </div>
                
                <div class="advantages">
                    <h4>Advantages of for loops:</h4>
                    <ul>
                        <li>Finer control over iteration (step size, direction, starting/ending points)</li>
                        <li>Access to the current index at all times</li>
                        <li>Works well when you need to process elements based on their position</li>
                        <li>Useful for partial array traversal (skipping elements or specific ranges)</li>
                    </ul>
                </div>
                
                <div class="limitations">
                    <h4>Limitations of for loops:</h4>
                    <ul>
                        <li>Works best with numerically indexed arrays, not ideal for associative arrays</li>
                        <li>Requires knowing the array size in advance</li>
                        <li>More prone to off-by-one errors (e.g., incorrect boundary conditions)</li>
                        <li>More complex syntax compared to <code>foreach</code></li>
                    </ul>
                </div>
                
                <div class="real-world">
                    <h4>Real-World Application: Building a Responsive WordPress Gallery</h4>
                    <pre><code>// Get image attachments for a gallery
$images = get_attached_media('image', $post_id);
$image_count = count($images);

// Generate responsive gallery
echo '&lt;div class="gallery"&gt;';
echo '&lt;div class="gallery-row"&gt;';

for ($i = 0; $i < $image_count; $i++) {
    $image = array_values($images)[$i];
    $image_url = wp_get_attachment_image_url($image->ID, 'medium');
    $image_title = get_the_title($image->ID);
    
    // Start a new row every 3 images
    if ($i > 0 && $i % 3 == 0) {
        echo '&lt;/div&gt;&lt;div class="gallery-row"&gt;';
    }
    
    // Output image with custom size based on position
    $size_class = ($i % 3 == 1) ? 'large' : 'normal';
    
    echo '&lt;div class="gallery-item ' . $size-class . '"&gt;';
    echo '&lt;img src="' . esc_url($image_url) . '" alt="' . esc_attr($image_title) . '"&gt;';
    echo '&lt;div class="image-caption"&gt;' . esc_html($image_title) . '&lt;/div&gt;';
    echo '&lt;/div&gt;';
}

echo '&lt;/div&gt;'; // Close last row
echo '&lt;/div&gt;'; // Close gallery container</code></pre>
                </div>
            </div>
            
            <div class="technique">
                <h3>while and do-while Loops: Alternative Approaches</h3>
                <p>While not as commonly used for array iteration, <code>while</code> and <code>do-while</code> loops can be useful in specific scenarios, especially when working with PHP's array pointer functions.</p>
                
                <div class="code-example">
                    <pre><code>// while loop with array pointer functions
$countries = ["USA", "Canada", "UK", "Australia", "Germany"];

// Reset internal pointer to the beginning
reset($countries);

// Iterate using while and each() (Note: each() is deprecated in PHP 7.2+)
while ($country = current($countries)) {
    echo "Current country: " . $country . ", Key: " . key($countries) . "&lt;br&gt;";
    next($countries);
}
// Outputs:
// Current country: USA, Key: 0
// Current country: Canada, Key: 1
// Current country: UK, Key: 2
// Current country: Australia, Key: 3
// Current country: Germany, Key: 4

// A better alternative using while with list() and each() (PHP < 7.2)
$cities = ["New York" => "USA", "Toronto" => "Canada", "London" => "UK"];
reset($cities);

while (list($city, $country) = each($cities)) {
    echo "City: " . $city . " is in " . $country . "&lt;br&gt;";
}
// Outputs:
// City: New York is in USA
// City: Toronto is in Canada
// City: London is in UK

// Modern approach using while
$fruits = ["Apple", "Banana", "Cherry"];
reset($fruits);

while (key($fruits) !== null) {
    echo "Fruit: " . current($fruits) . "&lt;br&gt;";
    next($fruits);
}
// Outputs:
// Fruit: Apple
// Fruit: Banana
// Fruit: Cherry

// do-while example
$numbers = [5, 10, 15, 20];
reset($numbers);
$sum = 0;

do {
    $current = current($numbers);
    if ($current !== false) {
        $sum += $current;
    }
    next($numbers);
} while ($current !== false);

echo "Sum of numbers: " . $sum; // Outputs: Sum of numbers: 50</code></pre>
                </div>
                
                <div class="warning">
                    <p><strong>Important:</strong> The <code>each()</code> function is deprecated as of PHP 7.2 and removed in PHP 8.0. For modern PHP development, prefer <code>foreach</code> over <code>while</code> loops with array pointer functions.</p>
                </div>
                
                <div class="when-to_use">
                    <h4>When to Use while Loops for Array Iteration:</h4>
                    <ul>
                        <li>When you need complex exit conditions that can't be easily expressed in a for/foreach loop</li>
                        <li>When working with older PHP codebases that rely on array pointer functions</li>
                        <li>When you need to manipulate the array pointer directly (rare in modern PHP)</li>
                        <li>When combining array iteration with other conditions</li>
                    </ul>
                </div>
                
                <div class="real-world">
                    <h4>Real-World Application: Processing Records Until a Condition Is Met</h4>
                    <pre><code>// Process user submissions until finding an approved one or reaching the end
function find_first_approved_submission($submissions) {
    reset($submissions);
    
    while (key($submissions) !== null) {
        $submission = current($submissions);
        
        if ($submission['status'] === 'approved') {
            return $submission;
        }
        
        next($submissions);
    }
    
    return false; // No approved submission found
}

// Sample usage
$user_submissions = [
    ['id' => 1, 'title' => 'First attempt', 'status' => 'rejected'],
    ['id' => 2, 'title' => 'Second attempt', 'status' => 'pending'],
    ['id' => 3, 'title' => 'Third attempt', 'status' => 'approved'],
    ['id' => 4, 'title' => 'Fourth attempt', 'status' => 'approved']
];

$approved = find_first_approved_submission($user_submissions);

if ($approved) {
    echo "Found approved submission: " . $approved['title'];
} else {
    echo "No approved submissions found.";
}</code></pre>
                </div>
            </div>
        </section>

        <section class="array-pointer">
            <h2>Working with Array Pointer Functions</h2>
            
            <p>PHP provides a set of functions for manipulating the internal array pointer, which can be useful for specific iteration scenarios. While these functions are less commonly used in modern PHP (with <code>foreach</code> being preferred), understanding them provides deeper insight into how PHP manages array traversal.</p>
            
            <div class="function-group">
                <h3>Core Array Pointer Functions</h3>
                <p>These functions allow you to move and control the internal array pointer:</p>
                
                <div class="function">
                    <h4>reset() - Move Pointer to First Element</h4>
                    <p>The <code>reset()</code> function rewinds the internal array pointer to the first element and returns its value.</p>
                    <div class="code-example">
                        <pre><code>$colors = ["red", "green", "blue", "yellow"];

// Move pointer somewhere in the array
next($colors);
next($colors);

// Reset pointer to beginning
$first_color = reset($colors);
echo "First color: " . $first_color; // Outputs: First color: red</code></pre>
                    </div>
                </div>
                
                <div class="function">
                    <h4>current() - Get Current Element</h4>
                    <p>The <code>current()</code> function returns the value of the array element that's currently pointed to by the internal pointer.</p>
                    <div class="code-example">
                        <pre><code>$fruits = ["apple", "banana", "cherry"];
reset($fruits); // Ensure pointer is at beginning
next($fruits);  // Move to second element

$current_fruit = current($fruits);
echo "Current fruit: " . $current_fruit; // Outputs: Current fruit: banana</code></pre>
                    </div>
                </div>
                
                <div class="function">
                    <h4>key() - Get Current Key</h4>
                    <p>The <code>key()</code> function returns the key of the array element that's currently pointed to by the internal pointer.</p>
                    <div class="code-example">
                        <pre><code>$user = [
    "name" => "John Doe",
    "email" => "john@example.com",
    "age" => 28
];

reset($user);
next($user);

echo "Current key: " . key($user); // Outputs: Current key: email</code></pre>
                    </div>
                </div>
                
                <div class="function">
                    <h4>next() - Move to Next Element</h4>
                    <p>The <code>next()</code> function advances the internal array pointer one position and returns the value at the new position, or <code>false</code> if there are no more elements.</p>
                    <div class="code-example">
                        <pre><code>$numbers = [10, 20, 30, 40];
reset($numbers);

echo "First: " . current($numbers) . "&lt;br&gt;"; // Outputs: First: 10

$second = next($numbers);
echo "Second: " . $second . "&lt;br&gt;"; // Outputs: Second: 20

$third = next($numbers);
echo "Third: " . $third . "&lt;br&gt;"; // Outputs: Third: 30

$fourth = next($numbers);
echo "Fourth: " . $fourth . "&lt;br&gt;"; // Outputs: Fourth: 40

$beyond = next($numbers);
var_dump($beyond); // Outputs: bool(false)</code></pre>
                    </div>
                </div>
                
                <div class="function">
                    <h4>prev() - Move to Previous Element</h4>
                    <p>The <code>prev()</code> function moves the internal array pointer one position backward and returns the value at the new position, or <code>false</code> if there are no previous elements.</p>
                    <div class="code-example">
                        <pre><code>$letters = ["A", "B", "C", "D"];
reset($letters);
next($letters);
next($letters); // Pointer is now at "C"

echo "Current: " . current($letters) . "&lt;br&gt;"; // Outputs: Current: C

$previous = prev($letters);
echo "Previous: " . $previous; // Outputs: Previous: B</code></pre>
                    </div>
                </div>
                
                <div class="function">
                    <h4>end() - Move to Last Element</h4>
                    <p>The <code>end()</code> function moves the internal array pointer to the last element and returns its value.</p>
                    <div class="code-example">
                        <pre><code>$weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"];
$last_day = end($weekdays);

echo "Last weekday: " . $last_day; // Outputs: Last weekday: Friday</code></pre>
                    </div>
                </div>
                
                <div class="function">
                    <h4>each() - Get Current Key/Value Pair and Advance Pointer (Deprecated)</h4>
                    <p>The <code>each()</code> function returns the current key/value pair and advances the internal pointer. This function is deprecated as of PHP 7.2 and removed in PHP 8.0.</p>
                    <div class="code-example">
                        <pre><code>// Note: Do not use this in modern PHP code
$person = [
    "name" => "Jane Smith",
    "age" => 30,
    "city" => "Chicago"
];

reset($person);
$first_pair = each($person);
print_r($first_pair);
/* Outputs:
Array (
    [1] => Jane Smith
    [value] => Jane Smith
    [0] => name
    [key] => name
)
*/</code></pre>
                    </div>
                </div>
            </div>
            
            <div class="practical-scenario">
                <h3>Practical Scenario: Custom Database Query Iterator</h3>
                <p>Here's an example of using array pointer functions to create a custom database result iterator that processes rows one at a time:</p>
                
                <div class="code-example">
                    <pre><code>/**
 * Processes large database query results efficiently
 * by iterating one row at a time rather than loading
 * all results into memory at once
 */
function process_large_result_set($query) {
    global $wpdb;
    
    // Execute query and get results
    $results = $wpdb->get_results($query, ARRAY_A);
    
    if (empty($results)) {
        return false;
    }
    
    // Initialize array pointer
    reset($results);
    
    // Process each row
    while (key($results) !== null) {
        $row = current($results);
        
        // Process the current row (example operation)
        $row['processed'] = true;
        $row['timestamp'] = current_time('mysql');
        
        // Save processed data
        $wpdb->update(
            'processed_data_table',
            $row,
            ['id' => $row['id']]
        );
        
        // Move to next row
        next($results);
        
        // Optional: Add a small delay to prevent server overload
        usleep(10000); // 10ms delay
    }
    
    return true;
}</code></pre>
                </div>
            </div>
        </section>

        <section class="built-in_iteration">
            <h2>PHP's Built-in Array Iteration Functions</h2>
            
            <p>Beyond basic loops, PHP provides a powerful set of built-in functions designed specifically for array iteration. These functions can often make your code more concise and readable while handling common iteration patterns.</p>
            
            <div class="function-group">
                <h3>Basic Built-in Iteration Functions</h3>
                
                <div class="function">
                    <h4>array_walk() - Apply a Function to Each Element</h4>
                    <p>The <code>array_walk()</code> function applies a user-defined function to each element of an array in place. It's useful when you need to modify array elements or perform an action for each element.</p>
                    <div class="code-example">
                        <pre><code>// Formatting product prices with array_walk()
$products = [
    "Laptop" => 999.99,
    "Smartphone" => 499.50,
    "Headphones" => 129.95
];

function format_price(&$price, $product) {
    $price = "$" . number_format($price, 2);
    echo "The price of " . $product . " is " . $price . "&lt;br&gt;";
}

array_walk($products, 'format_price');
// Outputs:
// The price of Laptop is $999.99
// The price of Smartphone is $499.50
// The price of Headphones is $129.95

print_r($products);
// Array ( [Laptop] => $999.99 [Smartphone] => $499.50 [Headphones] => $129.95 )</code></pre>
                    </div>
                    
                    <div class="additional-params">
                        <h5>Using Additional Parameters</h5>
                        <pre><code>// Add tax to prices using array_walk() with additional parameter
$products = [
    "Laptop" => 999.99,
    "Smartphone" => 499.50,
    "Headphones" => 129.95
];

function add_tax(&$price, $product, $tax_rate) {
    $tax_amount = $price * $tax_rate;
    $price += $tax_amount;
    $price = round($price, 2);
    echo $product . " with " . ($tax_rate * 100) . "% tax: $" . $price . "&lt;br&gt;";
}

$tax_rate = 0.08; // 8% tax
array_walk($products, 'add_tax', $tax_rate);
// Outputs:
// Laptop with 8% tax: $1079.99
// Smartphone with 8% tax: $539.46
// Headphones with 8% tax: $140.35</code></pre>
                    </div>
                    
                    <div class="anonymous-function">
                        <h5>Using Anonymous Functions (Closures)</h5>
                        <pre><code>// Using anonymous function with array_walk()
$users = [
    "user1" => ["name" => "John", "email" => "john@example.com", "active" => true],
    "user2" => ["name" => "Jane", "email" => "jane@example.com", "active" => false],
    "user3" => ["name" => "Bob", "email" => "bob@example.com", "active" => true]
];

array_walk($users, function(&$user, $user_id) {
    // Add a last login timestamp to each user
    $user['last_login'] = $user['active'] ? date('Y-m-d H:i:s') : 'Never logged in';
    
    // Generate a display string
    $user['display'] = $user['name'] . " (" . $user['email'] . ")";
});

// Display modified user data
foreach ($users as $user_id => $user_data) {
    echo $user_id . ": " . $user_data['display'] . " - Last login: " . $user_data['last_login'] . "&lt;br&gt;";
}</code></pre>
                    </div>
                    
                    <div class="real-world">
                        <h4>Real-World Application: Processing WordPress Meta Fields</h4>
                        <pre><code>// Get all post meta for a specific post
$post_id = 123;
$post_meta = get_post_meta($post_id);

// Process each meta field
array_walk($post_meta, function(&$meta_values, $meta_key) use ($post_id) {
    // WordPress stores meta values as arrays, even for single values
    if (count($meta_values) === 1) {
        // Convert to a single value instead of array
        $meta_values = $meta_values[0];
    }
    
    // Process specific meta types
    if (strpos($meta_key, 'date_') === 0 && !empty($meta_values)) {
        // Format dates
        $meta_values = date('F j, Y', strtotime($meta_values));
    } elseif ($meta_key === '_thumbnail_id' && !empty($meta_values)) {
        // Get image URL for featured image
        $meta_values = wp_get_attachment_url($meta_values);
    } elseif ($meta_key === '_product_price' && !empty($meta_values)) {
        // Format prices
        $meta_values = '$' . number_format((float)$meta_values, 2);
    }
});

// Now $post_meta contains processed values</code></pre>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_walk_recursive() - Apply a Function Recursively</h4>
                    <p>The <code>array_walk_recursive()</code> function applies a user-defined function to each element of an array, including elements in nested arrays. It's perfect for processing multi-dimensional arrays.</p>
                    <div class="code-example">
                        <pre><code>// Sanitize all string values in a nested array structure
$form_data = [
    "personal" => [
        "name" => "John &lt; Script &gt; Doe",
        "email" => "john@example.com"
    ],
    "address" => [
        "street" => "123 Main St.",
        "city" => "New York",
        "details" => [
            "apartment" => "Apt. 4B",
            "buzzer" => "402"
        ]
    ],
    "comments" => "This is a &lt; test &gt; comment"
];

// Sanitize all string values
array_walk_recursive($form_data, function(&$value) {
    if (is_string($value)) {
        $value = htmlspecialchars($value);
    }
});

// Now all string values are sanitized
print_r($form_data);
/* Outputs sanitized values like:
Array (
    [personal] => Array (
        [name] => John &amp;lt; Script &amp;gt; Doe
        [email] => john@example.com
    )
    ...
)
*/</code></pre>
                    </div>
                    
                    <div class="warning">
                        <p><strong>Important:</strong> <code>array_walk_recursive()</code> only processes leaf nodes (values that aren't arrays). It won't apply the callback to arrays themselves, only to their non-array values.</p>
                    </div>
                    
                    <div class="real-world">
                        <h4>Real-World Application: Preparing WordPress Options for Display</h4>
                        <pre><code>// Get a complex theme options array
$theme_options = get_option('theme_options');

// Prepare all values for display
function prepare_for_display(&$value) {
    if (is_string($value)) {
        // Sanitize HTML and prepare for display
        $value = esc_html($value);
    } elseif (is_numeric($value) && strpos($value, '.') !== false) {
        // Format decimal numbers
        $value = number_format((float)$value, 2);
    } elseif ($value === '1' || $value === 1) {
        // Convert boolean-like values to Yes/No
        $value = 'Yes';
    } elseif ($value === '0' || $value === 0 || $value === '') {
        $value = 'No';
    }
}

// Safely prepare all values for display
if (is_array($theme_options)) {
    array_walk_recursive($theme_options, 'prepare_for_display');
}

// Now all values are safe for display
foreach ($theme_options as $section => $settings) {
    echo '&lt;h3&gt;' . ucfirst($section) . ' Settings&lt;/h3&gt;';
    echo '&lt;ul&gt;';
    
    if (is_array($settings)) {
        foreach ($settings as $key => $value) {
            echo '&lt;li&gt;&lt;strong&gt;' . str_replace('_', ' ', ucfirst($key)) . ':&lt;/strong&gt; ';
            
            if (is_array($value)) {
                echo implode(', ', $value);
            } else {
                echo $value;
            }
            
            echo '&lt;/li&gt;';
        }
    }
    
    echo '&lt;/ul&gt;';
}</code></pre>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_map() - Transform All Elements</h4>
                    <p>The <code>array_map()</code> function applies a callback function to each element of an array and returns a new array with the transformed values. Unlike <code>array_walk()</code>, it doesn't modify the original array but creates a new one.</p>
                    <div class="code-example">
                        <pre><code>// Transform an array of numbers using array_map()
$numbers = [1, 2, 3, 4, 5];

// Square each number
$squared = array_map(function($n) {
    return $n * $n;
}, $numbers);

print_r($squared);
// Outputs: Array ( [0] => 1 [1] => 4 [2] => 9 [3] => 16 [4] => 25 )

// Process an array of strings
$names = ["john doe", "jane smith", "robert johnson"];

// Capitalize each name
$formatted_names = array_map('ucwords', $names);

print_r($formatted_names);
// Outputs: Array ( [0] => John Doe [1] => Jane Smith [2] => Robert Johnson )</code></pre>
                    </div>
                    
                    <div class="multiple-arrays">
                        <h5>Processing Multiple Arrays Simultaneously</h5>
                        <pre><code>// Combine multiple arrays with array_map()
$first_names = ["John", "Jane", "Bob"];
$last_names = ["Doe", "Smith", "Johnson"];
$ages = [28, 34, 42];

// Combine into full user profiles
$users = array_map(function($first, $last, $age) {
    return [
        "name" => $first . " " . $last,
        "email" => strtolower($first) . "@example.com",
        "age" => $age
    ];
}, $first_names, $last_names, $ages);

print_r($users);
/* Outputs:
Array (
    [0] => Array (
        [name] => John Doe
        [email] => john@example.com
        [age] => 28
    )
    [1] => Array (
        [name] => Jane Smith
        [email] => jane@example.com
        [age] => 34
    )
    [2] => Array (
        [name] => Bob Johnson
        [email] => bob@example.com
        [age] => 42
    )
)
*/</code></pre>
                    </div>
                    
                    <div class="real-world">
                        <h4>Real-World Application: Preparing WordPress Posts for an API Response</h4>
                        <pre><code>// Get recent posts
$recent_posts = get_posts([
    'post_type' => 'post',
    'posts_per_page' => 10,
    'orderby' => 'date',
    'order' => 'DESC'
]);

// Transform posts for API response
$api_posts = array_map(function($post) {
    // Get the featured image if available
    $thumbnail_id = get_post_thumbnail_id($post->ID);
    $thumbnail_url = $thumbnail_id ? 
        wp_get_attachment_image_url($thumbnail_id, 'medium') : '';
    
    // Get the primary category
    $categories = get_the_category($post->ID);
    $primary_category = !empty($categories) ? $categories[0]->name : '';
    
    // Build API-friendly post object
    return [
        'id' => $post->ID,
        'title' => html_entity_decode(get_the_title($post)),
        'slug' => $post->post_name,
        'date' => get_the_date('c', $post),
        'excerpt' => get_the_excerpt($post),
        'category' => $primary_category,
        'image' => $thumbnail_url,
        'url' => get_permalink($post)
    ];
}, $recent_posts);

// Return as JSON
wp_send_json($api_posts);</code></pre>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_filter() - Filtering Elements</h4>
                    <p>The <code>array_filter()</code> function filters elements of an array using a callback function and returns a new array with the elements that pass the test. If no callback is provided, it removes empty elements.</p>
                    <div class="code-example">
                        <pre><code>// Basic filtering of even numbers
$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

// Get only even numbers
$even_numbers = array_filter($numbers, function($n) {
    return $n % 2 === 0;
});

print_r($even_numbers);
// Outputs: Array ( [1] => 2 [3] => 4 [5] => 6 [7] => 8 [9] => 10 )
// Note that original keys are preserved

// Filter out empty/falsy values (no callback needed)
$mixed_values = [0, null, false, '', 'hello', 42, [], ['item']];
$non_empty = array_filter($mixed_values);

print_r($non_empty);
// Outputs: Array ( [4] => hello [5] => 42 [7] => Array ( [0] => item ) )</code></pre>
                    </div>
                    
                    <div class="filter-flags">
                        <h5>Using Filter Flags (PHP 5.6+)</h5>
                        <pre><code>// Filter by keys, values, or both
$user = [
    "id" => 123,
    "name" => "John Doe",
    "email" => "john@example.com",
    "inactive" => false,
    "role" => "subscriber",
    "meta" => ["signup_date" => "2023-01-15"]
];

// Filter by keys (get only fields starting with "e")
$e_fields = array_filter($user, function($key) {
    return strpos($key, 'e') === 0;
}, ARRAY_FILTER_USE_KEY);

print_r($e_fields);
// Outputs: Array ( [email] => john@example.com )

// Filter by both key and value
$important_fields = array_filter($user, function($value, $key) {
    // Keep fields that are not arrays and don't start with "i"
    return !is_array($value) && strpos($key, 'i') !== 0;
}, ARRAY_FILTER_USE_BOTH);

print_r($important_fields);
// Outputs: Array ( [id] => 123 [name] => John Doe [email] => john@example.com 
//                   [role] => subscriber )</code></pre>
                    </div>
                    
                    <div class="real-world">
                        <h4>Real-World Application: Filtering WordPress Content</h4>
                        <pre><code>// Get all published posts
$all_posts = get_posts([
    'post_type' => 'post',
    'posts_per_page' => -1,
    'post_status' => 'publish'
]);

// Filter posts with specific criteria:
// 1. Has featured image
// 2. At least 300 words in content
// 3. Published within the last month
$featured_posts = array_filter($all_posts, function($post) {
    // Check for featured image
    $has_thumbnail = has_post_thumbnail($post->ID);
    
    // Count words in content
    $word_count = str_word_count(strip_tags($post->post_content));
    
    // Check publish date (within last month)
    $publish_date = strtotime($post->post_date);
    $one_month_ago = strtotime('-1 month');
    $is_recent = $publish_date >= $one_month_ago;
    
    return $has_thumbnail && $word_count >= 300 && $is_recent;
});

// Reindex array keys
$featured_posts = array_values($featured_posts);

echo "Found " . count($featured_posts) . " featured posts.";</code></pre>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_reduce() - Reducing to a Single Value</h4>
                    <p>The <code>array_reduce()</code> function iteratively applies a callback function to the elements of an array to reduce it to a single value. This is perfect for sums, averages, concatenations, or any operation that combines multiple values.</p>
                    <div class="code-example">
                        <pre><code>// Sum an array of numbers
$numbers = [10, 20, 30, 40, 50];

$sum = array_reduce($numbers, function($carry, $item) {
    return $carry + $item;
}, 0); // The 0 is the initial value

echo "Sum: " . $sum; // Outputs: Sum: 150

// Find the maximum value
$max = array_reduce($numbers, function($carry, $item) {
    return ($item > $carry) ? $item : $carry;
}, PHP_INT_MIN);

echo "Maximum: " . $max; // Outputs: Maximum: 50

// Join array elements with a separator
$words = ["PHP", "is", "awesome"];

$sentence = array_reduce($words, function($carry, $word) {
    return $carry . ($carry ? ' ' : '') . $word;
}, '');

echo $sentence; // Outputs: PHP is awesome</code></pre>
                    </div>
                    
                    <div class="complex-reduce">
                        <h5>Complex Reduction Operations</h5>
                        <pre><code>// Calculate statistics from an array
$scores = [85, 92, 78, 95, 88, 76, 90, 84];

$stats = array_reduce($scores, function($carry, $score) {
    $carry['count']++;
    $carry['total'] += $score;
    
    if ($score > $carry['max']) {
        $carry['max'] = $score;
    }
    
    if ($score < $carry['min']) {
        $carry['min'] = $score;
    }
    
    return $carry;
}, [
    'count' => 0,
    'total' => 0,
    'max' => PHP_INT_MIN,
    'min' => PHP_INT_MAX
]);

// Calculate the average
$stats['average'] = $stats['total'] / $stats['count'];

print_r($stats);
/* Outputs:
Array (
    [count] => 8
    [total] => 688
    [max] => 95
    [min] => 76
    [average] => 86
)
*/</code></pre>
                    </div>
                    
                    <div class="real-world">
                        <h4>Real-World Application: Calculating WordPress E-commerce Statistics</h4>
                        <pre><code>// Get recent orders from WooCommerce
$orders = wc_get_orders([
    'limit' => 100,
    'status' => 'completed',
    'date_created' => '&gt;' . date('Y-m-d', strtotime('-30 days'))
]);

// Calculate sales statistics
$sales_stats = array_reduce($orders, function($stats, $order) {
    // Increment order count
    $stats['total_orders']++;
    
    // Add order total
    $order_total = $order->get_total();
    $stats['total_revenue'] += $order_total;
    
    // Track maximum order value
    if ($order_total > $stats['max_order']) {
        $stats['max_order'] = $order_total;
        $stats['max_order_id'] = $order->get_id();
    }
    
    // Count total items sold
    $items = $order->get_items();
    $item_count = 0;
    
    foreach ($items as $item) {
        $item_count += $item->get_quantity();
        
        // Track product sales by ID
        $product_id = $item->get_product_id();
        
        if (!isset($stats['products'][$product_id])) {
            $stats['products'][$product_id] = [
                'name' => $item->get_name(),
                'quantity' => 0,
                'revenue' => 0
            ];
        }
        
        $stats['products'][$product_id]['quantity'] += $item->get_quantity();
        $stats['products'][$product_id]['revenue'] += $item->get_total();
    }
    
    $stats['total_items'] += $item_count;
    
    // Calculate average items per order
    $stats['avg_items'] = $stats['total_items'] / $stats['total_orders'];
    
    // Calculate average order value
    $stats['avg_order'] = $stats['total_revenue'] / $stats['total_orders'];
    
    return $stats;
}, [
    'total_orders' => 0,
    'total_revenue' => 0,
    'total_items' => 0,
    'max_order' => 0,
    'max_order_id' => 0,
    'avg_items' => 0,
    'avg_order' => 0,
    'products' => []
]);

// Sort products by quantity sold
arsort($sales_stats['products']['quantity']);

// Get top 5 products
$top_products = array_slice($sales_stats['products'], 0, 5, true);
$sales_stats['top_products'] = $top_products;

// Display the sales report
echo '&lt;h2&gt;30-Day Sales Report&lt;/h2&gt;';
echo '&lt;p&gt;Total Orders: ' . $sales_stats['total_orders'] . '&lt;/p&gt;';
echo '&lt;p&gt;Total Revenue: $' . number_format($sales_stats['total_revenue'], 2) . '&lt;/p&gt;';
echo '&lt;p&gt;Average Order Value: $' . number_format($sales_stats['avg_order'], 2) . '&lt;/p&gt;';
echo '&lt;p&gt;Items Sold: ' . $sales_stats['total_items'] . '&lt;/p&gt;';</code></pre>
                    </div>
                </div>
            </div>
        </section>

        <section class="advanced-techniques">
            <h2>Advanced Iteration Techniques</h2>
            
            <p>Let's explore some more sophisticated approaches to array iteration that can help you handle complex data structures and optimize performance.</p>
            
            <div class="technique">
                <h3>Iterator Objects and SPL Iterators</h3>
                <p>PHP's Standard PHP Library (SPL) provides specialized iterator classes that offer more control over the iteration process. These are particularly useful for advanced scenarios where custom iteration logic is needed.</p>
                
                <div class="code-example">
                    <h4>Using ArrayIterator</h4>
                    <pre><code>// Create an ArrayIterator
$fruits = ["Apple", "Banana", "Cherry", "Dragon fruit"];
$iterator = new ArrayIterator($fruits);

// Basic iteration
while ($iterator->valid()) {
    echo "Current fruit: " . $iterator->current() . "&lt;br&gt;";
    $iterator->next();
}
// Outputs:
// Current fruit: Apple
// Current fruit: Banana
// Current fruit: Cherry
// Current fruit: Dragon fruit

// Seeking to a specific position
$iterator->rewind(); // Reset to beginning
$iterator->seek(2);  // Jump to index 2
echo "Fruit at position 2: " . $iterator->current() . "&lt;br&gt;"; // Outputs: Fruit at position 2: Cherry

// Modifying values
$iterator->rewind();
while ($iterator->valid()) {
    $key = $iterator->key();
    $value = $iterator->current();
    
    // Convert to uppercase
    $iterator[$key] = strtoupper($value);
    
    $iterator->next();
}

// Check the modified array
$modified_fruits = $iterator->getArrayCopy();
print_r($modified_fruits);
// Outputs: Array ( [0] => APPLE [1] => BANANA [2] => CHERRY [3] => DRAGON FRUIT )</code></pre>
                </div>
                
                <div class="code-example">
                    <h4>Using FilterIterator</h4>
                    <pre><code>// Custom FilterIterator to select only even numbers
class EvenNumbersIterator extends FilterIterator {
    public function accept() {
        return $this->current() % 2 === 0;
    }
}

// Create base iterator
$numbers = new ArrayIterator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

// Create filtered iterator
$even_numbers = new EvenNumbersIterator($numbers);

// Iterate over even numbers only
foreach ($even_numbers as $key => $value) {
    echo "Even number at position $key: $value&lt;br&gt;";
}
// Outputs:
// Even number at position 1: 2
// Even number at position 3: 4
// Even number at position 5: 6
// Even number at position 7: 8
// Even number at position 9: 10</code></pre>
                </div>
                
                <div class="real-world">
                    <h4>Real-World Application: WordPress Custom Post Iterator</h4>
                    <pre><code>/**
 * Custom Iterator for WordPress Posts
 * Filters out posts that don't meet specific criteria
 */
class FeaturedPostIterator extends FilterIterator {
    public function accept() {
        $post = $this->current();
        
        // Only accept posts that:
        // 1. Have a featured image
        // 2. Are not password protected
        // 3. Have at least 100 words of content
        
        if (!has_post_thumbnail($post->ID)) {
            return false;
        }
        
        if ($post->post_password !== '') {
            return false;
        }
        
        $word_count = str_word_count(strip_tags($post->post_content));
        if ($word_count < 100) {
            return false;
        }
        
        return true;
    }
}

// Usage in a WordPress template
function display_featured_posts() {
    // Get recent posts
    $recent_posts = get_posts([
        'post_type' => 'post',
        'posts_per_page' => 20,
        'orderby' => 'date',
        'order' => 'DESC'
    ]);
    
    // Create iterator
    $posts_iterator = new ArrayIterator($recent_posts);
    $featured_iterator = new FeaturedPostIterator($posts_iterator);
    
    // Display only posts that pass the filter
    echo '&lt;div class="featured-posts"&gt;';
    
    foreach ($featured_iterator as $post) {
        setup_postdata($post);
        
        echo '&lt;article class="post"&gt;';
        echo '&lt;a href="' . get_permalink($post) . '"&gt;';
        echo get_the_post_thumbnail($post, 'medium');
        echo '&lt;h3&gt;' . get_the_title($post) . '&lt;/h3&gt;';
        echo '&lt;/a&gt;';
        echo '&lt;div class="excerpt"&gt;' . get_the_excerpt($post) . '&lt;/div&gt;';
        echo '&lt;/article&gt;';
    }
    
    echo '&lt;/div&gt;';
    wp_reset_postdata();
}</code></pre>
                </div>
            </div>
            
            <div class="technique">
                <h3>Using Generators for Memory-Efficient Iteration</h3>
                <p>Generators provide a powerful way to iterate over large datasets without loading everything into memory at once. They're perfect for processing large files or database results.</p>
                
                <div class="code-example">
                    <h4>Basic Generator Example</h4>
                    <pre><code>// Generator function that yields numbers from a range
function rangeGenerator($start, $end, $step = 1) {
    for ($i = $start; $i <= $end; $i += $step) {
        yield $i;
    }
}

// Use the generator
foreach (rangeGenerator(1, 10, 2) as $number) {
    echo "Number: $number&lt;br&gt;";
}
// Outputs:
// Number: 1
// Number: 3
// Number: 5
// Number: 7
// Number: 9</code></pre>
                </div>
                
                <div class="code-example">
                    <h4>Yielding Key-Value Pairs</h4>
                    <pre><code>// Generator that yields transformed data with keys
function userDataGenerator($users) {
    foreach ($users as $user) {
        $key = $user['id'];
        $value = [
            'name' => $user['first_name'] . ' ' . $user['last_name'],
            'email' => strtolower($user['email']),
            'active' => (bool)$user['active']
        ];
        
        yield $key => $value;
    }
}

// Sample user data
$users = [
    ['id' => 101, 'first_name' => 'John', 'last_name' => 'Doe', 'email' => 'JOHN@example.com', 'active' => 1],
    ['id' => 102, 'first_name' => 'Jane', 'last_name' => 'Smith', 'email' => 'JANE@example.com', 'active' => 0],
    ['id' => 103, 'first_name' => 'Bob', 'last_name' => 'Johnson', 'email' => 'BOB@example.com', 'active' => 1]
];

// Process users with the generator
foreach (userDataGenerator($users) as $id => $user) {
    echo "User #$id: {$user['name']} ({$user['email']}) - ";
    echo $user['active'] ? 'Active' : 'Inactive';
    echo "&lt;br&gt;";
}
// Outputs:
// User #101: John Doe (john@example.com) - Active
// User #102: Jane Smith (jane@example.com) - Inactive
// User #103: Bob Johnson (bob@example.com) - Active</code></pre>
                </div>
                
                <div class="real-world">
                    <h4>Real-World Application: Processing Large WordPress Database Tables</h4>
                    <pre><code>/**
 * Generator function to efficiently process large WordPress database tables
 * by fetching rows in batches
 */
function largeTableGenerator($table_name, $batch_size = 100, $where = '') {
    global $wpdb;
    
    // Count total rows (optional, but helpful for progress tracking)
    $count_query = "SELECT COUNT(*) FROM $table_name";
    if (!empty($where)) {
        $count_query .= " WHERE $where";
    }
    
    $total_rows = $wpdb->get_var($count_query);
    
    // Process in batches
    $offset = 0;
    $processed = 0;
    
    while ($processed < $total_rows) {
        // Fetch a batch of rows
        $query = "SELECT * FROM $table_name";
        if (!empty($where)) {
            $query .= " WHERE $where";
        }
        $query .= " LIMIT $offset, $batch_size";
        
        $results = $wpdb->get_results($query, ARRAY_A);
        
        // Stop if no more results
        if (empty($results)) {
            break;
        }
        
        // Yield each row
        foreach ($results as $row) {
            yield $row;
            $processed++;
        }
        
        // Update offset for next batch
        $offset += $batch_size;
    }
}

// Usage example: Process a large comments table
function process_spam_comments() {
    $table = $wpdb->comments;
    $generator = largeTableGenerator(
        $table, 
        200, // 200 rows per batch
        "comment_approved = 'spam'"
    );
    
    $processed = 0;
    $deleted = 0;
    
    // Start timer
    $start_time = microtime(true);
    
    // Process comments
    foreach ($generator as $comment) {
        $processed++;
        
        // Perform processing - e.g., delete comments older than 30 days
        $comment_date = strtotime($comment['comment_date']);
        $thirty_days_ago = strtotime('-30 days');
        
        if ($comment_date < $thirty_days_ago) {
            wp_delete_comment($comment['comment_ID'], true);
            $deleted++;
        }
        
        // Show progress every 1000 comments
        if ($processed % 1000 === 0) {
            echo "Processed $processed comments, deleted $deleted...&lt;br&gt;";
            // Flush output buffer to show progress
            ob_flush();
            flush();
        }
    }
    
    $time_taken = microtime(true) - $start_time;
    
    echo "Completed processing $processed spam comments.&lt;br&gt;";
    echo "Deleted $deleted old spam comments.&lt;br&gt;";
    echo "Time taken: " . round($time_taken, 2) . " seconds.";
}</code></pre>
                </div>
            </div>
            
            <div class="technique">
                <h3>Recursive Iteration for Nested Structures</h3>
                <p>When working with deeply nested arrays, recursive iteration techniques can help you process all levels efficiently.</p>
                
                <div class="code-example">
                    <h4>Custom Recursive Function</h4>
                    <pre><code>// Process a nested array structure recursively
function process_array_recursively($array, $callback, $path = []) {
    foreach ($array as $key => $value) {
        // Build the current path
        $current_path = array_merge($path, [$key]);
        
        if (is_array($value)) {
            // Recurse into nested array
            process_array_recursively($value, $callback, $current_path);
        } else {
            // Process leaf value
            $callback($value, $key, $current_path);
        }
    }
}

// Example nested data
$data = [
    'personal' => [
        'name' => 'John Doe',
        'contact' => [
            'email' => 'john@example.com',
            'phone' => '555-1234'
        ]
    ],
    'preferences' => [
        'theme' => 'dark',
        'notifications' => [
            'email' => true,
            'push' => false
        ]
    ]
];

// Define a callback function
$output = [];
$callback = function($value, $key, $path) use (&$output) {
    $path_string = implode('.', $path);
    $output[$path_string] = $value;
    echo "$path_string = $value&lt;br&gt;";
};


                    <pre><code>// Process the nested array
process_array_recursively($data, $callback);
/* Outputs:
personal.name = John Doe
personal.contact.email = john@example.com
personal.contact.phone = 555-1234
preferences.theme = dark
preferences.notifications.email = 1
preferences.notifications.push = 
*/
                
// Process nested arrays with RecursiveIteratorIterator
$data = [
    'settings' => [
        'general' => [
            'site_title' => 'My WordPress Site',
            'tagline' => 'Just another WordPress site'
        ],
        'reading' => [
            'posts_per_page' => 10,
            'show_on_front' => 'page'
        ]
    ],
    'theme' => [
        'name' => 'Twenty Twenty-One',
        'colors' => [
            'primary' => '#0d6efd',
            'secondary' => '#6c757d'
        ]
    ]
];

// Create recursive iterators
$recursiveArrayIterator = new RecursiveArrayIterator($data);
$recursiveIterator = new RecursiveIteratorIterator(
    $recursiveArrayIterator,
    RecursiveIteratorIterator::LEAVES_ONLY
);

// Iterate through all leaf nodes
foreach ($recursiveIterator as $key => $value) {
    // Get path to current element
    $path = [];
    
    for ($i = 0; $i <= $recursiveIterator->getDepth(); $i++) {
        $path[] = $recursiveIterator->getSubIterator($i)->key();
    }
    
    $path_string = implode('.', $path);
    echo "$path_string = $value&lt;br&gt;";
}
/* Outputs:
settings.general.site_title = My WordPress Site
settings.general.tagline = Just another WordPress site
settings.reading.posts_per_page = 10
settings.reading.show_on_front = page
theme.name = Twenty Twenty-One
theme.colors.primary = #0d6efd
theme.colors.secondary = #6c757d
*/</code></pre>
                </div>
                
                <div class="real-world">
                    <h4>Real-World Application: Processing WordPress Theme Options</h4>
                    <pre><code>/**
 * Process nested theme options and sanitize all values
 */
function sanitize_theme_options($options) {
    // Create ArrayIterator for the options array
    $iterator = new RecursiveIteratorIterator(
        new RecursiveArrayIterator($options),
        RecursiveIteratorIterator::SELF_FIRST
    );
    
    $result = [];
    $current = &$result;
    
    // Iterate through all elements
    foreach ($iterator as $key => $value) {
        // Get path to current element
        $path = [];
        for ($i = 0; $i < $iterator->getDepth(); $i++) {
            $path[] = $iterator->getSubIterator($i)->key();
        }
        
        // Build the path in our result array
        $current = &$result;
        foreach ($path as $path_key) {
            if (!isset($current[$path_key]) || !is_array($current[$path_key])) {
                $current[$path_key] = [];
            }
            $current = &$current[$path_key];
        }
        
        // Apply appropriate sanitization based on key and value type
        if (is_array($value)) {
            $current[$key] = [];
        } else {
            // Sanitize based on key name pattern
            if (strpos($key, 'html_') === 0) {
                // Allow limited HTML
                $current[$key] = wp_kses_post($value);
            } elseif (strpos($key, 'url_') === 0 || $key === 'url') {
                // Sanitize URLs
                $current[$key] = esc_url_raw($value);
            } elseif (strpos($key, 'email_') === 0 || $key === 'email') {
                // Sanitize email addresses
                $current[$key] = sanitize_email($value);
            } elseif (strpos($key, 'num_') === 0 || is_numeric($value)) {
                // Sanitize numbers
                $current[$key] = intval($value);
            } elseif ($value === 'true' || $value === 'false' || is_bool($value)) {
                // Handle boolean values
                $current[$key] = ($value === 'true' || $value === true) ? true : false;
            } else {
                // Default text sanitization
                $current[$key] = sanitize_text_field($value);
            }
        }
    }
    
    return $result;
}

// Usage example
$theme_options = [
    'general' => [
        'site_title' => 'My &lt;strong&gt;WordPress&lt;/strong&gt; Site',
        'tagline' => 'Just another &lt;script&gt;alert("XSS")&lt;/script&gt; WordPress site',
        'logo_url' => 'http://example.com/logo.png'
    ],
    'colors' => [
        'primary' => '#0d6efd',
        'custom' => [
            'header' => '#333333',
            'footer' => '#222222'
        ]
    ],
    'contact' => [
        'email' => 'admin@example.com',
        'html_address' => '123 Main St.&lt;br&gt;Suite 101&lt;br&gt;New York, NY 10001'
    ]
];

$sanitized_options = sanitize_theme_options($theme_options);

// Save sanitized options
update_option('theme_options', $sanitized_options);</code></pre>
                </div>
            </div>
        </section>

        <section class="performance">
            <h2>Performance Considerations</h2>
            
            <p>The way you iterate through arrays can significantly impact your application's performance, especially when dealing with large datasets. Here are some key considerations and best practices:</p>
            
            <div class="performance-tips">
                <h3>Choosing the Right Iteration Method</h3>
                <p>Different iteration methods have different performance characteristics:</p>
                <ul>
                    <li><strong>foreach</strong> is generally the most efficient way to iterate through arrays in PHP for most use cases</li>
                    <li><strong>for</strong> loops can be slightly faster for simple indexed arrays with numeric keys</li>
                    <li><strong>array_map()</strong>, <strong>array_filter()</strong>, and other built-in functions may have slightly more overhead but offer cleaner code</li>
                    <li><strong>while</strong> loops with array pointer functions are generally slower and should be avoided unless necessary</li>
                </ul>
                
                <div class="comparison">
                    <h4>Performance Comparison</h4>
                    <table>
                        <thead>
                            <tr>
                                <th>Method</th>
                                <th>Speed</th>
                                <th>Memory Usage</th>
                                <th>Best For</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>foreach</td>
                                <td>Fast</td>
                                <td>Low</td>
                                <td>General purpose iteration, complex arrays</td>
                            </tr>
                            <tr>
                                <td>for</td>
                                <td>Very Fast</td>
                                <td>Very Low</td>
                                <td>Simple indexed arrays, when performance is critical</td>
                            </tr>
                            <tr>
                                <td>array_map()</td>
                                <td>Medium</td>
                                <td>Medium</td>
                                <td>Transforming array values, functional style</td>
                            </tr>
                            <tr>
                                <td>array_walk()</td>
                                <td>Medium</td>
                                <td>Low</td>
                                <td>Modifying array elements in place</td>
                            </tr>
                            <tr>
                                <td>array_filter()</td>
                                <td>Medium</td>
                                <td>Medium</td>
                                <td>Filtering elements by condition</td>
                            </tr>
                            <tr>
                                <td>array_reduce()</td>
                                <td>Medium</td>
                                <td>Low</td>
                                <td>Calculating aggregate values</td>
                            </tr>
                            <tr>
                                <td>while with pointers</td>
                                <td>Slow</td>
                                <td>Low</td>
                                <td>Legacy code, specific pointer manipulation</td>
                            </tr>
                            <tr>
                                <td>Generators</td>
                                <td>Medium</td>
                                <td>Very Low</td>
                                <td>Very large datasets, memory-constrained environments</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            
            <div class="optimization-tips">
                <h3>Optimization Strategies</h3>
                <ul>
                    <li><strong>Avoid nested loops</strong> when possible, as they can lead to O(n²) complexity</li>
                    <li><strong>Pre-calculate array sizes</strong> for for loops using <code>count()</code> outside the loop</li>
                    <li><strong>Use references</strong> (<code>&</code>) in foreach loops when modifying array elements to avoid copies</li>
                    <li><strong>Consider generators</strong> for large datasets to minimize memory usage</li>
                    <li><strong>Cache results</strong> of expensive operations rather than recalculating them in each iteration</li>
                    <li><strong>Use array_* functions</strong> for their intended purposes rather than reinventing the wheel</li>
                    <li><strong>Break out of loops early</strong> when you've found what you're looking for</li>
                </ul>
                
                <div class="code-example">
                    <h4>Optimizing Loop Performance</h4>
                    <pre><code>// Inefficient approach
$items = get_large_array_of_items(); // Thousands of items
$total = 0;

foreach ($items as $item) {
    // Calling count() inside a loop is inefficient
    for ($i = 0; $i < count($item['options']); $i++) {
        $total += calculate_expensive_value($item['options'][$i]);
    }
}

// Optimized approach
$items = get_large_array_of_items();
$total = 0;

foreach ($items as $item) {
    // Pre-calculate the count
    $option_count = count($item['options']);
    
    // Cache expensive calculations
    $option_values = [];
    for ($i = 0; $i < $option_count; $i++) {
        $option_values[$i] = calculate_expensive_value($item['options'][$i]);
    }
    
    // Sum the values
    $total += array_sum($option_values);
}</code></pre>
                </div>
                
                <div class="code-example">
                    <h4>Using Generators for Memory Efficiency</h4>
                    <pre><code>// Memory-intensive approach (loads all records at once)
function get_all_records() {
    global $wpdb;
    
    // This might consume a lot of memory with thousands of records
    return $wpdb->get_results("SELECT * FROM large_data_table", ARRAY_A);
}

$records = get_all_records();
foreach ($records as $record) {
    process_record($record);
}

// Memory-efficient approach using generators
function record_generator() {
    global $wpdb;
    
    // Get total count
    $total = $wpdb->get_var("SELECT COUNT(*) FROM large_data_table");
    
    // Process in batches of 100
    $batch_size = 100;
    
    for ($offset = 0; $offset < $total; $offset += $batch_size) {
        $results = $wpdb->get_results(
            $wpdb->prepare(
                "SELECT * FROM large_data_table LIMIT %d, %d",
                $offset,
                $batch_size
            ),
            ARRAY_A
        );
        
        foreach ($results as $result) {
            yield $result;
        }
    }
}

// This processes records one at a time without loading all into memory
foreach (record_generator() as $record) {
    process_record($record);
}</code></pre>
                </div>
            </div>
        </section>

        <section class="practical-applications">
            <h2>Practical Applications in WordPress Development</h2>
            
            <p>Let's explore some real-world scenarios where array iteration techniques are essential in WordPress development:</p>
            
            <div class="example">
                <h3>Processing Custom Post Types</h3>
                <p>Creating customized displays for WordPress custom post types often requires efficient array iteration:</p>
                
                <div class="code-example">
                    <pre><code>/**
 * Display featured portfolio items with categorized grouping
 */
function display_portfolio_grid() {
    // Get portfolio items
    $portfolio_args = [
        'post_type' => 'portfolio',
        'posts_per_page' => -1,
        'orderby' => 'date',
        'order' => 'DESC'
    ];
    
    $portfolio_items = get_posts($portfolio_args);
    
    if (empty($portfolio_items)) {
        echo '&lt;p&gt;No portfolio items found.&lt;/p&gt;';
        return;
    }
    
    // Extract all categories
    $all_categories = [];
    
    foreach ($portfolio_items as $item) {
        $categories = get_the_terms($item->ID, 'portfolio_category');
        
        if (!empty($categories) && !is_wp_error($categories)) {
            foreach ($categories as $category) {
                $all_categories[$category->slug] = $category->name;
            }
        }
    }
    
    // Sort categories alphabetically
    asort($all_categories);
    
    // Group portfolio items by category
    $categorized_items = [];
    
    foreach ($portfolio_items as $item) {
        $item_categories = get_the_terms($item->ID, 'portfolio_category');
        
        if (!empty($item_categories) && !is_wp_error($item_categories)) {
            foreach ($item_categories as $category) {
                if (!isset($categorized_items[$category->slug])) {
                    $categorized_items[$category->slug] = [];
                }
                
                // Add the item to this category
                $categorized_items[$category->slug][] = [
                    'id' => $item->ID,
                    'title' => get_the_title($item),
                    'permalink' => get_permalink($item),
                    'thumbnail' => get_the_post_thumbnail_url($item, 'medium'),
                    'excerpt' => get_the_excerpt($item)
                ];
            }
        }
    }
    
    // Display navigation tabs for categories
    echo '&lt;div class="portfolio-categories"&gt;';
    echo '&lt;ul class="category-tabs"&gt;';
    echo '&lt;li class="active"&gt;&lt;a href="#all"&gt;All&lt;/a&gt;&lt;/li&gt;';
    
    foreach ($all_categories as $slug => $name) {
        echo '&lt;li&gt;&lt;a href="#' . esc_attr($slug) . '"&gt;' . esc_html($name) . '&lt;/a&gt;&lt;/li&gt;';
    }
    
    echo '&lt;/ul&gt;';
    echo '&lt;/div&gt;';
    
    // Display all portfolio items
    echo '&lt;div class="portfolio-grid" id="all"&gt;';
    
    foreach ($portfolio_items as $item) {
        echo '&lt;div class="portfolio-item"&gt;';
        echo '&lt;a href="' . get_permalink($item) . '"&gt;';
        
        if (has_post_thumbnail($item)) {
            echo get_the_post_thumbnail($item, 'medium');
        } else {
            echo '&lt;div class="no-thumbnail"&gt;No Image&lt;/div&gt;';
        }
        
        echo '&lt;h3&gt;' . get_the_title($item) . '&lt;/h3&gt;';
        echo '&lt;/a&gt;';
        echo '&lt;/div&gt;';
    }
    
    echo '&lt;/div&gt;';
    
    // Display categorized portfolio items
    foreach ($all_categories as $slug => $name) {
        echo '&lt;div class="portfolio-grid" id="' . esc_attr($slug) . '" style="display: none;"&gt;';
        
        if (isset($categorized_items[$slug])) {
            foreach ($categorized_items[$slug] as $item) {
                echo '&lt;div class="portfolio-item"&gt;';
                echo '&lt;a href="' . esc_url($item['permalink']) . '"&gt;';
                
                if (!empty($item['thumbnail'])) {
                    echo '&lt;img src="' . esc_url($item['thumbnail']) . '" alt="' . esc_attr($item['title']) . '"&gt;';
                } else {
                    echo '&lt;div class="no-thumbnail"&gt;No Image&lt;/div&gt;';
                }
                
                echo '&lt;h3&gt;' . esc_html($item['title']) . '&lt;/h3&gt;';
                echo '&lt;/a&gt;';
                echo '&lt;/div&gt;';
            }
        } else {
            echo '&lt;p&gt;No items in this category.&lt;/p&gt;';
        }
        
        echo '&lt;/div&gt;';
    }
}</code></pre>
                </div>
            </div>
            
            <div class="example">
                <h3>Building a Custom Settings Page</h3>
                <p>WordPress plugin and theme settings often require complex array operations:</p>
                
                <div class="code-example">
                    <pre><code>/**
 * Process and validate plugin settings
 */
function save_plugin_settings() {
    // Check nonce for security
    if (!isset($_POST['my_plugin_nonce']) || !wp_verify_nonce($_POST['my_plugin_nonce'], 'save_plugin_settings')) {
        wp_die('Security check failed');
    }
    
    // Get current settings
    $current_settings = get_option('my_plugin_settings', []);
    
    // Define setting types for validation
    $setting_types = [
        'api_key' => 'string',
        'enable_feature_a' => 'boolean',
        'enable_feature_b' => 'boolean',
        'max_items' => 'integer',
        'cache_time' => 'integer',
        'email_addresses' => 'array',
        'custom_css' => 'html'
    ];
    
    // Process submitted settings
    $new_settings = [];
    
    foreach ($setting_types as $setting_name => $type) {
        // Initialize with current value if it exists
        $new_settings[$setting_name] = isset($current_settings[$setting_name]) ? 
            $current_settings[$setting_name] : null;
        
        // Process if this setting was submitted
        if (isset($_POST[$setting_name])) {
            $submitted_value = $_POST[$setting_name];
            
            switch ($type) {
                case 'string':
                    $new_settings[$setting_name] = sanitize_text_field($submitted_value);
                    break;
                    
                case 'boolean':
                    $new_settings[$setting_name] = (bool)$submitted_value;
                    break;
                    
                case 'integer':
                    $new_settings[$setting_name] = intval($submitted_value);
                    break;
                    
                case 'array':
                    if (is_array($submitted_value)) {
                        $new_settings[$setting_name] = array_map('sanitize_text_field', $submitted_value);
                    } elseif (is_string($submitted_value)) {
                        // Handle comma-separated values
                        $values = explode(',', $submitted_value);
                        $new_settings[$setting_name] = array_map('trim', $values);
                    }
                    break;
                    
                case 'html':
                    $new_settings[$setting_name] = wp_kses_post($submitted_value);
                    break;
            }
        }
    }
    
    // Save updated settings
    update_option('my_plugin_settings', $new_settings);
    
    // Redirect back to settings page with success message
    wp_redirect(add_query_arg('settings-updated', '1', admin_url('admin.php?page=my-plugin-settings')));
    exit;
}

/**
 * Display plugin settings form
 */
function display_plugin_settings_page() {
    // Get current settings
    $settings = get_option('my_plugin_settings', []);
    
    // Define setting fields
    $setting_fields = [
        'general' => [
            'title' => 'General Settings',
            'fields' => [
                'api_key' => [
                    'label' => 'API Key',
                    'type' => 'text',
                    'description' => 'Enter your API key from your account dashboard.'
                ],
                'max_items' => [
                    'label' => 'Maximum Items',
                    'type' => 'number',
                    'min' => 1,
                    'max' => 100,
                    'description' => 'Maximum number of items to display.'
                ],
                'cache_time' => [
                    'label' => 'Cache Time (seconds)',
                    'type' => 'number',
                    'min' => 0,
                    'description' => 'How long to cache results. Set to 0 to disable caching.'
                ]
            ]
        ],
        'features' => [
            'title' => 'Feature Settings',
            'fields' => [
                'enable_feature_a' => [
                    'label' => 'Enable Feature A',
                    'type' => 'checkbox',
                    'description' => 'Activate the premium Feature A functionality.'
                ],
                'enable_feature_b' => [
                    'label' => 'Enable Feature B',
                    'type' => 'checkbox',
                    'description' => 'Activate the premium Feature B functionality.'
                ]
            ]
        ],
        'advanced' => [
            'title' => 'Advanced Settings',
            'fields' => [
                'email_addresses' => [
                    'label' => 'Notification Emails',
                    'type' => 'textarea',
                    'description' => 'Enter email addresses, one per line.'
                ],
                'custom_css' => [
                    'label' => 'Custom CSS',
                    'type' => 'textarea',
                    'class' => 'code',
                    'description' => 'Add custom CSS to override default styles.'
                ]
            ]
        ]
    ];
    
    // Display settings form
    echo '&lt;div class="wrap"&gt;';
    echo '&lt;h1&gt;My Plugin Settings&lt;/h1&gt;';
    
    // Show settings updated message
    if (isset($_GET['settings-updated']) && $_GET['settings-updated'] == '1') {
        echo '&lt;div class="notice notice-success is-dismissible"&gt;';
        echo '&lt;p&gt;Settings updated successfully.&lt;/p&gt;';
        echo '&lt;/div&gt;';
    }
    
    echo '&lt;form method="post" action="' . admin_url('admin-post.php') . '"&gt;';
    echo '&lt;input type="hidden" name="action" value="save_plugin_settings"&gt;';
    wp_nonce_field('save_plugin_settings', 'my_plugin_nonce');
    
    // Loop through setting sections
    foreach ($setting_fields as $section_id => $section) {
        echo '&lt;h2&gt;' . esc_html($section['title']) . '&lt;/h2&gt;';
        echo '&lt;table class="form-table"&gt;';
        
        // Loop through fields in this section
        foreach ($section['fields'] as $field_id => $field) {
            echo '&lt;tr&gt;';
            echo '&lt;th scope="row"&gt;&lt;label for="' . esc_attr($field_id) . '"&gt;' . esc_html($field['label']) . '&lt;/label&gt;&lt;/th&gt;';
            echo '&lt;td&gt;';
            
            // Get current value with default
            $current_value = isset($settings[$field_id]) ? $settings[$field_id] : '';
            
            // Render field based on type
            switch ($field['type']) {
                case 'text':
                    echo '&lt;input type="text" id="' . esc_attr($field_id) . '" name="' . esc_attr($field_id) . '" value="' . esc_attr($current_value) . '" class="regular-text"&gt;';
                    break;
                    
                case 'number':
                    $min = isset($field['min']) ? ' min="' . esc_attr($field['min']) . '"' : '';
                    $max = isset($field['max']) ? ' max="' . esc_attr($field['max']) . '"' : '';
                    echo '&lt;input type="number" id="' . esc_attr($field_id) . '" name="' . esc_attr($field_id) . '" value="' . esc_attr($current_value) . '"' . $min . $max . ' class="small-text"&gt;';
                    break;
                    
                case 'checkbox':
                    $checked = $current_value ? ' checked' : '';
                    echo '&lt;input type="checkbox" id="' . esc_attr($field_id) . '" name="' . esc_attr($field_id) . '" value="1"' . $checked . '&gt;';
                    break;
                    
                case 'textarea':
                    $class = isset($field['class']) ? esc_attr($field['class']) : '';
                    
                    if (is_array($current_value)) {
                        $current_value = implode("
", $current_value);
                    }
                    
                    echo '&lt;textarea id="' . esc_attr($field_id) . '" name="' . esc_attr($field_id) . '" rows="5" class="large-text ' . $class . '"&gt;' . esc_textarea($current_value) . '&lt;/textarea&gt;';
                    break;
            }
            
            // Show field description if available
            if (isset($field['description'])) {
                echo '&lt;p class="description"&gt;' . esc_html($field['description']) . '&lt;/p&gt;';
            }
            
            echo '&lt;/td&gt;';
            echo '&lt;/tr&gt;';
        }
        
        echo '&lt;/table&gt;';
    }
    
    echo '&lt;p class="submit"&gt;';
    echo '&lt;input type="submit" name="submit" id="submit" class="button button-primary" value="Save Changes"&gt;';
    echo '&lt;/p&gt;';
    echo '&lt;/form&gt;';
    echo '&lt;/div&gt;';
}</code></pre>
                </div>
            </div>
            
            <div class="example">
                <h3>Batch Processing WooCommerce Products</h3>
                <p>Using generators for memory-efficient processing of large product catalogs:</p>
                
                <div class="code-example">
                    <pre><code>/**
 * Memory-efficient batch processing of WooCommerce products
 * using generators and array iteration
 */
function process_products_in_batches() {
    // Get total number of products
    $total_products = wp_count_posts('product')->publish;
    
    // Set batch size
    $batch_size = 20;
    
    // Create a product generator
    $products = product_batch_generator($batch_size);
    
    // Process settings
    $update_prices = isset($_POST['update_prices']) && $_POST['update_prices'] === '1';
    $price_adjustment = isset($_POST['price_adjustment']) ? floatval($_POST['price_adjustment']) : 0;
    $update_stock = isset($_POST['update_stock']) && $_POST['update_stock'] === '1';
    
    // Initialize counters
    $processed = 0;
    $updated = 0;
    
    // Start timer
    $start_time = microtime(true);
    
    // Process products in batches
    foreach ($products as $batch) {
        foreach ($batch as $product) {
            $processed++;
            $product_updated = false;
            
            // Update product price if requested
            if ($update_prices && $price_adjustment != 0) {
                $regular_price = get_post_meta($product->ID, '_regular_price', true);
                
                if (!empty($regular_price)) {
                    $new_price = round(floatval($regular_price) * (1 + ($price_adjustment / 100)), 2);
                    update_post_meta($product->ID, '_regular_price', $new_price);
                    update_post_meta($product->ID, '_price', $new_price);
                    $product_updated = true;
                }
            }
            
            // Update product stock if requested
            if ($update_stock) {
                $product_obj = wc_get_product($product->ID);
                
                if ($product_obj && $product_obj->managing_stock()) {
                    // Apply stock update logic here
                    // This is just a placeholder example
                    $current_stock = $product_obj->get_stock_quantity();
                    
                    // Sync with external inventory system or apply business rules
                    // For example, ensure minimum stock level
                    $min_stock = 5;
                    if ($current_stock < $min_stock) {
                        wc_update_product_stock($product->ID, $min_stock);
                        $product_updated = true;
                    }
                }
            }
            
            if ($product_updated) {
                $updated++;
                wc_delete_product_transients($product->ID);
            }
            
            // Show progress every 50 products
            if ($processed % 50 === 0 || $processed === $total_products) {
                $percentage = round(($processed / $total_products) * 100);
                echo "Processed $processed of $total_products products ($percentage%)...&lt;br&gt;";
                // Flush output buffer to show progress
                ob_flush();
                flush();
            }
        }
    }
    
    $time_taken = microtime(true) - $start_time;
    
    echo "&lt;h3&gt;Processing Complete&lt;/h3&gt;";
    echo "&lt;p&gt;Processed $processed products in " . round($time_taken, 2) . " seconds.&lt;/p&gt;";
    echo "&lt;p&gt;Updated $updated products.&lt;/p&gt;";
}

/**
 * Generator function to yield batches of products
 */
function product_batch_generator($batch_size = 20) {
    $offset = 0;
    
    do {
        $args = [
            'post_type' => 'product',
            'posts_per_page' => $batch_size,
            'offset' => $offset,
            'post_status' => 'publish',
            'fields' => 'all'
        ];
        
        $products = get_posts($args);
        
        if (!empty($products)) {
            yield $products;
            $offset += $batch_size;
        }
    } while (!empty($products));
}</code></pre>
                </div>
            </div>
        </section>

        <section class="homework">
            <h2>Homework Assignment</h2>
            <p>Put your array iteration skills to the test with this WordPress-themed assignment:</p>
            
            <div class="assignment">
                <h3>WordPress Menu Transformer</h3>
                <p>Create a function that transforms a WordPress menu structure into a customized format for different display purposes. Your function should:</p>
                
                <ol>
                    <li>Accept a WordPress menu location as input</li>
                    <li>Retrieve the menu items for that location</li>
                    <li>Process the hierarchical menu structure, handling parent-child relationships</li>
                    <li>Generate multiple output formats based on a parameter (e.g., "dropdown", "mobile", "sitemap")</li>
                    <li>Apply proper WordPress security and sanitization functions</li>
                </ol>
                
                <p>Your solution should use at least 3 different PHP array iteration techniques we covered in this lesson.</p>
                
                <div class="starter-code">
                    <pre><code>/**
 * WordPress Menu Transformer
 * 
 * @param string $menu_location Menu location registered with register_nav_menus()
 * @param string $format Output format: 'dropdown', 'mobile', or 'sitemap'
 * @param array $args Optional. Additional arguments for customization
 * @return string Formatted menu HTML
 */
function transform_wp_menu($menu_location, $format = 'dropdown', $args = []) {
    // 1. Get the menu items for the specified location
    $locations = get_nav_menu_locations();
    
    if (!isset($locations[$menu_location])) {
        return '&lt;p&gt;Menu not found for location: ' . esc_html($menu_location) . '&lt;/p&gt;';
    }
    
    $menu_id = $locations[$menu_location];
    $menu_items = wp_get_nav_menu_items($menu_id);
    
    if (empty($menu_items)) {
        return '&lt;p&gt;No menu items found.&lt;/p&gt;';
    }
    
    // 2. Process the menu items into a hierarchical structure
    // Your code here: Organize menu items into a parent-child hierarchy
    
    // 3. Generate the appropriate output format
    switch ($format) {
        case 'dropdown':
            // Your code here: Create a dropdown/select menu
            break;
            
        case 'mobile':
            // Your code here: Create a mobile-friendly accordion menu
            break;
            
        case 'sitemap':
            // Your code here: Create a sitemap-style nested list
            break;
            
        default:
            return '&lt;p&gt;Invalid format specified.&lt;/p&gt;';
    }
    
    // 4. Return the formatted menu
    return $output;
}

// Example usage in a template:
// echo transform_wp_menu('primary-menu', 'dropdown');
// echo transform_wp_menu('footer-menu', 'sitemap');</code></pre>
                </div>
            </div>
        </section>

        <section class="further-reading">
            <h2>Further Reading and Resources</h2>
            <ul>
                <li><a href="https://www.php.net/manual/en/book.array.php" target="_blank">PHP Manual: Array Functions</a> - Official documentation</li>
                <li><a href="https://developer.wordpress.org/reference/" target="_blank">WordPress Developer Reference</a> - Working with arrays in WordPress</li>
                <li><a href="https://phptherightway.com/" target="_blank">PHP: The Right Way</a> - Modern PHP best practices</li>
                <li><a href="https://www.smashingmagazine.com/2016/03/advanced-wordpress-development-techniques/" target="_blank">Advanced WordPress Development Techniques</a> - Advanced array handling in WordPress</li>
            </ul>
        </section>

        <section class="next-session">
            <h2>Coming Up Next: Session 6 - PHP Functions</h2>
            <p>In our next session, we'll explore PHP functions in detail, building on the array skills we've developed. We'll learn how to create reusable code blocks, work with parameters and return values, and structure your code for maximum efficiency and maintainability.</p>
            <p>To prepare for the next session, try creating custom functions that implement some of the array iteration techniques we've covered today!</p>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
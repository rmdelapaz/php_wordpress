<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>PHP Functions: Built-in PHP Functions Overview - PHP WordPress Course</title>
<meta content="Welcome to our exploration of PHP's extensive built-in function library! One of PHP's greatest strengths is its rich collection of pre-built functions that hand" name="description"/>
<meta content="PHP, WordPress, web development, built-in, php, functions" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">Built-in PHP Functions</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 6</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_function_declaration_and_calling.html">Function Declaration</a></li>
<li><a class="sidebar-link" href="/02module/php_function_parameters_and return_values.html">Parameters &amp; Returns</a></li>
<li><a class="sidebar-link" href="/02module/php_default_parameter_values.html">Default Parameters</a></li>
<li><a class="sidebar-link" href="/02module/php_variable_scope.html">Variable Scope</a></li>
<li><a class="sidebar-link" href="/02module/php_anonymoous_functions_and_closures.html">Anonymous Functions</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/php_built_in_php_functions_overview.html">Built-in Functions</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_create_library_custom_functions.html">Homework: Functions</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_indexed_array.html">← Prev: Session 5: Arrays</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_html_forms_review.html">Next: Session 7: Forms →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>PHP Functions: Built-in PHP Functions Overview</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 45 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: Functions in PHP</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Create and use PHP functions</li>
<li>Understand function parameters and returns</li>
<li>Master variable scope in functions</li>
<li>Build reusable code components</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="intro">
            <h2>Unleashing PHP's Built-in Power</h2>
            <p>Welcome to our exploration of PHP's extensive built-in function library! One of PHP's greatest strengths is its rich collection of pre-built functions that handle everything from string manipulation to database connectivity, file operations, and more.</p>
            
            <p>Think of PHP's built-in functions as a vast toolbox that comes with the language. Rather than crafting every tool from scratch, PHP provides hundreds of specialized functions ready for you to use in your WordPress development journey.</p>

            <div class="definition-box">
                <h3>What Are Built-in Functions?</h3>
                <p>Built-in functions (also called native or internal functions) are functions that come pre-packaged with PHP. They're ready to use without requiring any additional libraries or extensions and form the foundation of PHP's functionality.</p>
            </div>
        </section>

        <section class="visual-concept">
            <h2>PHP's Function Categories: A Visual Overview</h2>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="400" fill="#fafafa" rx="8"/>
    
    <rect x="181.33333333333337" y="55" width="204" height="50" 
          rx="25" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">(PHP Built-in Functions</text>
    <rect x="456.66666666666674" y="55" width="120" height="50" 
          rx="25" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">fa fa-globe</text>
</svg>
</div>
            
            <p>PHP's built-in functions are organized into logical categories, making it easier to find the function you need for a specific task. As a WordPress developer, you'll frequently use functions from all these categories to build dynamic, data-driven websites.</p>
        </section>

        <section class="php-documentation">
            <h2>Using the PHP Documentation</h2>
            
            <p>Before we dive into specific function categories, let's discuss how to use PHP's official documentation, which is an invaluable resource for learning about built-in functions.</p>
            
            <div class="svg-container">
                <svg width="650" height="400" xmlns="http://www.w3.org/2000/svg">
                    <!-- PHP Documentation Structure Diagram -->
                    <rect x="50" y="30" width="550" height="340" fill="#f5f5f5" stroke="#333" stroke-width="2"/>
                    <text x="325" y="60" text-anchor="middle" font-size="20" font-weight="bold">PHP Function Documentation Structure</text>

                    <!-- Function Signature -->
                    <rect x="70" y="90" width="510" height="50" fill="#e3f2fd" stroke="#0d47a1" stroke-width="2"/>
                    <text x="325" y="120" text-anchor="middle" font-weight="bold" fill="#0d47a1">Function Signature and Version Information</text>
                    
                    <!-- Description -->
                    <rect x="70" y="150" width="510" height="50" fill="#e8f5e9" stroke="#1b5e20" stroke-width="2"/>
                    <text x="325" y="180" text-anchor="middle" font-weight="bold" fill="#1b5e20">Function Description and Purpose</text>
                    
                    <!-- Parameters -->
                    <rect x="70" y="210" width="510" height="50" fill="#fff8e1" stroke="#ff6f00" stroke-width="2"/>
                    <text x="325" y="240" text-anchor="middle" font-weight="bold" fill="#ff6f00">Parameter List and Types</text>
                    
                    <!-- Return Values -->
                    <rect x="70" y="270" width="510" height="50" fill="#f3e5f5" stroke="#6a1b9a" stroke-width="2"/>
                    <text x="325" y="300" text-anchor="middle" font-weight="bold" fill="#6a1b9a">Return Values and Types</text>
                    
                    <!-- Examples -->
                    <rect x="70" y="330" width="510" height="30" fill="#ffebee" stroke="#b71c1c" stroke-width="2"/>
                    <text x="325" y="350" text-anchor="middle" font-weight="bold" fill="#b71c1c">Usage Examples</text>
                </svg>
            </div>
            
            <div class="documentation-tips">
                <h3>Tips for Using PHP Documentation</h3>
                <ul>
                    <li><strong>Check the version requirements:</strong> Make sure the function is available in the PHP version you're using</li>
                    <li><strong>Read the parameter descriptions carefully:</strong> Pay attention to required vs. optional parameters</li>
                    <li><strong>Note the return value type:</strong> Understanding what a function returns helps prevent errors</li>
                    <li><strong>Study the examples:</strong> The documentation includes practical examples for most functions</li>
                    <li><strong>Look at related functions:</strong> The "See Also" section often points to similar or complementary functions</li>
                    <li><strong>Read user contributed notes:</strong> These often contain valuable tips and real-world usage scenarios</li>
                </ul>
            </div>
            
            <div class="example-box">
                <h3>Example Documentation Reading: <code>str_replace()</code></h3>
                <pre>###CODE_BLOCK_1###</pre>
            </div>
        </section>

        <section class="string-functions">
            <h2>String Functions: Text Manipulation</h2>
            
            <p>String functions are among the most commonly used in PHP, especially in WordPress development where you're constantly working with text content.</p>
            
            <div class="example-box">
                <h3>Essential String Manipulation Functions</h3>
                <pre>###CODE_BLOCK_2###</pre>
            </div>

            <div class="wordpress-example">
                <h3>WordPress Content Formatting Example</h3>
                <pre>###CODE_BLOCK_3###</pre>
            </div>
            
            <div class="explainer-box">
                <h3>Regular Expressions with <code>preg_</code> Functions</h3>
                <p>While basic string functions handle many tasks, regular expressions offer more powerful pattern matching and replacement capabilities through the <code>preg_</code> family of functions.</p>
                <pre>###CODE_BLOCK_6###</pre>
            </div>
        </section>

        <section class="array-functions">
            <h2>Array Functions: Data Collection Handling</h2>
            
            <p>Arrays are fundamental data structures in PHP, and the language provides a rich set of functions for working with them. These functions are especially useful in WordPress when dealing with posts, users, options, and other collections of data.</p>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 2300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="2300" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="127.77777777777777" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="205.55555555555554" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="283.3333333333333" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="361.1111111111111" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="438.88888888888886" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="516.6666666666666" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="594.4444444444443" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="672.2222222222222" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="127.77777777777777" y1="200" x2="100.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="127.77777777777777" y1="200" x2="150.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="127.77777777777777" y1="200" x2="200.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="127.77777777777777" y1="200" x2="250.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="205.55555555555554" y1="200" x2="300.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="205.55555555555554" y1="200" x2="350.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="205.55555555555554" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.3333333333333" y1="200" x2="450.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.3333333333333" y1="200" x2="500.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.3333333333333" y1="200" x2="550.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="361.1111111111111" y1="200" x2="600.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="361.1111111111111" y1="200" x2="650.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="361.1111111111111" y1="200" x2="700.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="205.55555555555554" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="244.44444444444446" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[Modification] A </text>
    <line x1="283.33333333333337" y1="80" x2="361.1111111111111" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="322.22222222222223" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; E[Filtering &amp; Mapping] A </text>
    <line x1="516.6666666666667" y1="80" x2="516.6666666666666" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; B1[array()] B </text>
    <line x1="516.6666666666667" y1="80" x2="672.2222222222222" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="594.4444444444445" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; B3[empty()] B </text>
    <line x1="127.77777777777777" y1="200" x2="150.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="138.88888888888889" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C1[array_push()] C </text>
    <line x1="127.77777777777777" y1="200" x2="250.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="188.88888888888889" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C3[array_merge()] C </text>
    <line x1="205.55555555555554" y1="200" x2="350.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="277.77777777777777" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; D1[foreach] D </text>
    <line x1="205.55555555555554" y1="200" x2="450.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="327.77777777777777" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; D3[array_map()] E </text>
    <line x1="283.3333333333333" y1="200" x2="550.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="416.66666666666663" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; E2[array_map()] E </text>
    <line x1="361.1111111111111" y1="200" x2="650.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="505.55555555555554" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; F1[sort()] F </text>
    <rect x="213.33333333333337" y="55" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Array Functions</text>
    <rect x="422.66666666666674" y="55" width="188" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Creation &amp; Inspection</text>
    <rect x="67.77777777777777" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="127.77777777777777" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Modification</text>
    <rect x="145.55555555555554" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="205.55555555555554" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Iteration</text>
    <rect x="197.33333333333331" y="175" width="172" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.3333333333333" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Filtering &amp; Mapping</text>
    <rect x="301.1111111111111" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="361.1111111111111" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Sorting</text>
    <rect x="378.88888888888886" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="438.88888888888886" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array()</text>
    <rect x="456.66666666666663" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666666" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">count()</text>
    <rect x="534.4444444444443" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="594.4444444444443" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">empty()</text>
    <rect x="612.2222222222222" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="672.2222222222222" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">isset()</text>
    <rect x="40.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="100.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_push()</text>
    <rect x="90.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="150.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_pop()</text>
    <rect x="138.0" y="295" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="200.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_merge()</text>
    <rect x="188.0" y="295" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="250.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_slice()</text>
    <rect x="240.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="300.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">foreach</text>
    <rect x="290.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="350.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_walk()</text>
    <rect x="340.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_map()</text>
    <rect x="384.0" y="295" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="450.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_filter()</text>
    <rect x="440.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="500.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_map()</text>
    <rect x="484.0" y="295" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="550.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_reduce()</text>
    <rect x="540.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="600.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">sort()</text>
    <rect x="590.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="650.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">usort()</text>
    <rect x="640.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="700.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">ksort()</text>
</svg>
</div>
            
            <div class="example-box">
                <h3>Essential Array Functions</h3>
                <pre>###CODE_BLOCK_7###</pre>
            </div>

            <div class="example-box">
                <h3>Advanced Array Manipulation</h3>
                <pre>###CODE_BLOCK_8###</pre>
            </div>

            <div class="wordpress-example">
                <h3>WordPress Array Function Example</h3>
                <pre>###CODE_BLOCK_9###</pre>
            </div>
        </section>

        <section class="file-system-functions">
            <h2>File System Functions: Reading, Writing, and Managing Files</h2>
            
            <p>PHP provides powerful functions for interacting with the file system, allowing you to read and write files, manage directories, and check file properties. These are particularly useful for theme and plugin development in WordPress.</p>
            
            <div class="example-box">
                <h3>Reading and Writing Files</h3>
                <pre>###CODE_BLOCK_10###</pre>
            </div>

            <div class="example-box">
                <h3>File and Directory Management</h3>
                <pre>###CODE_BLOCK_11###</pre>
            </div>

            <div class="wordpress-example">
                <h3>WordPress Log File Manager Example</h3>
                <pre>###CODE_BLOCK_12###</pre>
            </div>
            
            <div class="security-note">
                <h3>⚠️ Security Note: File System Operations</h3>
                <p>When working with file operations in WordPress, always:</p>
                <ul>
                    <li>Validate and sanitize any user-provided filenames or paths</li>
                    <li>Use WordPress functions like <code>wp_upload_dir()</code> to get safe paths</li>
                    <li>Check permissions before reading from or writing to files</li>
                    <li>Be cautious with functions like <code>file_get_contents()</code> when the URL might be user-provided</li>
                    <li>Consider using WordPress filesystem API for more secure file operations</li>
                </ul>
            </div>
        </section>

        <section class="date-time-functions">
            <h2>Date and Time Functions: Managing Temporal Data</h2>
            
            <p>PHP offers comprehensive functions for working with dates and times, essential for scheduling posts, managing events, calculating durations, and formatting dates in WordPress.</p>
            
            <div class="example-box">
                <h3>Basic Date and Time Functions</h3>
                <pre>###CODE_BLOCK_15###</pre>
            </div>

            <div class="example-box">
                <h3>DateTime Object (PHP 5.2+)</h3>
                <pre>###CODE_BLOCK_16###</pre>
            </div>

            <div class="wordpress-example">
                <h3>WordPress Date and Time Example</h3>
                <pre>###CODE_BLOCK_17###</pre>
            </div>
        </section>

        <section class="utility-functions">
            <h2>Utility Functions: Everyday Helpers</h2>
            
            <p>PHP provides a variety of utility functions that help with common tasks in web development, from URL handling to data validation.</p>
            
            <div class="example-box">
                <h3>URL and HTTP Functions</h3>
                <pre>###CODE_BLOCK_18###</pre>
            </div>

            <div class="example-box">
                <h3>Data Validation and Sanitization</h3>
                <pre>###CODE_BLOCK_19###</pre>
            </div>

            <div class="wordpress-example">
                <h3>WordPress Form Data Processor Example</h3>
                <pre>###CODE_BLOCK_20###</pre>
            </div>
        </section>

        <section class="math-functions">
            <h2>Math and Number Functions: Calculations Made Simple</h2>
            
            <p>PHP provides many mathematical functions for performing calculations, generating random numbers, and formatting numeric output.</p>
            
            <div class="example-box">
                <h3>Basic Math Functions</h3>
                <pre>###CODE_BLOCK_21###</pre>
            </div>

            <div class="example-box">
                <h3>Number Formatting</h3>
                <pre>###CODE_BLOCK_22###</pre>
            </div>

            <div class="wordpress-example">
                <h3>WordPress Product Pricing Calculator Example</h3>
                <pre>###CODE_BLOCK_23###</pre>
            </div>
        </section>

        <section class="finding-functions">
            <h2>Finding the Right Function</h2>
            
            <p>With over 1,000 built-in functions in PHP, finding the right one for your task can be challenging. Here are some strategies to help you discover useful functions:</p>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 1300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="1300" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="190.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="330.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="470.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="610.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="190.0" y1="200" x2="137.5" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="190.0" y1="200" x2="225.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="190.0" y1="200" x2="312.5" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="330.0" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="330.0" y1="200" x2="487.5" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="470.0" y1="200" x2="575.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="470.0" y1="200" x2="662.5" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="330.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="306.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[Function by Category] A </text>
    <line x1="283.33333333333337" y1="80" x2="610.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="446.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; E[Predictable Naming] B </text>
    <line x1="330.0" y1="200" x2="487.5" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="408.75" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; D1[php.net/function_name] D </text>
    <line x1="470.0" y1="200" x2="662.5" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="566.25" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; E1[Consistent prefixes] E </text>
    <rect x="173.33333333333337" y="55" width="220" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">How to Find PHP Functions</text>
    <rect x="402.66666666666674" y="55" width="228" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Official PHP Documentation</text>
    <rect x="100.0" y="175" width="180" height="50" 
          rx="5" class="node-rect"/>
    <text x="190.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Function by Category</text>
    <rect x="260.0" y="175" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="330.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Function Search</text>
    <rect x="388.0" y="175" width="164" height="50" 
          rx="5" class="node-rect"/>
    <text x="470.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Predictable Naming</text>
    <rect x="484.0" y="175" width="252" height="50" 
          rx="5" class="node-rect"/>
    <text x="610.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">php.net/manual/en/funcref.php</text>
    <rect x="71.5" y="295" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="137.5" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">String - str_*</text>
    <rect x="155.0" y="295" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Array - array_*</text>
    <rect x="250.5" y="295" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="312.5" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">File - file_*</text>
    <rect x="306.0" y="295" width="188" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">php.net/function_name</text>
    <rect x="421.5" y="295" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="487.5" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Search engines</text>
    <rect x="489.0" y="295" width="172" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Consistent prefixes</text>
    <rect x="528.5" y="295" width="268" height="50" 
          rx="5" class="node-rect"/>
    <text x="662.5" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Common verbs: get, set, is, has</text>
</svg>
</div>
            
            <div class="tips-box">
                <h3>Function Finding Tips</h3>
                <ul>
                    <li><strong>Use the Function Reference:</strong> Browse the PHP manual's function reference, organized by category</li>
                    <li><strong>Learn Common Prefixes:</strong> Functions are often grouped by prefixes like <code>str_</code> (strings), <code>array_</code> (arrays), etc.</li>
                    <li><strong>Search for What You Need:</strong> Search phrases like "PHP convert string to lowercase" to find relevant functions</li>
                    <li><strong>Check Related Functions:</strong> When you find a useful function, look at the "See Also" section for related functions</li>
                    <li><strong>Read User Comments:</strong> The PHP manual's user-contributed notes often contain valuable examples and alternatives</li>
                    <li><strong>Explore WordPress-Specific Functions:</strong> The WordPress Developer Handbook lists many WordPress-specific functions</li>
                </ul>
            </div>
            
            <div class="example-box">
                <h3>Common Function Naming Patterns</h3>
                <pre>###CODE_BLOCK_26###</pre>
            </div>
        </section>

        <section class="best-practices">
            <h2>Best Practices for Using Built-in Functions</h2>
            
            <div class="best-practices-list">
                <h3>Do's and Don'ts</h3>
                <table>
                    <tr>
                        <th>Do ✅</th>
                        <th>Don't ❌</th>
                    </tr>
                    <tr>
                        <td>Check function return values for errors</td>
                        <td>Assume functions always succeed</td>
                    </tr>
                    <tr>
                        <td>Understand what functions return when they fail</td>
                        <td>Use functions without checking the documentation first</td>
                    </tr>
                    <tr>
                        <td>Use type-specific functions when possible</td>
                        <td>Reinvent built-in functionality with custom code</td>
                    </tr>
                    <tr>
                        <td>Sanitize and validate all inputs</td>
                        <td>Pass raw user input directly to functions</td>
                    </tr>
                    <tr>
                        <td>Use WordPress wrappers when available</td>
                        <td>Ignore WordPress's built-in function alternatives</td>
                    </tr>
                </table>
            </div>
            
            <div class="example-box">
                <h3>Error Handling with Built-in Functions</h3>
                <pre>###CODE_BLOCK_27###</pre>
            </div>
            
            <div class="example-box">
                <h3>Using WordPress Wrapper Functions</h3>
                <pre>###CODE_BLOCK_28###</pre>
            </div>
        </section>

        <section class="practice-exercises">
            <h2>Practice Exercises</h2>
            
            <div class="exercise">
                <h3>Exercise 1: String Manipulation</h3>
                <p>Create a function that takes a blog post title and returns a slug version (lowercase, hyphens instead of spaces, no special characters) using PHP's built-in string functions. Test it with various titles, including ones with special characters and different cases.</p>
            </div>
            
            <div class="exercise">
                <h3>Exercise 2: Array Processing</h3>
                <p>Write a function that takes an array of WordPress post objects and returns an organized array with the following:</p>
                <ul>
                    <li>Posts grouped by year and month of publication</li>
                    <li>Each group sorted by comment count (highest to lowest)</li>
                    <li>Only the title, date, and comment count for each post</li>
                </ul>
                <p>Use PHP's array functions to accomplish this task efficiently.</p>
            </div>
            
            <div class="exercise">
                <h3>Exercise 3: Date Calculator</h3>
                <p>Create a "publishing schedule" function that:</p>
                <ul>
                    <li>Takes a start date and the number of posts to schedule</li>
                    <li>Generates dates for each post, publishing on Mondays, Wednesdays, and Fridays only</li>
                    <li>Returns an array of formatted dates for each post</li>
                </ul>
                <p>Use PHP's date and time functions to handle the calendar calculations.</p>
            </div>
        </section>

        <section class="further-reading">
            <h2>Further Reading</h2>
            
            <ul>
                <li><a href="https://www.php.net/manual/en/funcref.php">PHP Function Reference</a></li>
                <li><a href="https://developer.wordpress.org/reference/">WordPress Function Reference</a></li>
                <li><a href="https://php.net/manual/en/reserved.variables.php">PHP Predefined Variables</a></li>
                <li><a href="https://www.php.net/manual/en/refs.calendar.php">PHP Date and Time Functions</a></li>
                <li><a href="https://www.php.net/manual/en/book.strings.php">PHP String Functions</a></li>
            </ul>
        </section>

        <section class="module-completion">
            <h2>Module Completion</h2>
            
            <p>Congratulations! You've completed our series on PHP Functions. Let's review what we've covered:</p>
            
            <div class="module-summary">
                <ul>
                    <li>Function declaration and calling</li>
                    <li>Function parameters and return values</li>
                    <li>Default parameter values</li>
                    <li>Variable scope</li>
                    <li>Anonymous functions and closures</li>
                    <li>Built-in PHP functions</li>
                </ul>
            </div>
            
            <p>With this foundation in PHP functions, you're well-equipped to move on to our next module on Database Development with MySQL, where you'll learn how to interact with databases using PHP.</p>
            
            <div class="next-module-preview">
                <h3>Coming Up Next: Database Development with MySQL</h3>
                <ul>
                    <li>Database design principles</li>
                    <li>SQL fundamentals</li>
                    <li>Connecting to MySQL with PHP</li>
                    <li>CRUD operations (Create, Read, Update, Delete)</li>
                    <li>Preparing and executing SQL queries</li>
                    <li>Working with the WordPress database</li>
                </ul>
            </div>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
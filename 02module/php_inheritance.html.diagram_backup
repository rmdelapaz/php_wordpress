<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>Advanced OOP Concepts in PHP: Inheritance and Beyond - PHP WordPress Course</title>
<meta content="Master class inheritance in PHP." name="description"/>
<meta content="PHP, WordPress, web development, php, inheritance" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Inheritance</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 9</h4>
<ul class="sidebar-menu">
<li class="active"><a class="sidebar-link active" href="/02module/php_inheritance.html">Inheritance</a></li>
<li><a class="sidebar-link" href="/02module/php_method_overriding.html">Method Overriding</a></li>
<li><a class="sidebar-link" href="/02module/php_abstract_classes.html">Abstract Classes</a></li>
<li><a class="sidebar-link" href="/02module/php_interfaces.html">Interfaces</a></li>
<li><a class="sidebar-link" href="/02module/php_namespaces.html">Namespaces</a></li>
<li><a class="sidebar-link" href="/02module/php_traits.html">Traits</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_extend_with_inheritance.html">Homework: Inheritance</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_oop_concepts.html">← Prev: Session 8: OOP Intro</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_planning_php_application.html">Next: Session 10: Project →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>Advanced OOP Concepts in PHP: Inheritance and Beyond</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 45 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: Object-Oriented PHP</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP programming concepts</li>
<li>Write clean, maintainable code</li>
<li>Apply best practices</li>
<li>Build dynamic applications</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">

<section class="module-intro">
            <h2>Building Complex Applications with PHP OOP</h2>
            <p>Welcome to our exploration of advanced object-oriented programming concepts in PHP! This lesson builds on our previous introduction to OOP fundamentals and will equip you with powerful tools to create more maintainable, flexible, and robust applications.</p>
            
            <div class="note">
                <p><strong>Why These Concepts Matter:</strong> The concepts we'll cover today form the foundation of WordPress core architecture. Understanding inheritance, interfaces, and traits will dramatically improve your ability to extend WordPress functionality and work with its codebase.</p>
            </div>
        </section>

        <section id="inheritance">
            <h2>Inheritance: The Family Tree of Classes</h2>
            
            <p>Inheritance is a fundamental concept in object-oriented programming that allows a class to inherit properties and methods from another class. Think of inheritance like a family tree - children inherit traits from their parents while developing their own unique characteristics.</p>
            
            <div class="diagram">
                <h3>Visualizing Class Inheritance</h3>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
    
    <!-- Background -->
    <rect x="0" y="0" width="600" height="300" rx="8" fill="#f3e5f5" 
          stroke="#7b1fa2" stroke-width="2"/>
    
    <!-- Icon -->
    <g transform="translate(300, 100)">
        <rect x="-40" y="-30" width="80" height="60" rx="5" 
              fill="white" stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="-10" x2="20" y2="-10" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="0" x2="20" y2="0" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="10" x2="20" y2="10" 
              stroke="#7b1fa2" stroke-width="2"/>
    </g>
    
    <!-- Text -->
    <text x="300" y="180" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="18" 
          fill="#4a148c" font-weight="bold">
        Class Diagram
    </text>
    
    <text x="300" y="210" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="14" 
          fill="#4a148c" opacity="0.8">
        (Diagram converted to static representation)
    </text>
    
    <!-- Original content hint -->
    <text x="300" y="240" text-anchor="middle" 
          font-family="monospace" font-size="10" 
          fill="#4a148c" opacity="0.5">
        classDiagram class Vehicle { +string make +string ...
    </text>
</svg>
</div>
            </div>
            
            <h3>How Inheritance Works in PHP</h3>
            
            <p>In PHP, we use the <code>extends</code> keyword to create a child class that inherits from a parent class. The child class (also called a subclass) inherits all non-private properties and methods from the parent class (superclass).</p>
            
            <div class="code-example">
                <h4>Basic Inheritance Example</h4>
                <pre>###CODE_BLOCK_1###</pre>
            </div>
            
            <h3>Key Inheritance Concepts</h3>
            
            <div class="concept-list">
                <div class="concept">
                    <h4>The <code>parent::</code> Keyword</h4>
                    <p>Use <code>parent::</code> to access parent class methods from within the child class. This is particularly useful in constructors and when overriding methods but still needing to access the parent's functionality.</p>
                </div>
                
                <div class="concept">
                    <h4>Access Modifiers and Inheritance</h4>
                    <p><strong>Private</strong> properties/methods are NOT inherited and can only be accessed within the class that defines them.</p>
                    <p><strong>Protected</strong> properties/methods ARE inherited and can be accessed within the class and any of its subclasses.</p>
                    <p><strong>Public</strong> properties/methods ARE inherited and can be accessed from anywhere.</p>
                </div>
                
                <div class="concept">
                    <h4>Multi-level Inheritance</h4>
                    <p>PHP supports multi-level inheritance, where a class can extend another class which itself extends a third class, creating a chain of inheritance.</p>
                    <pre>###CODE_BLOCK_4###</pre>
                </div>
            </div>
            
            <h3>Real-World Application: WordPress Menu System</h3>
            
            <p>WordPress uses inheritance extensively in its menu system. The <code>Walker</code> class is a parent class that provides functionality for traversing hierarchical data structures like menus, categories, and comments.</p>
            
            <div class="code-example">
                <h4>Simplified WordPress Walker Example</h4>
                <pre>###CODE_BLOCK_6###</pre>
            </div>
            
            <div class="pro-tip">
                <h4>When to Use Inheritance</h4>
                <p>Inheritance is best used when you have an "is-a" relationship. A Car "is-a" Vehicle, an ElectricCar "is-a" Car. Use inheritance when:</p>
                <ul>
                    <li>You need to represent a hierarchy of objects</li>
                    <li>There's a clear parent/child relationship</li>
                    <li>The child class adds or modifies behavior while keeping core functionality</li>
                </ul>
                <p>Avoid inheritance when the relationship is "has-a" (use composition instead) or when inheritance would create too complex a hierarchy.</p>
            </div>
        </section>

        <section id="method-overriding">
            <h2>Method Overriding: Customizing Inherited Behavior</h2>
            
            <p>Method overriding is a feature that allows a child class to provide a specific implementation of a method already defined in its parent class. It's like inheriting a family recipe but changing some ingredients to better suit your taste.</p>
            
            <div class="diagram">
                <h3>Method Overriding Visualization</h3>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
    
    <!-- Background -->
    <rect x="0" y="0" width="600" height="300" rx="8" fill="#e3f2fd" 
          stroke="#1976d2" stroke-width="2"/>
    
    <!-- Icon -->
    <g transform="translate(300, 100)">
        <rect x="-40" y="-30" width="80" height="60" rx="5" 
              fill="white" stroke="#1976d2" stroke-width="2"/>
        <line x1="-20" y1="-10" x2="20" y2="-10" 
              stroke="#1976d2" stroke-width="2"/>
        <line x1="-20" y1="0" x2="20" y2="0" 
              stroke="#1976d2" stroke-width="2"/>
        <line x1="-20" y1="10" x2="20" y2="10" 
              stroke="#1976d2" stroke-width="2"/>
    </g>
    
    <!-- Text -->
    <text x="300" y="180" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="18" 
          fill="#0d47a1" font-weight="bold">
        Sequence Diagram
    </text>
    
    <text x="300" y="210" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="14" 
          fill="#0d47a1" opacity="0.8">
        (Diagram converted to static representation)
    </text>
    
    <!-- Original content hint -->
    <text x="300" y="240" text-anchor="middle" 
          font-family="monospace" font-size="10" 
          fill="#0d47a1" opacity="0.5">
        sequenceDiagram participant Client participant Car...
    </text>
</svg>
</div>
            </div>
            
            <h3>Method Overriding Rules in PHP</h3>
            
            <ul>
                <li>The method in the child class must have the same name as the method in the parent class</li>
                <li>The method signature should match (same number and type of parameters)</li>
                <li>The visibility can be changed to be less restrictive but not more restrictive (e.g., protected in parent can become public in child, but not private)</li>
                <li>Type hints and return types must be compatible</li>
            </ul>
            
            <div class="code-example">
                <h4>Method Overriding Example</h4>
                <pre>###CODE_BLOCK_7###</pre>
            </div>
            
            <h3>Real-World Example: WooCommerce Product Types</h3>
            
            <p>In WooCommerce, different product types extend a base Product class and override methods like price calculation to handle their specific needs:</p>
            
            <div class="code-example">
                <h4>Simplified WooCommerce Product Example</h4>
                <pre>###CODE_BLOCK_8###</pre>
            </div>
            
            <div class="pro-tip">
                <h4>Best Practices for Method Overriding</h4>
                <ul>
                    <li>Use <code>parent::methodName()</code> when you want to extend rather than completely replace behavior</li>
                    <li>Keep the method signature consistent for better maintainability</li>
                    <li>Document why you're overriding the method for future developers</li>
                    <li>Don't override unnecessarily - only when the child class truly needs different behavior</li>
                </ul>
            </div>
        </section>

        <section id="abstract-classes">
            <h2>Abstract Classes: Blueprint for Child Classes</h2>
            
            <p>Abstract classes are like blueprints that can't be directly instantiated but serve as a template for other classes. Think of them as an architectural plan - you can't live in the plan itself, but you can build concrete houses based on it.</p>
            
            <div class="diagram">
                <h3>Abstract Class Structure</h3>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
    
    <!-- Background -->
    <rect x="0" y="0" width="600" height="300" rx="8" fill="#f3e5f5" 
          stroke="#7b1fa2" stroke-width="2"/>
    
    <!-- Icon -->
    <g transform="translate(300, 100)">
        <rect x="-40" y="-30" width="80" height="60" rx="5" 
              fill="white" stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="-10" x2="20" y2="-10" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="0" x2="20" y2="0" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="10" x2="20" y2="10" 
              stroke="#7b1fa2" stroke-width="2"/>
    </g>
    
    <!-- Text -->
    <text x="300" y="180" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="18" 
          fill="#4a148c" font-weight="bold">
        Class Diagram
    </text>
    
    <text x="300" y="210" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="14" 
          fill="#4a148c" opacity="0.8">
        (Diagram converted to static representation)
    </text>
    
    <!-- Original content hint -->
    <text x="300" y="240" text-anchor="middle" 
          font-family="monospace" font-size="10" 
          fill="#4a148c" opacity="0.5">
        classDiagram class Database { &gt; #connection +conne...
    </text>
</svg>
</div>
            </div>
            
            <h3>Key Features of Abstract Classes</h3>
            
            <ul>
                <li>Cannot be instantiated directly (cannot use <code>new AbstractClass()</code>)</li>
                <li>Can contain a mix of abstract and concrete methods</li>
                <li>Abstract methods only have a signature, no implementation</li>
                <li>Classes that extend an abstract class MUST implement all its abstract methods</li>
                <li>Can contain properties and constants like regular classes</li>
                <li>Can define constructor and destructor methods</li>
            </ul>
            
            <div class="code-example">
                <h4>Abstract Class Example</h4>
                <pre>###CODE_BLOCK_11###</pre>
            </div>
            
            <h3>When to Use Abstract Classes</h3>
            
            <ul>
                <li>When you want to provide a common base implementation with some required methods</li>
                <li>When you have multiple related classes that share common behavior</li>
                <li>When you want to enforce a certain structure on child classes</li>
                <li>When you need constructor logic in the parent class</li>
            </ul>
            
            <h3>Real-World Example: WordPress Customizer</h3>
            
            <p>WordPress uses abstract classes for its Customizer framework, where different control types share common functionality but require specific implementations:</p>
            
            <div class="code-example">
                <h4>Simplified WordPress Customizer Example</h4>
                <pre>###CODE_BLOCK_12###</pre>
            </div>
            
            <div class="pro-tip">
                <h4>Abstract Classes vs. Interfaces</h4>
                <p>People often confuse abstract classes with interfaces. Here's the key difference:</p>
                <ul>
                    <li><strong>Abstract Class:</strong> "Is a partial implementation" - can contain both concrete and abstract methods, and can have properties</li>
                    <li><strong>Interface:</strong> "Is a contract only" - can only contain method signatures, no implementation, no properties</li>
                </ul>
                <p>Use abstract classes when child classes share common functionality. Use interfaces when you need multiple unrelated classes to implement the same contract.</p>
            </div>
        </section>

        <section id="interfaces">
            <h2>Interfaces: Contracts for Classes</h2>
            
            <p>Interfaces are contracts that specify what methods a class must implement, without specifying how those methods should be implemented. Think of interfaces as a job description listing required skills, while the employee (implementing class) decides how to apply those skills.</p>
            
            <div class="diagram">
                <h3>Interface Implementation</h3>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
    
    <!-- Background -->
    <rect x="0" y="0" width="600" height="300" rx="8" fill="#f3e5f5" 
          stroke="#7b1fa2" stroke-width="2"/>
    
    <!-- Icon -->
    <g transform="translate(300, 100)">
        <rect x="-40" y="-30" width="80" height="60" rx="5" 
              fill="white" stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="-10" x2="20" y2="-10" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="0" x2="20" y2="0" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="10" x2="20" y2="10" 
              stroke="#7b1fa2" stroke-width="2"/>
    </g>
    
    <!-- Text -->
    <text x="300" y="180" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="18" 
          fill="#4a148c" font-weight="bold">
        Class Diagram
    </text>
    
    <text x="300" y="210" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="14" 
          fill="#4a148c" opacity="0.8">
        (Diagram converted to static representation)
    </text>
    
    <!-- Original content hint -->
    <text x="300" y="240" text-anchor="middle" 
          font-family="monospace" font-size="10" 
          fill="#4a148c" opacity="0.5">
        classDiagram class Loggable { &gt; +log(message) +get...
    </text>
</svg>
</div>
            </div>
            
            <h3>Key Features of Interfaces</h3>
            
            <ul>
                <li>Define a contract with method signatures only (no implementation)</li>
                <li>Cannot contain properties (only constants)</li>
                <li>All methods must be public</li>
                <li>A class can implement multiple interfaces</li>
                <li>Cannot be instantiated directly</li>
                <li>Since PHP 8.0, interfaces can define constants</li>
            </ul>
            
            <div class="code-example">
                <h4>Interface Example</h4>
                <pre>###CODE_BLOCK_13###</pre>
            </div>
            
            <h3>Real-World Example: WordPress Hooks System</h3>
            
            <p>WordPress uses interfaces to define contracts for objects that need to interact with its hooks system:</p>
            
            <div class="code-example">
                <h4>Simplified WordPress Hook Example</h4>
                <pre>###CODE_BLOCK_14###</pre>
            </div>
            
            <div class="pro-tip">
                <h4>When to Use Interfaces</h4>
                <ul>
                    <li>When you need multiple unrelated classes to follow the same contract</li>
                    <li>When you want to achieve multiple inheritance-like functionality</li>
                    <li>When you need to define a contract without implementation details</li>
                    <li>When you want to type-hint in method parameters or return types</li>
                    <li>When you're creating a plugin or framework that others will extend</li>
                </ul>
            </div>
        </section>

        <section id="namespaces">
            <h2>Namespaces: Organizing Your Code</h2>
            
            <p>Namespaces are like zip codes or neighborhoods in a city - they help organize and group related classes, functions, and constants to prevent naming conflicts. Think of namespaces as organizing your code into different folders.</p>
            
            <div class="diagram">
                <h3>Namespace Organization</h3>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 800" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="800" fill="#fafafa" rx="8"/>
    
    <line x1="400.0" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="190.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="330.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="470.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="470.0" y1="320" x2="610.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="470.0" y1="320" x2="400.0" y2="440" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="400.0" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="458.33333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; App App </text>
    <line x1="283.33333333333337" y1="200" x2="330.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="306.6666666666667" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; Models App </text>
    <line x1="283.33333333333337" y1="200" x2="610.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="446.6666666666667" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; Payments Payments </text>
    <rect x="330.0" y="55" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">PHP Application</text>
    <rect x="221.33333333333337" y="175" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">App Namespace</text>
    <rect x="442.66666666666674" y="175" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">App\\Controllers</text>
    <rect x="130.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="190.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">App\Models</text>
    <rect x="270.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="330.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">App\Utils</text>
    <rect x="410.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="470.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">App\Payments</text>
    <rect x="524.0" y="295" width="172" height="50" 
          rx="5" class="node-rect"/>
    <text x="610.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">App\Payments\PayPal</text>
    <rect x="310.0" y="415" width="180" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="440" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">App\Payments\\Stripe</text>
</svg>
</div>
            </div>
            
            <h3>Key Features of Namespaces</h3>
            
            <ul>
                <li>Help avoid name collisions between classes, functions, and constants</li>
                <li>Allow for better organization of code in larger applications</li>
                <li>Support sub-namespaces using the backslash (\) character</li>
                <li>Include mechanism for importing namespaces with <code>use</code> statements</li>
                <li>Can be aliased using the <code>as</code> keyword</li>
            </ul>
            
            <div class="code-example">
                <h4>Namespace Examples</h4>
                <pre>###CODE_BLOCK_17###</pre>
            </div>
            
            <h3>Global Namespace and Special Namespace Keywords</h3>
            
            <ul>
                <li><code>\</code> (leading backslash) - References the global namespace</li>
                <li><code>namespace</code> keyword - Used to define a namespace</li>
                <li><code>use</code> keyword - Imports a namespace</li>
                <li><code>as</code> keyword - Creates an alias for an imported namespace</li>
            </ul>
            
            <div class="code-example">
                <h4>Special Namespace Features</h4>
                <pre>###CODE_BLOCK_22###</pre>
            </div>
            
            <h3>Real-World Example: WordPress Plugin Organization</h3>
            
            <p>Modern WordPress plugins use namespaces to organize their code and prevent conflicts with other plugins:</p>
            
            <div class="code-example">
                <h4>WordPress Plugin Namespace Example</h4>
                <pre>###CODE_BLOCK_23###</pre>
            </div>
            
            <div class="pro-tip">
                <h4>Namespace Best Practices</h4>
                <ul>
                    <li>Follow PSR-4 autoloading standards where namespace structure mirrors directory structure</li>
                    <li>Use vendor names for plugins and themes (e.g., <code>YourCompany\PluginName</code>)</li>
                    <li>Group related functionality in sub-namespaces (Admin, Frontend, API, etc.)</li>
                    <li>Import only the classes you need, not entire namespaces</li>
                    <li>Consider using Composer's autoloader for automatic class loading</li>
                </ul>
            </div>
        </section>

        <section id="traits">
            <h2>Traits: Reusable Code Snippets</h2>
            
            <p>Traits are a mechanism for code reuse in single inheritance languages like PHP. Think of traits as mix-ins or building blocks that you can use to add functionality to classes without inheritance. Like recipe components you can mix and match to create different dishes.</p>
            
            <div class="diagram">
                <h3>Traits in Action</h3>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
    
    <!-- Background -->
    <rect x="0" y="0" width="600" height="300" rx="8" fill="#f3e5f5" 
          stroke="#7b1fa2" stroke-width="2"/>
    
    <!-- Icon -->
    <g transform="translate(300, 100)">
        <rect x="-40" y="-30" width="80" height="60" rx="5" 
              fill="white" stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="-10" x2="20" y2="-10" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="0" x2="20" y2="0" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="10" x2="20" y2="10" 
              stroke="#7b1fa2" stroke-width="2"/>
    </g>
    
    <!-- Text -->
    <text x="300" y="180" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="18" 
          fill="#4a148c" font-weight="bold">
        Class Diagram
    </text>
    
    <text x="300" y="210" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="14" 
          fill="#4a148c" opacity="0.8">
        (Diagram converted to static representation)
    </text>
    
    <!-- Original content hint -->
    <text x="300" y="240" text-anchor="middle" 
          font-family="monospace" font-size="10" 
          fill="#4a148c" opacity="0.5">
        classDiagram class LoggableTrait { &gt; -logFile +log...
    </text>
</svg>
</div>
            </div>
            
            <h3>Key Features of Traits</h3>
            
            <ul>
                <li>Allows horizontal code reuse (sharing code between unrelated classes)</li>
                <li>Can contain properties, methods, and abstract methods</li>
                <li>Cannot be instantiated on their own</li>
                <li>A class can use multiple traits</li>
                <li>Supports method precedence rules to resolve conflicts</li>
                <li>Can declare abstract methods that using classes must implement</li>
            </ul>
            
            <div class="code-example">
                <h4>Trait Example</h4>
                <pre>###CODE_BLOCK_25###</pre>
            </div>
            
            <h3>Trait Conflict Resolution</h3>
            
            <p>When a class uses multiple traits with the same method names, PHP provides mechanisms to resolve these conflicts:</p>
            
            <div class="code-example">
                <h4>Trait Conflict Resolution Example</h4>
                <pre>###CODE_BLOCK_26###</pre>
            </div>
            
            <h3>Real-World Example: WordPress WP_REST_Controller</h3>
            
            <p>WordPress uses traits in its REST API framework to share functionality between controller classes:</p>
            
            <div class="code-example">
                <h4>Simplified WordPress REST API Trait Example</h4>
                <pre>###CODE_BLOCK_27###</pre>
            </div>
            
            <div class="pro-tip">
                <h4>When to Use Traits</h4>
                <ul>
                    <li>When you need to share functionality between unrelated classes</li>
                    <li>When you want to avoid deep inheritance hierarchies</li>
                    <li>For cross-cutting concerns like logging, caching, or validation</li>
                    <li>When you need multiple inheritance-like behavior</li>
                    <li>For utility methods that don't justify a base class</li>
                </ul>
                <p><strong>Warning:</strong> Overuse of traits can lead to "trait soup" and make code harder to understand and maintain. Use traits for well-defined, focused functionality.</p>
            </div>
        </section>

        <section id="homework">
            <h2>Homework: Extend Your Previous Class with Inheritance</h2>
            
            <p>For this assignment, you'll take the simple class you created in the previous homework and extend it using inheritance and the other OOP concepts we've covered.</p>
            
            <div class="assignment">
                <h3>Assignment Overview</h3>
                <p>Create a small application that demonstrates inheritance, method overriding, abstract classes, interfaces, and traits. The application will be a simple product management system.</p>
                
                <h4>Requirements</h4>
                <ol>
                    <li>Create an abstract <code>Product</code> base class with:
                        <ul>
                            <li>Properties for name, price, and SKU</li>
                            <li>A constructor that sets these properties</li>
                            <li>Getters and setters for each property</li>
                            <li>A concrete <code>getInfo()</code> method that returns basic product information</li>
                            <li>An abstract <code>calculateTax()</code> method</li>
                        </ul>
                    </li>
                    <li>Create at least two child classes (e.g., <code>PhysicalProduct</code> and <code>DigitalProduct</code>) that extend the <code>Product</code> class:
                        <ul>
                            <li>Each should implement the abstract <code>calculateTax()</code> method differently</li>
                            <li>Each should override the <code>getInfo()</code> method to include child-specific information</li>
                            <li>Each should have at least one unique property and method</li>
                        </ul>
                    </li>
                    <li>Create an interface <code>Discountable</code> with methods:
                        <ul>
                            <li><code>applyDiscount($percentage)</code></li>
                            <li><code>hasActiveDiscount()</code></li>
                        </ul>
                    </li>
                    <li>Create a trait <code>Loggable</code> with methods:
                        <ul>
                            <li><code>log($message)</code></li>
                            <li><code>getLogHistory()</code></li>
                        </ul>
                    </li>
                    <li>Have at least one of your product classes implement the <code>Discountable</code> interface</li>
                    <li>Apply the <code>Loggable</code> trait to your product classes</li>
                    <li>Use namespaces to organize your code:
                        <ul>
                            <li>Place abstract classes in <code>App\Abstracts</code></li>
                            <li>Place interfaces in <code>App\Interfaces</code></li>
                            <li>Place traits in <code>App\Traits</code></li>
                            <li>Place concrete classes in <code>App\Products</code></li>
                        </ul>
                    </li>
                    <li>Create a simple index.php file that demonstrates all of these concepts working together</li>
                </ol>
                
                <h4>Starter Code</h4>
                <pre>###CODE_BLOCK_48###</pre>
                
                <h4>Bonus Challenges</h4>
                <ul>
                    <li>Create a <code>ProductRepository</code> class that uses the Singleton pattern (via a trait)</li>
                    <li>Add a <code>Searchable</code> interface and implement it in your product classes</li>
                    <li>Create a product factory to instantiate different types of products</li>
                    <li>Add unit tests for your classes using PHPUnit</li>
                </ul>
            </div>
        </section>

        <section class="summary">
            <h2>Key Takeaways</h2>
            
            <div class="takeaways">
                <div class="takeaway">
                    <h3>Inheritance</h3>
                    <p>Allows classes to inherit properties and methods from parent classes, creating a hierarchy of "is-a" relationships.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Method Overriding</h3>
                    <p>Enables child classes to provide specific implementations of methods defined in parent classes.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Abstract Classes</h3>
                    <p>Create partially implemented blueprints that define a common structure for related classes.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Interfaces</h3>
                    <p>Define contracts that classes must follow, enforcing consistent method signatures across unrelated classes.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Namespaces</h3>
                    <p>Organize and group related code to prevent naming conflicts and improve maintainability.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Traits</h3>
                    <p>Enable horizontal code reuse by injecting functionality into classes without using inheritance.</p>
                </div>
            </div>
            
            <div class="next-steps">
                <h3>Next Steps</h3>
                <p>Now that you understand these advanced OOP concepts, you'll be able to create more maintainable, flexible, and professional PHP applications. In the upcoming sessions, we'll continue building on these concepts as we dive into database integration and begin working with WordPress.</p>
            </div>
        </section>

        <section class="resources">
            <h2>Additional Resources</h2>
            
            <ul>
                <li><a href="https://www.php.net/manual/en/language.oop5.php" target="_blank">PHP Official Documentation on OOP</a></li>
                <li><a href="https://phptherightway.com/#object-oriented-programming" target="_blank">PHP The Right Way - OOP Best Practices</a></li>
                <li><a href="https://developer.wordpress.org/plugins/intro/" target="_blank">WordPress Plugin Developer Handbook</a></li>
                <li><a href="https://developer.wordpress.org/themes/basics/incorporating-the-theme-options-page/" target="_blank">WordPress Theme Developer Handbook</a></li>
            </ul>
        </section>
            </div>
<!-- Lesson Navigation -->
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
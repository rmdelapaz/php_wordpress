<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>Module 2: PHP Comparison Operators - PHP WordPress Course</title>
<meta content="Use comparison operators for conditional logic." name="description"/>
<meta content="PHP, WordPress, web development, php, comparison, operators" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>

<style>
/* Global diagram and SVG styles */
.mermaid-converted,
.svg-container,
.diagram {
    margin: 1.5rem auto !important;
    padding: 1rem !important;
    text-align: center !important;
    overflow: hidden !important;
    max-width: 100% !important;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #dee2e6;
}

.mermaid-converted svg,
.svg-container svg,
.diagram svg {
    max-width: 100% !important;
    height: auto !important;
    display: block !important;
    margin: 0 auto !important;
}

/* Fix for decision diamonds */
.decision-node polygon,
polygon.decision {
    fill: #fff3cd !important;
    stroke: #856404 !important;
    stroke-width: 2px !important;
}

/* Remove excessive bottom margins */
.mermaid-converted + *,
.svg-container + *,
.diagram + * {
    margin-top: 1.5rem !important;
}

/* Center content vertically in containers */
.mermaid-converted > *,
.svg-container > *,
.diagram > * {
    vertical-align: middle;
}
</style>

</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Comparison Operators</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 2</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_arithmetic_operators.html">Arithmetic Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_assignment_operators.html">Assignment Operators</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/php_comparison_operators.html">Comparison Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_logical_operators.html">Logical Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_string_operators.html">String Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_array_operators.html">Array Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_type_operators.html">Type Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_operator_precedence.html">Operator Precedence</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_calculator.html">Homework: Calculator</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/review_php_setup.html">← Prev: Session 1: PHP Setup</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_if.html">Next: Session 3: Conditionals →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>Module 2: PHP Comparison Operators</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 30 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: PHP Operators</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP operators</li>
<li>Understand operator precedence</li>
<li>Apply operators in practical scenarios</li>
<li>Write efficient expressions</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="intro">
            <h2>Introduction to PHP Comparison Operators</h2>
            <p>Welcome to our session on PHP Comparison Operators! These operators are essential tools that allow your programs to make decisions by comparing values. Comparison operators evaluate expressions and return boolean results (true or false), which form the foundation of conditional logic in PHP.</p>
            
            <p>Think of comparison operators as the judges in your code. Just as a judge evaluates evidence and makes a decision, comparison operators evaluate values and determine whether a condition is true or false. Today, we'll explore these operators, understand how they work with different data types, and see how they're used in real-world applications.</p>
        </section>

        <section class="operators-overview">
            <h2>Comparison Operators Overview</h2>
            <p>PHP provides a comprehensive set of comparison operators that allow you to compare values in different ways:</p>
            
            <div class="svg-container" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<svg viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg" style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
                    <!-- Equal -->
                    <rect x="50" y="50" width="160" height="100" rx="10" fill="#4CAF50" />
                    <text x="130" y="100" text-anchor="middle" font-size="24" fill="white">==</text>
                    <text x="130" y="130" text-anchor="middle" font-size="16" fill="white">Equal</text>
                    
                    <!-- Identical -->
                    <rect x="230" y="50" width="160" height="100" rx="10" fill="#2196F3" />
                    <text x="310" y="100" text-anchor="middle" font-size="24" fill="white">===</text>
                    <text x="310" y="130" text-anchor="middle" font-size="16" fill="white">Identical</text>
                    
                    <!-- Not Equal -->
                    <rect x="410" y="50" width="160" height="100" rx="10" fill="#F44336" />
                    <text x="490" y="100" text-anchor="middle" font-size="24" fill="white">!=</text>
                    <text x="490" y="130" text-anchor="middle" font-size="16" fill="white">Not Equal</text>
                    
                    <!-- Not Equal (Alt) -->
                    <rect x="590" y="50" width="160" height="100" rx="10" fill="#F44336" />
                    <text x="670" y="100" text-anchor="middle" font-size="24" fill="white">&lt;&gt;</text>
                    <text x="670" y="130" text-anchor="middle" font-size="16" fill="white">Not Equal (Alt)</text>
                    
                    <!-- Not Identical -->
                    <rect x="50" y="170" width="160" height="100" rx="10" fill="#9C27B0" />
                    <text x="130" y="220" text-anchor="middle" font-size="24" fill="white">!==</text>
                    <text x="130" y="250" text-anchor="middle" font-size="16" fill="white">Not Identical</text>
                    
                    <!-- Greater Than -->
                    <rect x="230" y="170" width="160" height="100" rx="10" fill="#FF9800" />
                    <text x="310" y="220" text-anchor="middle" font-size="24" fill="white">&gt;</text>
                    <text x="310" y="250" text-anchor="middle" font-size="16" fill="white">Greater Than</text>
                    
                    <!-- Less Than -->
                    <rect x="410" y="170" width="160" height="100" rx="10" fill="#FF9800" />
                    <text x="490" y="220" text-anchor="middle" font-size="24" fill="white">&lt;</text>
                    <text x="490" y="250" text-anchor="middle" font-size="16" fill="white">Less Than</text>
                    
                    <!-- Greater Than or Equal -->
                    <rect x="590" y="170" width="160" height="100" rx="10" fill="#FF9800" />
                    <text x="670" y="220" text-anchor="middle" font-size="24" fill="white">&gt;=</text>
                    <text x="670" y="250" text-anchor="middle" font-size="16" fill="white">Greater Than or Equal</text>
                    
                    <!-- Less Than or Equal -->
                    <rect x="230" y="290" width="160" height="100" rx="10" fill="#FF9800" />
                    <text x="310" y="340" text-anchor="middle" font-size="24" fill="white">&lt;=</text>
                    <text x="310" y="370" text-anchor="middle" font-size="16" fill="white">Less Than or Equal</text>
                    
                    <!-- Spaceship -->
                    <rect x="410" y="290" width="160" height="100" rx="10" fill="#607D8B" />
                    <text x="490" y="340" text-anchor="middle" font-size="24" fill="white">&lt;=&gt;</text>
                    <text x="490" y="370" text-anchor="middle" font-size="16" fill="white">Spaceship</text>
                </svg>
</div>
            
            <div class="operators-table">
                <table>
                    <thead>
                        <tr>
                            <th>Operator</th>
                            <th>Name</th>
                            <th>Example</th>
                            <th>Result</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>==</td>
                            <td>Equal</td>
                            <td>$x == $y</td>
                            <td>True if $x is equal to $y (after type juggling)</td>
                        </tr>
                        <tr>
                            <td>===</td>
                            <td>Identical</td>
                            <td>$x === $y</td>
                            <td>True if $x is equal to $y, and they are of the same type</td>
                        </tr>
                        <tr>
                            <td>!=</td>
                            <td>Not equal</td>
                            <td>$x != $y</td>
                            <td>True if $x is not equal to $y (after type juggling)</td>
                        </tr>
                        <tr>
                            <td>&lt;&gt;</td>
                            <td>Not equal</td>
                            <td>$x &lt;&gt; $y</td>
                            <td>True if $x is not equal to $y (after type juggling)</td>
                        </tr>
                        <tr>
                            <td>!==</td>
                            <td>Not identical</td>
                            <td>$x !== $y</td>
                            <td>True if $x is not equal to $y, or they are not of the same type</td>
                        </tr>
                        <tr>
                            <td>&gt;</td>
                            <td>Greater than</td>
                            <td>$x &gt; $y</td>
                            <td>True if $x is greater than $y</td>
                        </tr>
                        <tr>
                            <td>&lt;</td>
                            <td>Less than</td>
                            <td>$x &lt; $y</td>
                            <td>True if $x is less than $y</td>
                        </tr>
                        <tr>
                            <td>&gt;=</td>
                            <td>Greater than or equal to</td>
                            <td>$x &gt;= $y</td>
                            <td>True if $x is greater than or equal to $y</td>
                        </tr>
                        <tr>
                            <td>&lt;=</td>
                            <td>Less than or equal to</td>
                            <td>$x &lt;= $y</td>
                            <td>True if $x is less than or equal to $y</td>
                        </tr>
                        <tr>
                            <td>&lt;=&gt;</td>
                            <td>Spaceship</td>
                            <td>$x &lt;=&gt; $y</td>
                            <td>Returns -1, 0, or 1 when $x is less than, equal to, or greater than $y</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <p>Now, let's explore each of these operators in detail with examples and real-world applications.</p>
        </section>

        <section class="equality-operators">
            <h2>Equality Operators</h2>
            <p>Let's start by examining the operators that check for equality or inequality between values.</p>
            
            <div class="subsection">
                <h3>Equal (==) Operator</h3>
                <p>The equal operator (==) checks if two values are equal, after type conversion (also known as type juggling). This means PHP will attempt to convert different data types to match before comparison.</p>

<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="600" fill="#fafafa" rx="8"/>
    
    <line x1="225.0" y1="200" x2="575.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="400.0" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="575.0" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="225.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="370.83333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="516.6666666666667" y1="80" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="458.33333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <line x1="516.6666666666667" y1="80" x2="575.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="545.8333333333334" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt;|No| D[&quot;Compare values directly&quot;] C </text>
    <line x1="400.0" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.0" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; F[&quot;Return boolean result&quot;] E </text>
    <rect x="223.33333333333337" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">$x == $y</text>
    <rect x="115.0" y="175" width="220" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Convert to matching types</text>
    <rect x="298.0" y="175" width="204" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Compare values directly</text>
    <rect x="469.0" y="175" width="212" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Compare converted values</text>
    <rect x="306.0" y="295" width="188" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Return boolean result</text>
    <polygon points="516.6666666666667,55.0 590.6666666666667,80.0 516.6666666666667,105.0 442.66666666666674,80.0" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Different Types?</text>
</svg>
</div>
                
                <div class="code-example">
                    <h4>Basic Equal Operator Examples</h4>
                    <pre><code>&lt;?php
// Comparing same types
$a = 5;
$b = 5;
$result = ($a == $b);
echo "5 == 5: " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true

// Comparing different types
$c = 5;
$d = "5"; // String
$result = ($c == $d);
echo "5 == \"5\": " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true

// Boolean comparison
$e = true;
$f = 1;
$result = ($e == $f);
echo "true == 1: " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true

// Comparing strings
$g = "hello";
$h = "hello";
$result = ($g == $h);
echo "\"hello\" == \"hello\": " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true

// Null and zero comparison
$i = null;
$j = 0;
$result = ($i == $j);
echo "null == 0: " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true
?&gt;</code></pre>
                </div>
                
                <p><strong>Analogy:</strong> The equal operator (==) is like comparing two dishes based only on their taste, regardless of their ingredients. If they taste the same to you, you consider them equal, even if one is made with sugar and the other with honey.</p>
            </div>
            
            <div class="subsection">
                <h3>Identical (===) Operator</h3>
                <p>The identical operator (===) is stricter than the equal operator. It returns true only if both values are equal AND they are of the same type. No type conversion is performed.</p>

<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="600" fill="#fafafa" rx="8"/>
    
    <line x1="516.6666666666667" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.00000000000006" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <line x1="516.6666666666667" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="516.6666666666667" y1="200" x2="283.33333333333337" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.00000000000006" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="516.6666666666667" y1="200" x2="516.6666666666667" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <rect x="223.33333333333337" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">$x === $y</text>
    <rect x="223.33333333333337" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Return false</text>
    <rect x="223.33333333333337" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Return true</text>
    <rect x="456.66666666666674" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Return false</text>
    <polygon points="516.6666666666667,55.0 576.6666666666667,80.0 516.6666666666667,105.0 456.66666666666674,80.0" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Same Type?</text>
    <polygon points="516.6666666666667,175.0 576.6666666666667,200.0 516.6666666666667,225.0 456.66666666666674,200.0" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Same Value?</text>
</svg>
</div>
                
                <div class="code-example">
                    <h4>Basic Identical Operator Examples</h4>
                    <pre><code>&lt;?php
// Comparing same types
$a = 5;
$b = 5;
$result = ($a === $b);
echo "5 === 5: " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true

// Comparing different types
$c = 5;
$d = "5"; // String
$result = ($c === $d);
echo "5 === \"5\": " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: false

// Boolean comparison
$e = true;
$f = 1;
$result = ($e === $f);
echo "true === 1: " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: false

// Null and zero comparison
$i = null;
$j = 0;
$result = ($i === $j);
echo "null === 0: " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: false
?&gt;</code></pre>
                </div>
                
                <p><strong>Analogy:</strong> The identical operator (===) is like comparing two dishes based on both taste AND ingredients. They must be prepared with exactly the same ingredients in the same way to be considered identical.</p>
            </div>
            
            <div class="subsection">
                <h3>Not Equal (!=, &lt;&gt;) Operators</h3>
                <p>The not equal operators (!= and &lt;&gt;) check if two values are not equal, after type conversion. These are the opposite of the == operator.</p>
                
                <div class="code-example">
                    <h4>Basic Not Equal Operator Examples</h4>
                    <pre><code>&lt;?php
// Comparing same types
$a = 5;
$b = 10;
$result = ($a != $b);
echo "5 != 10: " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true

// Alternative syntax
$result = ($a &lt;&gt; $b);
echo "5 &lt;&gt; 10: " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true

// Comparing different types
$c = 5;
$d = "5"; // String
$result = ($c != $d);
echo "5 != \"5\": " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: false (they are equal after type juggling)

// String comparison
$e = "hello";
$f = "world";
$result = ($e != $f);
echo "\"hello\" != \"world\": " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true
?&gt;</code></pre>
                </div>
                
                <p><strong>Analogy:</strong> The not equal operators (!= and &lt;&gt;) are like a taste tester who cares only about whether dishes taste different from each other, regardless of their ingredients.</p>
            </div>
            
            <div class="subsection">
                <h3>Not Identical (!==) Operator</h3>
                <p>The not identical operator (!==) is the opposite of the identical operator. It returns true if the values are not equal OR they are not of the same type.</p>
                
                <div class="code-example">
                    <h4>Basic Not Identical Operator Examples</h4>
                    <pre><code>&lt;?php
// Comparing same types with different values
$a = 5;
$b = 10;
$result = ($a !== $b);
echo "5 !== 10: " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true

// Comparing different types
$c = 5;
$d = "5"; // String
$result = ($c !== $d);
echo "5 !== \"5\": " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true

// Same value, same type
$e = "hello";
$f = "hello";
$result = ($e !== $f);
echo "\"hello\" !== \"hello\": " . ($result ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: false
?&gt;</code></pre>
                </div>
                
                <p><strong>Analogy:</strong> The not identical operator (!==) is like a chef who considers dishes different if they either taste different OR use different ingredients, even if the taste is similar.</p>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Form Validation</h3>
                <p>Equality and identity operators are commonly used in form validation to check user inputs:</p>
                
                <pre><code>&lt;?php
// Form validation using comparison operators
function validate_login($username, $password) {
    // Simulated user data from database
    $stored_user = [
        'username' => 'john_doe',
        'password' => 'secret123',
        'account_type' => 'standard',
        'is_active' => true
    ];
    
    $errors = [];
    
    // Check if username matches (case-sensitive)
    if ($username !== $stored_user['username']) {
        $errors[] = "Username does not match. Usernames are case-sensitive.";
    }
    
    // Check if password matches (case-sensitive)
    if ($password !== $stored_user['password']) {
        $errors[] = "Password is incorrect.";
    }
    
    // Check if account is active
    if ($stored_user['is_active'] !== true) {
        $errors[] = "Account is not active.";
    }
    
    return [
        'success' => empty($errors),
        'errors' => $errors
    ];
}

// Test the validation
$result = validate_login('john_doe', 'secret123');
echo "&lt;h4&gt;Login Validation&lt;/h4&gt;";
echo "Success: " . ($result['success'] ? 'Yes' : 'No') . "&lt;br&gt;";

if (!$result['success']) {
    echo "Errors:&lt;br&gt;";
    foreach ($result['errors'] as $error) {
        echo "- $error&lt;br&gt;";
    }
}

// Test with incorrect credentials
$result2 = validate_login('john_doe', 'Secret123');
echo "&lt;br&gt;With incorrect password:&lt;br&gt;";
echo "Success: " . ($result2['success'] ? 'Yes' : 'No') . "&lt;br&gt;";

if (!$result2['success']) {
    echo "Errors:&lt;br&gt;";
    foreach ($result2['errors'] as $error) {
        echo "- $error&lt;br&gt;";
    }
}
?&gt;</code></pre>
            </div>
            
            <div class="best-practices">
                <h3>Best Practices: When to Use == vs. ===</h3>
                <p>Understanding when to use loose equality (==) versus strict equality (===) is crucial for writing reliable PHP code:</p>

<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="600" fill="#fafafa" rx="8"/>
    
    <line x1="516.6666666666667" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.00000000000006" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="516.6666666666667" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <line x1="516.6666666666667" y1="200" x2="283.33333333333337" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.00000000000006" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="516.6666666666667" y1="200" x2="516.6666666666667" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <rect x="185.33333333333337" y="55" width="196" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Need to compare values</text>
    <rect x="197.33333333333337" y="175" width="172" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Use === (identical)</text>
    <rect x="217.33333333333337" y="295" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Use == (equal)</text>
    <rect x="362.66666666666674" y="295" width="308" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Convert types manually, then use ===</text>
    <polygon points="516.6666666666667,55.0 622.6666666666667,80.0 516.6666666666667,105.0 410.66666666666674,80.0" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Same data type expected?</text>
    <polygon points="516.6666666666667,175.0 634.6666666666667,200.0 516.6666666666667,225.0 398.66666666666674,200.0" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Type conversion acceptable?</text>
</svg>
</div>
                
                <ul>
                    <li><strong>Use === (identical) when:</strong>
                        <ul>
                            <li>You need to ensure both value and type match</li>
                            <li>Working with booleans, null, or strict type comparisons</li>
                            <li>Comparing return values from functions</li>
                            <li>You want to avoid unexpected type juggling</li>
                        </ul>
                    </li>
                    <li><strong>Use == (equal) when:</strong>
                        <ul>
                            <li>You explicitly want type conversion</li>
                            <li>Comparing user input against numeric values</li>
                            <li>You're certain type differences won't cause issues</li>
                        </ul>
                    </li>
                </ul>
                
                <p><strong>Recommendation:</strong> As a general practice, use === (identical) by default unless you specifically need type conversion. This helps prevent subtle bugs and makes your code more predictable.</p>
            </div>
        </section>

        <section class="relational-operators">
            <h2>Relational Operators</h2>
            <p>Relational operators compare the relative positions of values and are commonly used for numeric comparisons and sorting.</p>
            
            <div class="subsection">
                <h3>Greater Than (&gt;) and Less Than (&lt;) Operators</h3>
                <p>These operators check if one value is greater than or less than another value.</p>
                
                <div class="code-example">
                    <h4>Basic Examples</h4>
                    <pre><code>&lt;?php
// Numeric comparisons
$a = 10;
$b = 5;
echo "$a &gt; $b: " . ($a > $b ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true
echo "$a &lt; $b: " . ($a < $b ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: false

// String comparisons (based on lexicographical/dictionary order)
$name1 = "Alice";
$name2 = "Bob";
echo "\"$name1\" &lt; \"$name2\": " . ($name1 < $name2 ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true

// Case sensitivity in string comparisons
$str1 = "apple";
$str2 = "Apple";
echo "\"$str1\" &gt; \"$str2\": " . ($str1 > $str2 ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true (lowercase letters have higher ASCII values)

// Type juggling in comparisons
$num = 5;
$str = "3";
echo "$num &gt; \"$str\": " . ($num > $str ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true (string "3" is converted to number 3)
?&gt;</code></pre>
                </div>
                
                <p><strong>Analogy:</strong> Relational operators are like comparing positions on a number line or words in a dictionary. Greater than checks if a value is to the right of another on the number line, while less than checks if it's to the left.</p>
            </div>
            
            <div class="subsection">
                <h3>Greater Than or Equal (&gt;=) and Less Than or Equal (&lt;=) Operators</h3>
                <p>These operators check if one value is greater than/less than or equal to another value.</p>
                
                <div class="code-example">
                    <h4>Basic Examples</h4>
                    <pre><code>&lt;?php
// Numeric comparisons
$a = 10;
$b = 10;
$c = 5;

echo "$a &gt;= $b: " . ($a >= $b ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true (equal)
echo "$a &gt;= $c: " . ($a >= $c ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true (greater)
echo "$c &lt;= $a: " . ($c <= $a ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true (less)
echo "$b &lt;= $a: " . ($b <= $a ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true (equal)

// String comparisons
$name1 = "Alice";
$name2 = "Alice";
$name3 = "Bob";

echo "\"$name1\" &lt;= \"$name2\": " . ($name1 <= $name2 ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true (equal)
echo "\"$name1\" &lt;= \"$name3\": " . ($name1 <= $name3 ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true (less)
?&gt;</code></pre>
                </div>
                
                <p><strong>Analogy:</strong> These operators are like "inclusive" comparisons on a number line. Greater than or equal checks if a value is to the right of or at the same position as another, while less than or equal checks if it's to the left of or at the same position.</p>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Grade Calculator</h3>
                <p>Relational operators are perfect for creating tiered systems like grade calculators:</p>
                
                <pre><code>&lt;?php
function calculate_grade($score) {
    // Validate input first
    if ($score < 0 || $score > 100) {
        return "Invalid score. Please enter a value between 0 and 100.";
    }
    
    // Determine grade using relational operators
    if ($score >= 90) {
        $grade = "A";
    } elseif ($score >= 80) {
        $grade = "B";
    } elseif ($score >= 70) {
        $grade = "C";
    } elseif ($score >= 60) {
        $grade = "D";
    } else {
        $grade = "F";
    }
    
    return $grade;
}

// Test the grade calculator
echo "&lt;h4&gt;Grade Calculator&lt;/h4&gt;";
$test_scores = [95, 88, 72, 64, 45, 100, 0, -5, 105];

echo "&lt;table border='1'&gt;";
echo "&lt;tr&gt;&lt;th&gt;Score&lt;/th&gt;&lt;th&gt;Grade&lt;/th&gt;&lt;/tr&gt;";

foreach ($test_scores as $score) {
    $grade = calculate_grade($score);
    echo "&lt;tr&gt;";
    echo "&lt;td&gt;$score&lt;/td&gt;";
    echo "&lt;td&gt;$grade&lt;/td&gt;";
    echo "&lt;/tr&gt;";
}

echo "&lt;/table&gt;";
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Age Verification</h3>
                <p>Relational operators are essential for validating age requirements:</p>
                
                <pre><code>&lt;?php
function verify_age($birth_year, $current_year = null) {
    // If current year is not provided, use the current year
    if ($current_year === null) {
        $current_year = date('Y'); // Gets the current year
    }
    
    // Calculate age
    $age = $current_year - $birth_year;
    
    // Verify age for different services
    $results = [
        'age' => $age,
        'can_vote' => $age >= 18,
        'can_drink' => $age >= 21,
        'senior_discount' => $age >= 65,
        'child_price' => $age <= 12,
        'teenager' => $age >= 13 && $age <= 19
    ];
    
    return $results;
}

// Example usage
echo "&lt;h4&gt;Age Verification System&lt;/h4&gt;";

$birth_years = [2010, 2000, 1990, 1955];

foreach ($birth_years as $birth_year) {
    $results = verify_age($birth_year, 2025);
    
    echo "&lt;div class='person'&gt;";
    echo "&lt;h5&gt;Person born in $birth_year (Age: {$results['age']})&lt;/h5&gt;";
    echo "&lt;ul&gt;";
    echo "&lt;li&gt;Can vote: " . ($results['can_vote'] ? 'Yes' : 'No') . "&lt;/li&gt;";
    echo "&lt;li&gt;Can purchase alcohol: " . ($results['can_drink'] ? 'Yes' : 'No') . "&lt;/li&gt;";
    echo "&lt;li&gt;Eligible for senior discount: " . ($results['senior_discount'] ? 'Yes' : 'No') . "&lt;/li&gt;";
    echo "&lt;li&gt;Eligible for child pricing: " . ($results['child_price'] ? 'Yes' : 'No') . "&lt;/li&gt;";
    echo "&lt;li&gt;Is a teenager: " . ($results['teenager'] ? 'Yes' : 'No') . "&lt;/li&gt;";
    echo "&lt;/ul&gt;";
    echo "&lt;/div&gt;";
}
?&gt;</code></pre>
            </div>
        </section>

        <section class="spaceship-operator">
            <h2>Spaceship Operator (&lt;=&gt;)</h2>
            <p>The spaceship operator (&lt;=&gt;) is a three-way comparison operator introduced in PHP 7. It returns:</p>
            <ul>
                <li>-1 if the left operand is less than the right operand</li>
                <li>0 if the operands are equal</li>
                <li>1 if the left operand is greater than the right operand</li>
            </ul>

<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 500" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="500" fill="#fafafa" rx="8"/>
    
    <rect x="106.66666666666669" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="166.66666666666669" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">$a $b</text>
    <rect x="223.33333333333337" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Return -1</text>
    <rect x="340.0" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Return 0</text>
    <rect x="456.66666666666674" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Return 1</text>
    <polygon points="633.3333333333334,55.0 827.3333333333334,80.0 633.3333333333334,105.0 439.33333333333337,80.0" class="node-rect"/>
    <text x="633.3333333333334" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">$a |Yes| C[&quot;Return -1&quot;] B --&gt;|No| D{&quot;$a == $b?</text>
</svg>
</div>
            
            <div class="code-example">
                <h3>Basic Spaceship Operator Examples</h3>
                <pre><code>&lt;?php
// Numeric comparisons
echo "5 &lt;=&gt; 10: " . (5 &lt;=&gt; 10) . "&lt;br&gt;"; // Outputs: -1 (5 is less than 10)
echo "10 &lt;=&gt; 10: " . (10 &lt;=&gt; 10) . "&lt;br&gt;"; // Outputs: 0 (equal)
echo "10 &lt;=&gt; 5: " . (10 &lt;=&gt; 5) . "&lt;br&gt;"; // Outputs: 1 (10 is greater than 5)

// String comparisons
echo "\"apple\" &lt;=&gt; \"banana\": " . ("apple" &lt;=&gt; "banana") . "&lt;br&gt;"; // Outputs: -1
echo "\"banana\" &lt;=&gt; \"banana\": " . ("banana" &lt;=&gt; "banana") . "&lt;br&gt;"; // Outputs: 0
echo "\"cherry\" &lt;=&gt; \"banana\": " . ("cherry" &lt;=&gt; "banana") . "&lt;br&gt;"; // Outputs: 1

// Array comparisons
$arr1 = [1, 2, 3];
$arr2 = [1, 2, 4];
echo "[1, 2, 3] &lt;=&gt; [1, 2, 4]: " . ($arr1 &lt;=&gt; $arr2) . "&lt;br&gt;"; // Outputs: -1
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Custom Sorting</h3>
                <p>The spaceship operator is particularly useful for custom sorting functions:</p>
                
                <pre><code>&lt;?php
// Product class for demonstration
class Product {
    public $name;
    public $price;
    public $stock;
    
    public function __construct($name, $price, $stock) {
        $this->name = $name;
        $this->price = $price;
        $this->stock = $stock;
    }
}

// Create an array of products
$products = [
    new Product("Laptop", 899.99, 12),
    new Product("Smartphone", 699.99, 25),
    new Product("Tablet", 349.99, 8),
    new Product("Headphones", 149.99, 32),
    new Product("Monitor", 249.99, 15)
];

echo "&lt;h4&gt;Product Sorting with Spaceship Operator&lt;/h4&gt;";

// Original products
echo "&lt;h5&gt;Original Product List&lt;/h5&gt;";
display_products($products);

// Sort by price (low to high)
usort($products, function($a, $b) {
    return $a->price <=> $b->price;
});

echo "&lt;h5&gt;Sorted by Price (Low to High)&lt;/h5&gt;";
display_products($products);

// Sort by stock (high to low)
usort($products, function($a, $b) {
    return $b->stock <=> $a->stock; // Note the reversed order
});

echo "&lt;h5&gt;Sorted by Stock (High to Low)&lt;/h5&gt;";
display_products($products);

// Multi-level sort (first by stock availability, then by price)
usort($products, function($a, $b) {
    // First compare if item is in stock (stock > 0)
    $stock_comparison = ($b->stock > 0) <=> ($a->stock > 0);
    
    if ($stock_comparison !== 0) {
        return $stock_comparison;
    }
    
    // If both have same stock status, compare by price
    return $a->price <=> $b->price;
});

echo "&lt;h5&gt;Sorted by Availability, then Price&lt;/h5&gt;";
display_products($products);

// Function to display products in a table
function display_products($products) {
    echo "&lt;table border='1'&gt;";
    echo "&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;th&gt;Stock&lt;/th&gt;&lt;/tr&gt;";
    
    foreach ($products as $product) {
        echo "&lt;tr&gt;";
        echo "&lt;td&gt;{$product->name}&lt;/td&gt;";
        echo "&lt;td&gt;\${$product->price}&lt;/td&gt;";
        echo "&lt;td&gt;{$product->stock}&lt;/td&gt;";
        echo "&lt;/tr&gt;";
    }
    
    echo "&lt;/table&gt;";
}
?&gt;</code></pre>
            </div>
            
            <p><strong>Analogy:</strong> The spaceship operator is like a scale that not only tells you which item is heavier but also indicates equality. It shows whether the left side is lower (-1), balanced (0), or higher (1) than the right side.</p>
        </section>

        <section class="string-comparisons">
            <h2>String Comparison Details</h2>
            <p>When comparing strings in PHP, it's important to understand how the comparison works and the role of case sensitivity.</p>
            
            <div class="subsection">
                <h3>Case Sensitivity in String Comparisons</h3>
                <p>By default, string comparisons in PHP are case-sensitive. This means 'A' is not equal to 'a'.</p>
                
                <div class="code-example">
                    <h4>Case Sensitivity Examples</h4>
                    <pre><code>&lt;?php
// Case-sensitive comparisons
$str1 = "Hello";
$str2 = "hello";

echo "'$str1' == '$str2': " . ($str1 == $str2 ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: false
echo "'$str1' === '$str2': " . ($str1 === $str2 ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: false

// ASCII values of characters
echo "ASCII value of 'H': " . ord('H') . "&lt;br&gt;"; // Outputs: 72
echo "ASCII value of 'h': " . ord('h') . "&lt;br&gt;"; // Outputs: 104

// Comparing uppercase and lowercase
echo "'A' &lt; 'a': " . ('A' < 'a' ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true (ASCII 65 < 97)
?&gt;</code></pre>
                </div>
                
                <div class="code-example">
                    <h4>Case-Insensitive Comparison</h4>
                    <p>For case-insensitive comparisons, you can use the strcasecmp() function or convert strings to the same case before comparing.</p>
                    
                    <pre><code>&lt;?php
// Case-insensitive comparison using functions
$str1 = "Hello";
$str2 = "hello";

// Using strcasecmp() (returns 0 if strings are equal ignoring case)
$result = strcasecmp($str1, $str2);
echo "strcasecmp('$str1', '$str2'): " . $result . "&lt;br&gt;"; // Outputs: 0 (equal)

// Converting to same case before comparison
$str1_lower = strtolower($str1);
$str2_lower = strtolower($str2);
echo "strtolower('$str1') == strtolower('$str2'): " . ($str1_lower == $str2_lower ? 'true' : 'false') . "&lt;br&gt;"; // Outputs: true

// Real-world example: case-insensitive search
function contains_text($haystack, $needle, $case_sensitive = false) {
    if ($case_sensitive) {
        return strpos($haystack, $needle) !== false;
    } else {
        return stripos($haystack, $needle) !== false;
    }
}

$text = "The quick brown fox jumps over the lazy dog";
$search1 = "FOX";
$search2 = "cat";

echo "Case-insensitive search for '$search1': " . 
     (contains_text($text, $search1, false) ? 'Found' : 'Not found') . "&lt;br&gt;"; // Outputs: Found
     
echo "Case-sensitive search for '$search1': " . 
     (contains_text($text, $search1, true) ? 'Found' : 'Not found') . "&lt;br&gt;"; // Outputs: Not found
     
echo "Search for '$search2': " . 
     (contains_text($text, $search2, false) ? 'Found' : 'Not found') . "&lt;br&gt;"; // Outputs: Not found
?&gt;</code></pre>
                </div>
            </div>
            
            <div class="subsection">
                <h3>Natural Order Comparison</h3>
                <p>For comparing strings in a more "human-friendly" way, especially strings containing numbers, PHP provides the strnatcmp() and strnatcasecmp() functions.</p>
                
                <div class="code-example">
                    <h4>Natural Order Comparison Examples</h4>
                    <pre><code>&lt;?php
// Standard string comparison
$files = ["file1.txt", "file10.txt", "file2.txt", "file20.txt"];
sort($files);
echo "Standard sort:&lt;br&gt;";
echo implode("&lt;br&gt;", $files) . "&lt;br&gt;&lt;br&gt;";
// Outputs: file1.txt, file10.txt, file2.txt, file20.txt

// Natural order comparison
natsort($files);
echo "Natural sort:&lt;br&gt;";
echo implode("&lt;br&gt;", $files);
// Outputs: file1.txt, file2.txt, file10.txt, file20.txt

// Real-world example: sorting product versions
$versions = ["v1.0.9", "v1.10.0", "v1.2.1", "v2.0.0"];
echo "&lt;br&gt;&lt;br&gt;Product Versions:&lt;br&gt;";
echo "Original: " . implode(", ", $versions) . "&lt;br&gt;";

// Standard sort
$sorted = $versions;
sort($sorted);
echo "Standard sort: " . implode(", ", $sorted) . "&lt;br&gt;";
// May not give expected results

// Natural sort
$nat_sorted = $versions;
natsort($nat_sorted);
echo "Natural sort: " . implode(", ", $nat_sorted);
// Sorts in version order
?&gt;</code></pre>
                </div>
            </div>
        </section>

        <section class="type-juggling">
            <h2>Type Juggling in Comparisons</h2>
            <p>PHP's type juggling (automatic type conversion) can sometimes lead to unexpected results in comparisons. Understanding these behaviors is crucial for writing reliable code.</p>

<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 900" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="900" fill="#fafafa" rx="8"/>
    
    <line x1="400.0" y1="440" x2="575.0" y2="440" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.00000000000006" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="516.6666666666667" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <line x1="516.6666666666667" y1="200" x2="283.33333333333337" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.00000000000006" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="516.6666666666667" y1="200" x2="516.6666666666667" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <line x1="516.6666666666667" y1="320" x2="225.0" y2="440" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="370.83333333333337" y="375.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="516.6666666666667" y1="320" x2="400.0" y2="440" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="458.33333333333337" y="375.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <line x1="516.6666666666667" y1="320" x2="575.0" y2="440" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="545.8333333333334" y="375.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt;|No| H{&quot;Both are String/Object/Resource/NULL?&quot;} H </text>
    <rect x="223.33333333333337" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">$a == $b</text>
    <rect x="209.33333333333337" y="175" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Compare directly</text>
    <rect x="181.33333333333337" y="295" width="204" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Convert both to Boolean</text>
    <rect x="71.0" y="415" width="308" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="440" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Try to convert non-numeric to number</text>
    <rect x="441.0" y="415" width="268" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="440" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Apply specific conversion rules</text>
    <polygon points="516.6666666666667,55.0 576.6666666666667,80.0 516.6666666666667,105.0 456.66666666666674,80.0" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Same Type?</text>
    <polygon points="516.6666666666667,175.0 598.6666666666667,200.0 516.6666666666667,225.0 434.66666666666674,200.0" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Either is Boolean?</text>
    <polygon points="516.6666666666667,295.0 594.6666666666667,320.0 516.6666666666667,345.0 438.66666666666674,320.0" class="node-rect"/>
    <text x="516.6666666666667" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Either is Number?</text>
    <polygon points="400.0,415.0 558.0,440.0 400.0,465.0 242.0,440.0" class="node-rect"/>
    <text x="400.0" y="440" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Both are String/Object/Resource/NULL?</text>
</svg>
</div>
            
            <div class="type-juggling_table">
                <h3>Common Type Juggling Results</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Expression</th>
                            <th>Result</th>
                            <th>Explanation</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>"42" == 42</td>
                            <td>true</td>
                            <td>String "42" is converted to integer 42</td>
                        </tr>
                        <tr>
                            <td>0 == "0"</td>
                            <td>true</td>
                            <td>String "0" is converted to integer 0</td>
                        </tr>
                        <tr>
                            <td>0 == ""</td>
                            <td>true</td>
                            <td>Empty string is converted to 0</td>
                        </tr>
                        <tr>
                            <td>0 == false</td>
                            <td>true</td>
                            <td>Both are treated as "falsey" values</td>
                        </tr>
                        <tr>
                            <td>null == false</td>
                            <td>true</td>
                            <td>Both are treated as "falsey" values</td>
                        </tr>
                        <tr>
                            <td>"0" == false</td>
                            <td>true</td>
                            <td>"0" is converted to integer 0, which is falsey</td>
                        </tr>
                        <tr>
                            <td>"abc" == 0</td>
                            <td>true</td>
                            <td>Non-numeric string converts to 0</td>
                        </tr>
                        <tr>
                            <td>[] == false</td>
                            <td>true</td>
                            <td>Empty array is treated as falsey</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <div class="code-example">
                <h3>Type Juggling Examples</h3>
                <pre><code>&lt;?php
// String to number comparisons
echo "\"42\" == 42: " . ("42" == 42 ? 'true' : 'false') . "&lt;br&gt;"; // true
echo "\"42\" === 42: " . ("42" === 42 ? 'true' : 'false') . "&lt;br&gt;"; // false

// Empty values
echo "0 == \"\": " . (0 == "" ? 'true' : 'false') . "&lt;br&gt;"; // true
echo "0 === \"\": " . (0 === "" ? 'true' : 'false') . "&lt;br&gt;"; // false

// Boolean comparisons
echo "1 == true: " . (1 == true ? 'true' : 'false') . "&lt;br&gt;"; // true
echo "1 === true: " . (1 === true ? 'true' : 'false') . "&lt;br&gt;"; // false
echo "0 == false: " . (0 == false ? 'true' : 'false') . "&lt;br&gt;"; // true
echo "0 === false: " . (0 === false ? 'true' : 'false') . "&lt;br&gt;"; // false

// Null comparisons
echo "null == 0: " . (null == 0 ? 'true' : 'false') . "&lt;br&gt;"; // true
echo "null === 0: " . (null === 0 ? 'true' : 'false') . "&lt;br&gt;"; // false
echo "null == false: " . (null == false ? 'true' : 'false') . "&lt;br&gt;"; // true
echo "null === false: " . (null === false ? 'true' : 'false') . "&lt;br&gt;"; // false

// String to number conversion with non-numeric strings
echo "\"abc\" == 0: " . ("abc" == 0 ? 'true' : 'false') . "&lt;br&gt;"; // true (non-numeric string converts to 0)
echo "\"abc\" === 0: " . ("abc" === 0 ? 'true' : 'false') . "&lt;br&gt;"; // false
?&gt;</code></pre>
            </div>
            
            <div class="pitfalls">
                <h3>Common Pitfalls and How to Avoid Them</h3>
                <pre><code>&lt;?php
// Pitfall 1: Unintended equality with empty string
function get_user_input() {
    // Simulate user submitting an empty string
    return "";
}

$user_input = get_user_input();
$valid_value = 0;

// WRONG: This will evaluate to true for empty input!
if ($user_input == $valid_value) {
    echo "Pitfall 1: Input accepted (WRONG)&lt;br&gt;";
}

// CORRECT: Use strict comparison
if ($user_input === $valid_value) {
    echo "Input accepted&lt;br&gt;";
} else {
    echo "Pitfall 1 avoided: Empty input rejected (CORRECT)&lt;br&gt;";
}

// Pitfall 2: String comparison with numbers
$value = "42abc"; // Non-numeric part gets ignored in numeric context

// WRONG: Will evaluate to true!
if ($value == 42) {
    echo "Pitfall 2: Value matched (WRONG)&lt;br&gt;";
}

// CORRECT: Validate input first
if (is_numeric($value) && (int)$value === 42) {
    echo "Value matched&lt;br&gt;";
} else {
    echo "Pitfall 2 avoided: Invalid input rejected (CORRECT)&lt;br&gt;";
}

// Pitfall 3: Null equality issues
$user_id = null; // User is not logged in

// WRONG: Will accept user_id = 0, which is a valid ID!
if ($user_id == false) {
    echo "Pitfall 3: User not logged in (may be WRONG)&lt;br&gt;";
}

// CORRECT: Explicitly check for null
if ($user_id === null) {
    echo "Pitfall 3 avoided: User confirmed not logged in (CORRECT)&lt;br&gt;";
}
?&gt;</code></pre>
            </div>
        </section>

        <section class="combined-comparisons">
            <h2>Complex Comparison Expressions</h2>
            <p>In real-world scenarios, you'll often need to combine multiple comparison operators with logical operators (AND, OR, NOT) to create complex conditions.</p>
            
            <div class="code-example">
                <h3>Combining Comparison Operators</h3>
                <pre><code>&lt;?php
// Checking a value is within a range (between 1 and 100)
$value = 42;
$in_range = ($value >= 1 && $value <= 100);
echo "Is $value between 1 and 100? " . ($in_range ? 'Yes' : 'No') . "&lt;br&gt;";

// Checking multiple conditions with OR
$status = "active";
$role = "admin";
$has_access = ($status === "active" && ($role === "admin" || $role === "manager"));
echo "Has access? " . ($has_access ? 'Yes' : 'No') . "&lt;br&gt;";

// Checking a value matches one of several options
$fruit = "apple";
$is_valid_fruit = ($fruit === "apple" || $fruit === "orange" || $fruit === "banana");
echo "Is $fruit a valid option? " . ($is_valid_fruit ? 'Yes' : 'No') . "&lt;br&gt;";

// Alternative using in_array()
$valid_fruits = ["apple", "orange", "banana"];
$is_valid = in_array($fruit, $valid_fruits, true); // true enables strict comparison
echo "Is $fruit a valid option? " . ($is_valid ? 'Yes' : 'No') . "&lt;br&gt;";
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Product Filtering System</h3>
                <p>Complex comparisons are essential for filtering systems:</p>
                
                <pre><code>&lt;?php
// Product filtering system
function filter_products($products, $filters) {
    $filtered_products = [];
    
    foreach ($products as $product) {
        $matches_all_criteria = true;
        
        // Check price range
        if (isset($filters['min_price']) && $product['price'] < $filters['min_price']) {
            $matches_all_criteria = false;
        }
        
        if (isset($filters['max_price']) && $product['price'] > $filters['max_price']) {
            $matches_all_criteria = false;
        }
        
        // Check category
        if (isset($filters['category']) && $product['category'] !== $filters['category']) {
            $matches_all_criteria = false;
        }
        
        // Check availability
        if (isset($filters['in_stock']) && $filters['in_stock'] && $product['stock'] <= 0) {
            $matches_all_criteria = false;
        }
        
        // Check rating
        if (isset($filters['min_rating']) && $product['rating'] < $filters['min_rating']) {
            $matches_all_criteria = false;
        }
        
        // If product matches all criteria, add to filtered results
        if ($matches_all_criteria) {
            $filtered_products[] = $product;
        }
    }
    
    return $filtered_products;
}

// Sample product data
$products = [
    [
        'id' => 1,
        'name' => 'Smartphone X',
        'price' => 699.99,
        'category' => 'electronics',
        'stock' => 15,
        'rating' => 4.5
    ],
    [
        'id' => 2,
        'name' => 'Wireless Headphones',
        'price' => 149.99,
        'category' => 'electronics',
        'stock' => 8,
        'rating' => 4.2
    ],
    [
        'id' => 3,
        'name' => 'Running Shoes',
        'price' => 89.99,
        'category' => 'sports',
        'stock' => 0,
        'rating' => 4.7
    ],
    [
        'id' => 4,
        'name' => 'Coffee Maker',
        'price' => 129.99,
        'category' => 'home',
        'stock' => 12,
        'rating' => 3.8
    ],
    [
        'id' => 5,
        'name' => 'Fitness Tracker',
        'price' => 79.99,
        'category' => 'electronics',
        'stock' => 22,
        'rating' => 4.0
    ]
];

// Example filters
$filters = [
    'min_price' => 100,
    'max_price' => 500,
    'category' => 'electronics',
    'in_stock' => true,
    'min_rating' => 4.0
];

$filtered_results = filter_products($products, $filters);

echo "&lt;h4&gt;Product Filtering System&lt;/h4&gt;";
echo "&lt;h5&gt;Applied Filters:&lt;/h5&gt;";
echo "&lt;ul&gt;";
echo "&lt;li&gt;Price: $" . $filters['min_price'] . " - $" . $filters['max_price'] . "&lt;/li&gt;";
echo "&lt;li&gt;Category: " . ucfirst($filters['category']) . "&lt;/li&gt;";
echo "&lt;li&gt;In Stock: " . ($filters['in_stock'] ? 'Yes' : 'No') . "&lt;/li&gt;";
echo "&lt;li&gt;Minimum Rating: " . $filters['min_rating'] . "&lt;/li&gt;";
echo "&lt;/ul&gt;";

echo "&lt;h5&gt;Filtered Results:&lt;/h5&gt;";

if (empty($filtered_results)) {
    echo "No products match your criteria.";
} else {
    echo "&lt;table border='1'&gt;";
    echo "&lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;th&gt;Category&lt;/th&gt;&lt;th&gt;Stock&lt;/th&gt;&lt;th&gt;Rating&lt;/th&gt;&lt;/tr&gt;";
    
    foreach ($filtered_results as $product) {
        echo "&lt;tr&gt;";
        echo "&lt;td&gt;{$product['id']}&lt;/td&gt;";
        echo "&lt;td&gt;{$product['name']}&lt;/td&gt;";
        echo "&lt;td&gt;${$product['price']}&lt;/td&gt;";
        echo "&lt;td&gt;" . ucfirst($product['category']) . "&lt;/td&gt;";
        echo "&lt;td&gt;{$product['stock']}&lt;/td&gt;";
        echo "&lt;td&gt;{$product['rating']}&lt;/td&gt;";
        echo "&lt;/tr&gt;";
    }
    
    echo "&lt;/table&gt;";
}
?&gt;</code></pre>
            </div>
        </section>

        <section class="conditional-expressions">
            <h2>Conditional Expressions and Ternary Operator</h2>
            <p>Comparison operators are often used with conditional expressions, including the ternary operator which provides a shorthand way to write if-else statements.</p>
            
            <div class="code-example">
                <h3>Ternary Operator Syntax</h3>
                <pre><code>&lt;?php
// Basic ternary operator syntax
// condition ? value_if_true : value_if_false

$age = 25;
$status = ($age >= 18) ? 'adult' : 'minor';
echo "A person aged $age is considered an $status.&lt;br&gt;";

// Nested ternary operators (use with caution for readability)
$score = 85;
$grade = ($score >= 90) ? 'A' : (($score >= 80) ? 'B' : (($score >= 70) ? 'C' : (($score >= 60) ? 'D' : 'F')));
echo "A score of $score gets a grade of $grade.&lt;br&gt;";

// Shorthand ternary operator (Elvis operator)
// expr1 ?: expr3 (returns expr1 if it evaluates to TRUE, expr3 otherwise)
$username = "";
$display_name = $username ?: "Guest";
echo "Welcome, $display_name!&lt;br&gt;";

// NULL coalescing operator
// expr1 ?? expr2 (returns expr1 if it exists and is not NULL, expr2 otherwise)
$user_color = null;
$default_color = "blue";
$theme_color = $user_color ?? $default_color;
echo "Theme color: $theme_color&lt;br&gt;";
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Dynamic User Interface Elements</h3>
                <p>Conditionals and comparison operators are essential for creating dynamic UI elements:</p>
                
                <pre><code>&lt;?php
// Simulate user data
$user = [
    'logged_in' => true,
    'username' => 'john_doe',
    'role' => 'editor',
    'theme' => null,
    'notifications' => 3,
    'subscription' => 'premium',
    'last_login' => '2025-03-15'
];

// Generate UI elements based on user data
echo "&lt;h4&gt;Dynamic User Interface Elements&lt;/h4&gt;";

// Login/Logout button using ternary
$login_button = $user['logged_in'] 
    ? "&lt;button&gt;Logout ({$user['username']})&lt;/button&gt;" 
    : "&lt;button&gt;Login&lt;/button&gt;";
echo "Navigation: $login_button&lt;br&gt;&lt;br&gt;";

// Welcome message using null coalescing
$display_name = $user['username'] ?? 'Guest';
echo "Welcome, $display_name!&lt;br&gt;&lt;br&gt;";

// Notification badge
$notification_badge = $user['notifications'] > 0 
    ? "&lt;span class='badge'&gt;{$user['notifications']}&lt;/span&gt;" 
    : "";
echo "Notifications: $notification_badge&lt;br&gt;&lt;br&gt;";

// Admin panel access
$admin_access = $user['role'] === 'admin' ? true : false;
echo "Admin Panel: " . ($admin_access ? "Visible" : "Hidden") . "&lt;br&gt;&lt;br&gt;";

// Feature access based on subscription
$features_available = $user['subscription'] === 'premium' ? "Full" : "Limited";
echo "Features Available: $features_available&lt;br&gt;&lt;br&gt;";

// Theme selection with fallback
$theme = $user['theme'] ?? 'default';
echo "Active Theme: $theme&lt;br&gt;&lt;br&gt;";

// User status (active/inactive)
$last_login_timestamp = strtotime($user['last_login']);
$current_timestamp = time();
$days_since_login = floor(($current_timestamp - $last_login_timestamp) / (60 * 60 * 24));
$user_status = $days_since_login < 30 ? 'active' : 'inactive';
echo "Account Status: $user_status (Last login: $days_since_login days ago)";
?&gt;</code></pre>
            </div>
        </section>

        <section class="best-practices">
            <h2>Best Practices for Using Comparison Operators</h2>
            <ul>
                <li><strong>Use === and !== by default:</strong> Strict equality operators prevent unexpected type juggling issues.</li>
                <li><strong>Be explicit with your intentions:</strong> Use parentheses to group complex conditions for clarity and to control operator precedence.</li>
                <li><strong>Validate user input:</strong> Always validate and sanitize user input before comparing it to expected values.</li>
                <li><strong>Check for null separately:</strong> Use === null explicitly when checking for null values rather than == false.</li>
                <li><strong>Understand string comparison rules:</strong> Remember that string comparisons are case-sensitive and based on ASCII/Unicode values.</li>
                <li><strong>Use appropriate functions:</strong> For special comparison needs, use built-in functions like strcasecmp(), in_array(), or version_compare().</li>
                <li><strong>Avoid nested ternary operators:</strong> They can be difficult to read and understand, so use them sparingly.</li>
            </ul>
            
            <div class="code-example">
                <h3>Best Practices Example</h3>
                <pre><code>&lt;?php
// GOOD: Clear, explicit comparisons
function validate_user_credentials($username, $password, $remember = false) {
    // Strict comparison for strings
    if ($username === "" || $password === "") {
        return [
            'success' => false,
            'message' => 'Username and password are required'
        ];
    }
    
    // Explicitly check type and value for boolean
    if ($remember !== true && $remember !== false) {
        $remember = false; // Default to false for safety
    }
    
    // Use parentheses for clarity in complex conditions
    if ((strlen($username) < 3 || strlen($username) > 20) || 
        (strlen($password) < 8)) {
        return [
            'success' => false,
            'message' => 'Invalid credentials format'
        ];
    }
    
    // Rest of the validation logic...
    return [
        'success' => true,
        'message' => 'Validation successful',
        'remember' => $remember
    ];
}

// Test the validation
$result = validate_user_credentials("johndoe", "password123", true);
echo "Validation result: " . ($result['success'] ? "Success" : "Failed") . "&lt;br&gt;";
echo "Message: " . $result['message'] . "&lt;br&gt;";
?&gt;</code></pre>
            </div>
        </section>

        <section class="practice-exercises">
            <h2>Practice Exercises</h2>
            <p>Test your understanding of PHP comparison operators with these exercises:</p>
            
            <div class="exercise">
                <h3>Exercise 1: Comparison Operator Exploration</h3>
                <p>Create a PHP script that demonstrates the difference between == and === by comparing various values. Include examples with strings, numbers, booleans, and null.</p>
                <pre><code>&lt;?php
/*
 * 1. Compare a string "42" with integer 42 using both == and ===
 * 2. Compare boolean true with integer 1 using both == and ===
 * 3. Compare null with integer 0 using both == and ===
 * 4. Compare empty string "" with boolean false using both == and ===
 * 5. Display the results in a table format
 */
?&gt;</code></pre>
            </div>
            
            <div class="exercise">
                <h3>Exercise 2: Age Group Classifier</h3>
                <p>Create a PHP function that classifies a person into different age groups using comparison operators.</p>
                <pre><code>&lt;?php
/*
 * 1. Create a function classify_age_group($age) that returns a string representing the age group
 * 2. Use these age ranges:
 *    - "Infant": 0-1 years
 *    - "Toddler": 2-4 years
 *    - "Child": 5-12 years
 *    - "Teenager": 13-19 years
 *    - "Young Adult": 20-35 years
 *    - "Adult": 36-65 years
 *    - "Senior": 66+ years
 * 3. Test your function with various ages and display the results
 */
?&gt;</code></pre>
            </div>
            
            <div class="exercise">
                <h3>Exercise 3: Password Strength Checker</h3>
                <p>Create a PHP function that evaluates password strength using multiple comparison operators and conditional logic.</p>
                <pre><code>&lt;?php
/*
 * 1. Create a function check_password_strength($password) that returns "Weak", "Medium", or "Strong"
 * 2. Use these criteria:
 *    - Weak: Less than 8 characters OR only letters/only numbers
 *    - Medium: At least 8 characters AND contains both letters and numbers
 *    - Strong: At least 10 characters AND contains letters, numbers, and special characters
 * 3. Use functions like strlen(), preg_match() to check the password
 * 4. Test your function with various passwords and display the results
 */
?&gt;</code></pre>
            </div>
        </section>

        <section class="summary">
            <h2>Summary</h2>
            <p>In this session, we've explored PHP's comparison operators and their practical applications:</p>
            
            <ul>
                <li><strong>Equality Operators:</strong> == (equal), === (identical), != and &lt;&gt; (not equal), !== (not identical)</li>
                <li><strong>Relational Operators:</strong> &gt; (greater than), &lt; (less than), &gt;= (greater than or equal), &lt;= (less than or equal)</li>
                <li><strong>Spaceship Operator:</strong> &lt;=&gt; (combined comparison)</li>
            </ul>
            
            <p>We've also covered important concepts like:</p>
            
            <ul>
                <li><strong>Type Juggling:</strong> How PHP automatically converts between types during loose comparisons</li>
                <li><strong>String Comparisons:</strong> Case sensitivity, natural order sorting, and how strings are compared</li>
                <li><strong>Conditional Expressions:</strong> Using comparison operators with ternary operators and conditional statements</li>
                <li><strong>Best Practices:</strong> Guidelines for using comparison operators effectively and avoiding common pitfalls</li>
            </ul>
            
            <p>Understanding comparison operators is fundamental to PHP programming as they form the basis of decision-making in your code. Mastering these operators and being aware of their behaviors, especially regarding type juggling, will help you write more reliable and predictable code.</p>
        </section>

        <section class="next-session">
            <h2>Next Session Preview</h2>
            <p>In our next session, we'll explore PHP Logical Operators, which allow you to combine multiple conditions and create complex decision structures. We'll learn about operators like AND, OR, XOR, and NOT, which work alongside comparison operators to create sophisticated control flows in your PHP applications.</p>
        </section>

        <section class="additional-resources">
            <h2>Additional Resources</h2>
            <ul>
                <li><a href="https://www.php.net/manual/en/language.operators.comparison.php" target="_blank">PHP Manual: Comparison Operators</a></li>
                <li><a href="https://www.php.net/manual/en/types.comparisons.php" target="_blank">PHP Manual: Type Comparisons</a></li>
                <li><a href="https://www.php.net/manual/en/function.strcmp.php" target="_blank">PHP Manual: strcmp() Function</a></li>
                <li><a href="https://www.php.net/manual/en/function.version-compare.php" target="_blank">PHP Manual: version_compare() Function</a></li>
            </ul>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 2 24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
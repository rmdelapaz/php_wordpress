<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>Create a Simple Class with Properties and Methods - PHP WordPress Course</title>
<meta content="Build your first PHP class." name="description"/>
<meta content="PHP, WordPress, web development, homework:, create, simple, class" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">Homework: Create Simple Class</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 8</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_oop_concepts.html">OOP Concepts</a></li>
<li><a class="sidebar-link" href="/02module/php_creating_classes_and instantiating_objects.html">Classes &amp; Objects</a></li>
<li><a class="sidebar-link" href="/02module/php_constructor_and_destructor.html">Constructor &amp; Destructor</a></li>
<li><a class="sidebar-link" href="/02module/php_access_modifiers.html">Access Modifiers</a></li>
<li><a class="sidebar-link" href="/02module/php_this_keyword.html">The $this Keyword</a></li>
<li><a class="sidebar-link" href="/02module/php_static_properties_and_methods.html">Static Properties</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/homework_php_create_simple_class.html">Homework: Classes</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_html_forms_review.html">← Prev: Session 7: Forms</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_inheritance.html">Next: Session 9: Advanced OOP →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>Create a Simple Class with Properties and Methods</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 60 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: Object-Oriented PHP</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Understand OOP principles in PHP</li>
<li>Create and use classes and objects</li>
<li>Implement inheritance and polymorphism</li>
<li>Apply OOP best practices</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="introduction">
            <h2>What We're Building</h2>
            <p>Welcome to our tutorial on creating a simple class with properties and methods! In this session, we'll implement the assigned homework by building a <code>Product</code> class that could be used in an e-commerce WordPress website or plugin. This class will demonstrate the fundamental concepts of Object-Oriented Programming (OOP) that we've been learning: properties, methods, constructors, and more.</p>
            
            <p>By the end of this tutorial, you'll have created a fully functional class that can be used to represent products in a store, complete with properties to store product information and methods to perform common operations.</p>
        </section>

        <section class="problem-understanding">
            <h2>Understanding the Problem</h2>
            <p>Our homework assignment is to create a simple class with properties and methods. Let's break down what this means:</p>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
    
    <!-- Background -->
    <rect x="0" y="0" width="600" height="300" rx="8" fill="#f3e5f5" 
          stroke="#7b1fa2" stroke-width="2"/>
    
    <!-- Icon -->
    <g transform="translate(300, 100)">
        <rect x="-40" y="-30" width="80" height="60" rx="5" 
              fill="white" stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="-10" x2="20" y2="-10" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="0" x2="20" y2="0" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="10" x2="20" y2="10" 
              stroke="#7b1fa2" stroke-width="2"/>
    </g>
    
    <!-- Text -->
    <text x="300" y="180" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="18" 
          fill="#4a148c" font-weight="bold">
        Class Diagram
    </text>
    
    <text x="300" y="210" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="14" 
          fill="#4a148c" opacity="0.8">
        (Diagram converted to static representation)
    </text>
    
    <!-- Original content hint -->
    <text x="300" y="240" text-anchor="middle" 
          font-family="monospace" font-size="10" 
          fill="#4a148c" opacity="0.5">
        classDiagram class Product { +Properties +Methods ...
    </text>
</svg>
</div>
            
            <p>We need to create a class that:</p>
            <ul>
                <li>Has several properties to store information about products</li>
                <li>Includes a constructor to initialize those properties</li>
                <li>Provides methods to perform operations on products</li>
                <li>Incorporates different types of access modifiers (public, protected, private)</li>
            </ul>
            
            <p>For our e-commerce context, we'll need properties to store product details like ID, name, price, etc., and methods to perform operations like checking stock, updating prices, etc.</p>
        </section>

        <section class="solution-plan">
            <h2>Planning the Solution</h2>
            <p>Using George Polya's 4-step problem-solving method, let's develop a plan for our class:</p>
            
            <h3>Step 1: Understand the Problem</h3>
            <p>We need to create a <code>Product</code> class with:</p>
            <ul>
                <li>Properties to store product information</li>
                <li>Constructor to initialize these properties</li>
                <li>Methods to perform operations on the products</li>
                <li>Different access modifiers for encapsulation</li>
            </ul>
            
            <h3>Step 2: Devise a Plan</h3>
            <p>Here's our simplified whiteboard plan:</p>
            <ol>
                <li>Define the class name and its properties with appropriate access modifiers</li>
                <li>Create a constructor to initialize the properties</li>
                <li>Implement getter and setter methods for accessing private properties</li>
                <li>Add methods for common product operations (check stock, update price, etc.)</li>
                <li>Implement a method to display product information</li>
                <li>Create example usage code to demonstrate the class</li>
            </ol>
            
            <h3>Step 3: Implement the Solution</h3>
            <p>We'll implement the solution according to our plan, creating a <code>Product</code> class with all the necessary components.</p>
            
            <h3>Step 4: Review and Refine</h3>
            <p>After implementation, we'll test the class, verify that it works as expected, and refine it if necessary.</p>
            
            <div class="svg-container">
                <svg width="800" height="400" viewBox="0 0 800 400">
                    <!-- Background -->
                    <rect x="0" y="0" width="800" height="400" fill="#f8f9fa" />
                    
                    <!-- Class box -->
                    <rect x="250" y="50" width="300" height="300" rx="10" ry="10" fill="#e6f7ff" stroke="#1890ff" stroke-width="2" />
                    <text x="400" y="80" font-family="Arial" font-size="18" text-anchor="middle" font-weight="bold" fill="#333333">Product Class</text>
                    
                    <!-- Properties section -->
                    <rect x="270" y="100" width="260" height="100" rx="5" ry="5" fill="#ffffff" stroke="#1890ff" stroke-width="1" />
                    <text x="400" y="120" font-family="Arial" font-size="14" text-anchor="middle" font-weight="bold" fill="#333333">Properties</text>
                    
                    <text x="290" y="140" font-family="Arial" font-size="12" fill="#333333">- private $id</text>
                    <text x="290" y="160" font-family="Arial" font-size="12" fill="#333333">- private $name</text>
                    <text x="290" y="180" font-family="Arial" font-size="12" fill="#333333">- private $price</text>
                    
                    <text x="450" y="140" font-family="Arial" font-size="12" fill="#333333">- private $description</text>
                    <text x="450" y="160" font-family="Arial" font-size="12" fill="#333333">- private $stockQuantity</text>
                    <text x="450" y="180" font-family="Arial" font-size="12" fill="#333333">- protected $category</text>
                    
                    <!-- Methods section -->
                    <rect x="270" y="210" width="260" height="120" rx="5" ry="5" fill="#ffffff" stroke="#1890ff" stroke-width="1" />
                    <text x="400" y="230" font-family="Arial" font-size="14" text-anchor="middle" font-weight="bold" fill="#333333">Methods</text>
                    
                    <text x="290" y="250" font-family="Arial" font-size="12" fill="#333333">+ __construct()</text>
                    <text x="290" y="270" font-family="Arial" font-size="12" fill="#333333">+ getInfo()</text>
                    <text x="290" y="290" font-family="Arial" font-size="12" fill="#333333">+ updatePrice()</text>
                    
                    <text x="450" y="250" font-family="Arial" font-size="12" fill="#333333">+ reduceStock()</text>
                    <text x="450" y="270" font-family="Arial" font-size="12" fill="#333333">+ isInStock()</text>
                    <text x="450" y="290" font-family="Arial" font-size="12" fill="#333333">- calculateDiscount()</text>
                    
                    <!-- Arrows pointing to external elements -->
                    <path d="M 100,150 L 250,150" stroke="#333333" stroke-width="2" marker-end="url(#arrowhead)" />
                    <text x="110" y="130" font-family="Arial" font-size="14" fill="#333333">Private properties</text>
                    <text x="110" y="145" font-family="Arial" font-size="12" fill="#333333">Not accessible from outside</text>
                    
                    <path d="M 100,270 L 250,270" stroke="#333333" stroke-width="2" marker-end="url(#arrowhead)" />
                    <text x="110" y="250" font-family="Arial" font-size="14" fill="#333333">Public methods</text>
                    <text x="110" y="265" font-family="Arial" font-size="12" fill="#333333">Accessible from anywhere</text>
                    
                    <path d="M 700,150 L 550,150" stroke="#333333" stroke-width="2" marker-end="url(#arrowhead)" />
                    <text x="610" y="130" font-family="Arial" font-size="14" fill="#333333">Protected properties</text>
                    <text x="610" y="145" font-family="Arial" font-size="12" fill="#333333">Accessible in child classes</text>
                    
                    <path d="M 700,270 L 550,270" stroke="#333333" stroke-width="2" marker-end="url(#arrowhead)" />
                    <text x="610" y="250" font-family="Arial" font-size="14" fill="#333333">Private methods</text>
                    <text x="610" y="265" font-family="Arial" font-size="12" fill="#333333">Internal use only</text>
                    
                    <!-- Arrow marker definition -->
                    <defs>
                        <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                            <polygon points="0 0, 10 3.5, 0 7" fill="#333333" />
                        </marker>
                    </defs>
                </svg>
            </div>
        </section>

        <section class="implementation">
            <h2>Implementing the Solution</h2>
            
            <h3>Basic Solution</h3>
            <p>Let's start with a basic implementation of our <code>Product</code> class:</p>
            
            <pre><code>&lt;?php
/**
 * Product class for e-commerce applications
 * 
 * This class represents a product in an online store with
 * properties to store product details and methods to
 * perform common operations.
 */
class Product {
    // Private properties - can only be accessed within this class
    private $id;
    private $name;
    private $price;
    private $description;
    private $stockQuantity;
    
    // Protected property - can be accessed in this class and child classes
    protected $category;
    
    /**
     * Constructor - initializes the product
     * 
     * @param int $id Product ID
     * @param string $name Product name
     * @param float $price Product price
     * @param string $description Product description
     * @param int $stockQuantity Quantity in stock
     * @param string $category Product category
     */
    public function __construct($id, $name, $price, $description, $stockQuantity, $category = 'Uncategorized') {
        // Initialize properties
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
        $this->description = $description;
        $this->stockQuantity = $stockQuantity;
        $this->category = $category;
    }
    
    /**
     * Get product information as an array
     * 
     * @return array Product details
     */
    public function getInfo() {
        return [
            'id' => $this->id,
            'name' => $this->name,
            'price' => $this->price,
            'description' => $this->description,
            'stock_quantity' => $this->stockQuantity,
            'category' => $this->category,
            'in_stock' => $this->isInStock()
        ];
    }
    
    /**
     * Update the product price
     * 
     * @param float $newPrice New price
     * @return boolean Success status
     */
    public function updatePrice($newPrice) {
        // Validate the new price
        if ($newPrice >= 0) {
            $this->price = $newPrice;
            return true;
        }
        
        return false;
    }
    
    /**
     * Reduce the stock quantity
     * 
     * @param int $quantity Quantity to reduce by
     * @return boolean Success status
     */
    public function reduceStock($quantity = 1) {
        // Check if we have enough stock
        if ($this->stockQuantity >= $quantity) {
            $this->stockQuantity -= $quantity;
            return true;
        }
        
        return false;
    }
    
    /**
     * Check if the product is in stock
     * 
     * @return boolean In stock status
     */
    public function isInStock() {
        return $this->stockQuantity > 0;
    }
    
    /**
     * Calculate discount price
     * 
     * @param float $percentage Discount percentage
     * @return float Discounted price
     */
    private function calculateDiscount($percentage) {
        $discount = $this->price * ($percentage / 100);
        return $this->price - $discount;
    }
    
    /**
     * Apply a discount to the product
     * 
     * @param float $percentage Discount percentage
     * @return boolean Success status
     */
    public function applyDiscount($percentage) {
        if ($percentage > 0 && $percentage <= 100) {
            $newPrice = $this->calculateDiscount($percentage);
            return $this->updatePrice($newPrice);
        }
        
        return false;
    }
    
    // Getter methods
    
    /**
     * Get product ID
     * 
     * @return int Product ID
     */
    public function getId() {
        return $this->id;
    }
    
    /**
     * Get product name
     * 
     * @return string Product name
     */
    public function getName() {
        return $this->name;
    }
    
    /**
     * Get product price
     * 
     * @return float Product price
     */
    public function getPrice() {
        return $this->price;
    }
    
    /**
     * Get product description
     * 
     * @return string Product description
     */
    public function getDescription() {
        return $this->description;
    }
    
    /**
     * Get stock quantity
     * 
     * @return int Stock quantity
     */
    public function getStockQuantity() {
        return $this->stockQuantity;
    }
    
    /**
     * Get product category
     * 
     * @return string Product category
     */
    public function getCategory() {
        return $this->category;
    }
    
    // Setter methods
    
    /**
     * Set product name
     * 
     * @param string $name New product name
     */
    public function setName($name) {
        $this->name = $name;
    }
    
    /**
     * Set product description
     * 
     * @param string $description New product description
     */
    public function setDescription($description) {
        $this->description = $description;
    }
    
    /**
     * Set product category
     * 
     * @param string $category New product category
     */
    public function setCategory($category) {
        $this->category = $category;
    }
}
?&gt;</code></pre>

            <h3>Example Usage</h3>
            <p>Now let's see how to use our <code>Product</code> class:</p>
            
            <pre><code>&lt;?php
// Include the Product class
require_once 'class-product.php';

// Create a new product
$laptop = new Product(
    1,                                          // ID
    'MacBook Pro',                              // Name
    1299.99,                                    // Price
    'Powerful laptop for developers',            // Description
    10,                                         // Stock quantity
    'Electronics'                               // Category
);

// Display product information
echo "&lt;h2&gt;Product Information&lt;/h2&gt;";
echo "&lt;pre&gt;";
print_r($laptop->getInfo());
echo "&lt;/pre&gt;";

// Check if product is in stock
if ($laptop->isInStock()) {
    echo "&lt;p&gt;The {$laptop->getName()} is in stock with {$laptop->getStockQuantity()} units available.&lt;/p&gt;";
} else {
    echo "&lt;p&gt;The {$laptop->getName()} is out of stock.&lt;/p&gt;";
}

// Apply a 10% discount
$laptop->applyDiscount(10);

// Show the new price
echo "&lt;p&gt;After 10% discount, the price is $" . number_format($laptop->getPrice(), 2) . "&lt;/p&gt;";

// Simulate a purchase
echo "&lt;p&gt;Processing purchase...&lt;/p&gt;";
if ($laptop->reduceStock(2)) {
    echo "&lt;p&gt;Purchase successful! Remaining stock: {$laptop->getStockQuantity()}&lt;/p&gt;";
} else {
    echo "&lt;p&gt;Purchase failed! Not enough stock.&lt;/p&gt;";
}

// Update product information
$laptop->setName('MacBook Pro M3');
$laptop->setDescription('Latest model with M3 chip');

// Display updated information
echo "&lt;h2&gt;Updated Product Information&lt;/h2&gt;";
echo "&lt;pre&gt;";
print_r($laptop->getInfo());
echo "&lt;/pre&gt;";
?&gt;</code></pre>

            <p>This example demonstrates:</p>
            <ul>
                <li>Creating a new product object</li>
                <li>Getting product information</li>
                <li>Checking if the product is in stock</li>
                <li>Applying a discount</li>
                <li>Reducing stock (simulating a purchase)</li>
                <li>Updating product information</li>
            </ul>
        </section>

        <section class="advanced-solution">
            <h2>Advanced Solution: Adding More Features</h2>
            <p>Now let's enhance our <code>Product</code> class with more advanced features, such as:</p>
            <ul>
                <li>Product validation</li>
                <li>Method chaining</li>
                <li>Static properties and methods</li>
            </ul>
            
            <pre><code>&lt;?php
/**
 * Enhanced Product class for e-commerce applications
 * 
 * An advanced implementation with additional features like
 * product validation, method chaining, and static methods.
 */
class Product {
    // Private properties
    private $id;
    private $name;
    private $price;
    private $description;
    private $stockQuantity;
    protected $category;
    
    // Static properties
    private static $totalProducts = 0;
    private static $validCategories = [
        'Electronics',
        'Clothing',
        'Books',
        'Home',
        'Beauty',
        'Sports',
        'Toys',
        'Food',
        'Other'
    ];
    
    /**
     * Constructor - initializes the product
     * 
     * @param int $id Product ID
     * @param string $name Product name
     * @param float $price Product price
     * @param string $description Product description
     * @param int $stockQuantity Quantity in stock
     * @param string $category Product category
     */
    public function __construct($id, $name, $price, $description, $stockQuantity, $category = 'Other') {
        // Validate inputs
        $this->id = intval($id);
        $this->name = $this->validateName($name) ? $name : 'Unknown Product';
        $this->price = max(0, floatval($price));
        $this->description = $description;
        $this->stockQuantity = max(0, intval($stockQuantity));
        $this->category = $this->validateCategory($category) ? $category : 'Other';
        
        // Increment total products counter
        self::$totalProducts++;
    }
    
    /**
     * Destructor
     */
    public function __destruct() {
        // Decrement counter when object is destroyed
        self::$totalProducts--;
    }
    
    /**
     * Validate product name
     * 
     * @param string $name Name to validate
     * @return boolean Validation result
     */
    private function validateName($name) {
        return !empty($name) && strlen($name) <= 100;
    }
    
    /**
     * Validate product category
     * 
     * @param string $category Category to validate
     * @return boolean Validation result
     */
    private function validateCategory($category) {
        return in_array($category, self::$validCategories);
    }
    
    /**
     * Get total number of product objects
     * 
     * @return int Total products
     */
    public static function getTotalProducts() {
        return self::$totalProducts;
    }
    
    /**
     * Get valid categories
     * 
     * @return array Valid categories
     */
    public static function getValidCategories() {
        return self::$validCategories;
    }
    
    /**
     * Add a new valid category
     * 
     * @param string $category New category
     * @return boolean Success status
     */
    public static function addValidCategory($category) {
        if (!empty($category) && !in_array($category, self::$validCategories)) {
            self::$validCategories[] = $category;
            return true;
        }
        
        return false;
    }
    
    /**
     * Get product information as an array
     * 
     * @return array Product details
     */
    public function getInfo() {
        return [
            'id' => $this->id,
            'name' => $this->name,
            'price' => $this->price,
            'description' => $this->description,
            'stock_quantity' => $this->stockQuantity,
            'category' => $this->category,
            'in_stock' => $this->isInStock()
        ];
    }
    
    /**
     * Update the product price with method chaining
     * 
     * @param float $newPrice New price
     * @return Product The product object for chaining
     */
    public function updatePrice($newPrice) {
        // Validate the new price
        if ($newPrice >= 0) {
            $this->price = $newPrice;
        }
        
        return $this; // Return $this for method chaining
    }
    
    /**
     * Reduce the stock quantity with method chaining
     * 
     * @param int $quantity Quantity to reduce by
     * @return Product The product object for chaining
     */
    public function reduceStock($quantity = 1) {
        // Check if we have enough stock
        if ($this->stockQuantity >= $quantity) {
            $this->stockQuantity -= $quantity;
        }
        
        return $this; // Return $this for method chaining
    }
    
    /**
     * Increase the stock quantity with method chaining
     * 
     * @param int $quantity Quantity to increase by
     * @return Product The product object for chaining
     */
    public function increaseStock($quantity = 1) {
        if ($quantity > 0) {
            $this->stockQuantity += $quantity;
        }
        
        return $this; // Return $this for method chaining
    }
    
    /**
     * Check if the product is in stock
     * 
     * @return boolean In stock status
     */
    public function isInStock() {
        return $this->stockQuantity > 0;
    }
    
    /**
     * Check if the product is low on stock
     * 
     * @param int $threshold Low stock threshold
     * @return boolean Low stock status
     */
    public function isLowStock($threshold = 5) {
        return $this->isInStock() && $this->stockQuantity <= $threshold;
    }
    
    /**
     * Calculate discount price
     * 
     * @param float $percentage Discount percentage
     * @return float Discounted price
     */
    private function calculateDiscount($percentage) {
        $discount = $this->price * ($percentage / 100);
        return round($this->price - $discount, 2);
    }
    
    /**
     * Apply a discount to the product with method chaining
     * 
     * @param float $percentage Discount percentage
     * @return Product The product object for chaining
     */
    public function applyDiscount($percentage) {
        if ($percentage > 0 && $percentage <= 100) {
            $newPrice = $this->calculateDiscount($percentage);
            $this->price = $newPrice;
        }
        
        return $this; // Return $this for method chaining
    }
    
    /**
     * Format price with currency symbol
     * 
     * @param string $currencySymbol Currency symbol
     * @return string Formatted price
     */
    public function getFormattedPrice($currencySymbol = '$') {
        return $currencySymbol . number_format($this->price, 2);
    }
    
    /**
     * Create a product from an array of data
     * 
     * @param array $data Product data
     * @return Product New product object
     */
    public static function createFromArray($data) {
        return new self(
            $data['id'] ?? 0,
            $data['name'] ?? 'Unknown Product',
            $data['price'] ?? 0,
            $data['description'] ?? '',
            $data['stock_quantity'] ?? 0,
            $data['category'] ?? 'Other'
        );
    }
    
    // Getter and setter methods with method chaining
    
    public function getId() {
        return $this->id;
    }
    
    public function getName() {
        return $this->name;
    }
    
    public function setName($name) {
        if ($this->validateName($name)) {
            $this->name = $name;
        }
        return $this;
    }
    
    public function getPrice() {
        return $this->price;
    }
    
    public function getDescription() {
        return $this->description;
    }
    
    public function setDescription($description) {
        $this->description = $description;
        return $this;
    }
    
    public function getStockQuantity() {
        return $this->stockQuantity;
    }
    
    public function setStockQuantity($quantity) {
        $this->stockQuantity = max(0, intval($quantity));
        return $this;
    }
    
    public function getCategory() {
        return $this->category;
    }
    
    public function setCategory($category) {
        if ($this->validateCategory($category)) {
            $this->category = $category;
        }
        return $this;
    }
}
?&gt;</code></pre>

            <h3>Advanced Usage Example</h3>
            <p>Here's how to use the enhanced <code>Product</code> class with its advanced features:</p>
            
            <pre><code>&lt;?php
// Include the enhanced Product class
require_once 'class-product-advanced.php';

// Display valid categories
echo "&lt;h2&gt;Valid Product Categories&lt;/h2&gt;";
echo "&lt;ul&gt;";
foreach (Product::getValidCategories() as $category) {
    echo "&lt;li&gt;{$category}&lt;/li&gt;";
}
echo "&lt;/ul&gt;";

// Add a new category
Product::addValidCategory('Automotive');
echo "&lt;p&gt;Added new category: Automotive&lt;/p&gt;";

// Create a product from array data
$productData = [
    'id' => 1,
    'name' => 'MacBook Pro',
    'price' => 1299.99,
    'description' => 'Powerful laptop for developers',
    'stock_quantity' => 10,
    'category' => 'Electronics'
];

$laptop = Product::createFromArray($productData);

// Display current product count
echo "&lt;p&gt;Total products: " . Product::getTotalProducts() . "&lt;/p&gt;";

// Create another product
$phone = new Product(
    2,
    'iPhone 14',
    999.99,
    'Latest smartphone with advanced features',
    15,
    'Electronics'
);

// Display updated product count
echo "&lt;p&gt;Total products after creating iPhone: " . Product::getTotalProducts() . "&lt;/p&gt;";

// Using method chaining
$laptop->setName('MacBook Pro M3')
       ->setDescription('Latest model with M3 chip')
       ->updatePrice(1499.99)
       ->increaseStock(5);

// Display product information
echo "&lt;h2&gt;Product Information (After Chaining)&lt;/h2&gt;";
echo "&lt;pre&gt;";
print_r($laptop->getInfo());
echo "&lt;/pre&gt;";

// Format price
echo "&lt;p&gt;Formatted price: " . $laptop->getFormattedPrice() . "&lt;/p&gt;";

// Check low stock
if ($laptop->isLowStock(20)) {
    echo "&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This product is running low on stock!&lt;/p&gt;";
}

// Simulate multiple purchases with chaining
echo "&lt;p&gt;Processing multiple purchases...&lt;/p&gt;";
$laptop->reduceStock(2)->applyDiscount(5);

echo "&lt;p&gt;After purchases and 5% discount:&lt;/p&gt;";
echo "&lt;p&gt;New price: " . $laptop->getFormattedPrice() . "&lt;/p&gt;";
echo "&lt;p&gt;Remaining stock: " . $laptop->getStockQuantity() . "&lt;/p&gt;";

// Remove a product and check count
unset($phone);
echo "&lt;p&gt;Total products after removing iPhone: " . Product::getTotalProducts() . "&lt;/p&gt;";
?&gt;</code></pre>

            <p>This advanced example demonstrates:</p>
            <ul>
                <li>Using static properties and methods</li>
                <li>Creating products from array data</li>
                <li>Method chaining for a more fluent interface</li>
                <li>Input validation</li>
                <li>Price formatting</li>
                <li>Stock status checking</li>
            </ul>
        </section>

        <section class="step-by-step">
            <h2>Step by Step Instructions</h2>
            
            <h3>Setting Up the Project</h3>
            <ol>
                <li>Create a new folder for your project, for example <code>product-class</code></li>
                <li>Inside this folder, create a file named <code>class-product.php</code> for the basic implementation</li>
                <li>If you want to try the advanced version, create a file named <code>class-product-advanced.php</code></li>
                <li>Create example usage files: <code>example-basic.php</code> and <code>example-advanced.php</code></li>
            </ol>
            
            <h3>Implementing the Basic Class</h3>
            <ol>
                <li>Open <code>class-product.php</code> in your code editor</li>
                <li>Define the <code>Product</code> class with private properties for product details</li>
                <li>Create a constructor to initialize these properties</li>
                <li>Implement basic methods like <code>getInfo()</code>, <code>updatePrice()</code>, etc.</li>
                <li>Add getter and setter methods for accessing private properties</li>
                <li>Save the file</li>
            </ol>
            
            <h3>Testing the Basic Implementation</h3>
            <ol>
                <li>Open <code>example-basic.php</code> in your code editor</li>
                <li>Include the <code>class-product.php</code> file using <code>require_once</code></li>
                <li>Create a new product object with sample data</li>
                <li>Test each method to ensure it works correctly</li>
                <li>Save the file</li>
                <li>Run the example in your browser or command line to see the results</li>
            </ol>
            
            <h3>Extending to the Advanced Version</h3>
            <ol>
                <li>Open <code>class-product-advanced.php</code> in your code editor</li>
                <li>Copy the basic implementation and enhance it with:</li>
                <li>Static properties and methods for tracking all products</li>
                <li>Input validation in the constructor and setter methods</li>
                <li>Method chaining by returning <code>$this</code> from setter methods</li>
                <li>Additional helper methods for formatting and validation</li>
                <li>Save the file</li>
            </ol>
            
            <h3>Testing the Advanced Implementation</h3>
            <ol>
                <li>Open <code>example-advanced.php</code> in your code editor</li>
                <li>Include the <code>class-product-advanced.php</code> file</li>
                <li>Test the advanced features, including static methods and method chaining</li>
                <li>Save the file</li>
                <li>Run the example to see the enhanced functionality</li>
            </ol>
        </section>

        <section class="explanations">
            <h2>Code Explanations and Concepts</h2>
            
            <h3>Properties and Access Modifiers</h3>
            <p>In our <code>Product</code> class, we used different access modifiers:</p>
            <ul>
                <li><strong>Private properties</strong> (<code>$id</code>, <code>$name</code>, etc.): These can only be accessed within the class itself. This provides encapsulation, preventing direct manipulation from outside the class.</li>
                <li><strong>Protected properties</strong> (<code>$category</code>): These can be accessed within the class and any child classes that extend it. This is useful when creating inheritance hierarchies.</li>
                <li><strong>Public methods</strong> (<code>getInfo()</code>, <code>updatePrice()</code>, etc.): These form the class's public API, allowing external code to interact with objects.</li>
            </ul>
            
            <div class="analogy">
                <h4>Access Modifiers Analogy</h4>
                <p>Think of a class like a house:</p>
                <ul>
                    <li><strong>Private members</strong> are like your bedroom - only you (the class itself) can access them</li>
                    <li><strong>Protected members</strong> are like the family room - only family members (the class and its descendants) can access them</li>
                    <li><strong>Public members</strong> are like your front yard - anyone passing by can see and interact with them</li>
                </ul>
            </div>
            
            <h3>Constructor and Initialization</h3>
            <p>The constructor <code>__construct()</code> is a special method that runs automatically when an object is created. In our class, it:</p>
            <ul>
                <li>Takes parameters for all necessary product information</li>
                <li>Initializes the object's properties with these values</li>
                <li>In the advanced version, it also validates inputs and increments a counter</li>
            </ul>
            
            <h3>Getters and Setters</h3>
            <p>Since our properties are private, we provide public methods to access them:</p>
            <ul>
                <li><strong>Getter methods</strong> (<code>getName()</code>, <code>getPrice()</code>, etc.) allow reading property values</li>
                <li><strong>Setter methods</strong> (<code>setName()</code>, <code>setDescription()</code>, etc.) allow changing property values</li>
            </ul>
            <p>This pattern gives us control over how properties are accessed and modified, allowing for validation and other logic.</p>
            
            <h3>Method Chaining</h3>
            <p>In the advanced version, we implemented method chaining by returning <code>$this</code> from methods that modify the object:</p>
            <pre><code>public function setName($name) {
    if ($this->validateName($name)) {
        $this->name = $name;
    }
    return $this; // Return $this for method chaining
}</code></pre>
            <p>This allows for more concise and readable code:</p>
            <pre><code>$product->setName('New Name')
        ->setDescription('New description')
        ->updatePrice(99.99);</code></pre>
            
            <h3>Static Properties and Methods</h3>
            <p>Static members belong to the class itself, not to individual objects:</p>
            <ul>
                <li><strong>Static properties</strong> (like <code>$totalProducts</code>) store information shared by all instances</li>
                <li><strong>Static methods</strong> (like <code>getTotalProducts()</code>) provide functionality that doesn't depend on individual object state</li>
            </ul>
            <p>We access these using the <code>self::</code> keyword within the class and <code>ClassName::</code> from outside.</p>
        </section>

        <section class="real-world">
            <h2>Real-World Applications</h2>
            
            <h3>WordPress Integration</h3>
            <p>Our <code>Product</code> class could easily be integrated into a WordPress plugin for an e-commerce site:</p>
            
            <pre><code>&lt;?php
/**
 * Plugin Name: Simple Product Manager
 * Description: A lightweight product management system
 * Version: 1.0.0
 * Author: Your Name
 */

// Include the Product class
require_once plugin_dir_path(__FILE__) . 'includes/class-product.php';

/**
 * Register custom post type for products
 */
function spm_register_post_types() {
    register_post_type('spm_product', [
        'labels' => [
            'name' => 'Products',
            'singular_name' => 'Product'
        ],
        'public' => true,
        'has_archive' => true,
        'menu_icon' => 'dashicons-cart',
        'supports' => ['title', 'editor', 'thumbnail', 'custom-fields']
    ]);
}
add_action('init', 'spm_register_post_types');

/**
 * Convert WordPress post to Product object
 * 
 * @param int $post_id Post ID
 * @return Product Product object
 */
function spm_get_product($post_id) {
    $post = get_post($post_id);
    
    if (!$post || $post->post_type !== 'spm_product') {
        return null;
    }
    
    // Get product meta data
    $price = get_post_meta($post_id, '_product_price', true);
    $stock = get_post_meta($post_id, '_product_stock', true);
    $category = get_post_meta($post_id, '_product_category', true);
    
    // Create a Product object
    return new Product(
        $post_id,
        $post->post_title,
        floatval($price),
        $post->post_content,
        intval($stock),
        $category
    );
}

/**
 * Save product data when post is saved
 * 
 * @param int $post_id Post ID
 */
function spm_save_product_data($post_id) {
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }
    
    if (!current_user_can('edit_post', $post_id)) {
        return;
    }
    
    if (isset($_POST['_product_price'])) {
        update_post_meta($post_id, '_product_price', sanitize_text_field($_POST['_product_price']));
    }
    
    if (isset($_POST['_product_stock'])) {
        update_post_meta($post_id, '_product_stock', intval($_POST['_product_stock']));
    }
    
    if (isset($_POST['_product_category'])) {
        update_post_meta($post_id, '_product_category', sanitize_text_field($_POST['_product_category']));
    }
}
add_action('save_post_spm_product', 'spm_save_product_data');

/**
 * Display product information on the product single page
 * 
 * @param string $content Post content
 * @return string Modified content
 */
function spm_display_product_info($content) {
    if (!is_singular('spm_product')) {
        return $content;
    }
    
    $product = spm_get_product(get_the_ID());
    
    if (!$product) {
        return $content;
    }
    
    $output = $content;
    
    $output .= '&lt;div class="product-info"&gt;';
    $output .= '&lt;p class="product-price"&gt;Price: $' . number_format($product->getPrice(), 2) . '&lt;/p&gt;';
    
    if ($product->isInStock()) {
        $output .= '&lt;p class="in-stock"&gt;In Stock: ' . $product->getStockQuantity() . ' available&lt;/p&gt;';
    } else {
        $output .= '&lt;p class="out-of-stock"&gt;Out of Stock&lt;/p&gt;';
    }
    
    $output .= '&lt;p class="product-category"&gt;Category: ' . $product->getCategory() . '&lt;/p&gt;';
    $output .= '&lt;/div&gt;';
    
    return $output;
}
add_filter('the_content', 'spm_display_product_info');
?&gt;</code></pre>

            <p>This example shows how the <code>Product</code> class could be used in a WordPress plugin to:</p>
            <ul>
                <li>Create a custom post type for products</li>
                <li>Convert WordPress posts to <code>Product</code> objects</li>
                <li>Save product data as post meta</li>
                <li>Display product information on the front-end</li>
            </ul>
            
            <h3>Other Real-World Applications</h3>
            <p>The concepts demonstrated in this class can be applied to many other scenarios:</p>
            <ul>
                <li><strong>User Management</strong>: Create a <code>User</code> class to handle user accounts</li>
                <li><strong>Content Management</strong>: Create classes for different types of content</li>
                <li><strong>Payment Processing</strong>: Create classes to handle payment methods and transactions</li>
                <li><strong>Data Validation</strong>: Create utility classes for validating different types of data</li>
            </ul>
        </section>

        <section class="further-learning">
            <h2>Further Learning</h2>
            
            <h3>Next Steps</h3>
            <p>To build on what you've learned, consider exploring these topics:</p>
            <ul>
                <li><strong>Inheritance</strong>: Create child classes like <code>PhysicalProduct</code> and <code>DigitalProduct</code> that extend the <code>Product</code> class</li>
                <li><strong>Interfaces</strong>: Define interfaces that classes can implement, such as <code>Shippable</code> or <code>Downloadable</code></li>
                <li><strong>Namespaces</strong>: Organize your classes in namespaces to avoid naming conflicts</li>
                <li><strong>Autoloading</strong>: Set up autoloading so you don't need to manually include class files</li>
                <li><strong>Design Patterns</strong>: Learn common OOP design patterns like Singleton, Factory, and Observer</li>
            </ul>
            
            <h3>Resources</h3>
            <ul>
                <li><a href="https://www.php.net/manual/en/language.oop5.php" target="_blank">PHP Manual: Classes and Objects</a></li>
                <li><a href="https://developer.wordpress.org/plugins/the-basics/best-practices/" target="_blank">WordPress Plugin Developer Handbook: Best Practices</a></li>
                <li><a href="https://phptherightway.com/#object-oriented-programming" target="_blank">PHP The Right Way: OOP Chapter</a></li>
            </ul>
        </section>

        <section class="conclusion">
            <h2>Conclusion</h2>
            <p>Congratulations! You've successfully created a <code>Product</code> class with properties and methods, and explored how it can be used in real-world applications. Let's recap what we've learned:</p>
            <ul>
                <li>How to define a class with properties and methods</li>
                <li>How to use access modifiers (private, protected, public) for encapsulation</li>
                <li>How to create a constructor to initialize objects</li>
                <li>How to implement getter and setter methods</li>
                <li>How to add functionality through instance methods</li>
                <li>How to use static properties and methods for class-level features</li>
                <li>How to enable method chaining for a more fluent interface</li>
            </ul>
            <p>These object-oriented programming concepts are fundamental to building maintainable, reusable, and organized code, especially in larger applications like WordPress plugins and themes.</p>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
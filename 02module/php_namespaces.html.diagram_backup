<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>Namespaces in PHP: Organizing Your Code - PHP WordPress Course</title>
<meta content="Organize code with namespaces." name="description"/>
<meta content="PHP, WordPress, web development, php, namespaces" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Namespaces</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 9</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_inheritance.html">Inheritance</a></li>
<li><a class="sidebar-link" href="/02module/php_method_overriding.html">Method Overriding</a></li>
<li><a class="sidebar-link" href="/02module/php_abstract_classes.html">Abstract Classes</a></li>
<li><a class="sidebar-link" href="/02module/php_interfaces.html">Interfaces</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/php_namespaces.html">Namespaces</a></li>
<li><a class="sidebar-link" href="/02module/php_traits.html">Traits</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_extend_with_inheritance.html">Homework: Inheritance</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_oop_concepts.html">← Prev: Session 8: OOP Intro</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_planning_php_application.html">Next: Session 10: Project →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>Namespaces in PHP: Organizing Your Code</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 45 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: Object-Oriented PHP</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP programming concepts</li>
<li>Write clean, maintainable code</li>
<li>Apply best practices</li>
<li>Build dynamic applications</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">

<section class="module-intro">
            <h2>Bringing Order to Your Code</h2>
            <p>Welcome to our exploration of namespaces in PHP! In our previous lessons, we've covered classes, inheritance, abstract classes, and interfaces. Today, we'll be diving into namespaces - a powerful organizational tool that helps you structure your code and avoid naming conflicts in larger projects.</p>
            
            <div class="note">
                <p><strong>Why Namespaces Matter:</strong> In WordPress development, especially when building larger plugins or themes, namespaces help you avoid conflicts with other plugins and WordPress core. They're essential for creating professional, maintainable code that plays well with the broader WordPress ecosystem.</p>
            </div>
        </section>

        <section id="namespace-basics">
            <h2>What Are Namespaces?</h2>
            
            <p>Think of namespaces as addresses or zip codes for your code. Just as two people can have the same name but live at different addresses, two classes can have the same name but exist in different namespaces.</p>
            
            <div class="diagram">
                <h3>Namespace Hierarchy</h3>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 1100" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="1100" fill="#fafafa" rx="8"/>
    
    <line x1="516.6666666666667" y1="80" x2="190.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="330.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="470.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="190.0" y1="200" x2="610.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="190.0" y1="200" x2="166.66666666666669" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="330.0" y1="200" x2="283.33333333333337" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="330.0" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="470.0" y1="200" x2="516.6666666666667" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="470.0" y1="200" x2="633.3333333333334" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="330.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="423.33333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[Admin Namespace] B </text>
    <line x1="516.6666666666667" y1="80" x2="610.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="563.3333333333334" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; E[API Namespace] C </text>
    <line x1="190.0" y1="200" x2="283.33333333333337" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="236.66666666666669" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; G[Dashboard] D </text>
    <line x1="330.0" y1="200" x2="516.6666666666667" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="423.33333333333337" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; I[Widgets] E </text>
    <rect x="209.33333333333337" y="55" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Global Namespace</text>
    <rect x="434.66666666666674" y="55" width="164" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">MyPlugin Namespace</text>
    <rect x="120.0" y="175" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="190.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Admin Namespace</text>
    <rect x="248.0" y="175" width="164" height="50" 
          rx="5" class="node-rect"/>
    <text x="330.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Frontend Namespace</text>
    <rect x="408.0" y="175" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="470.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">API Namespace</text>
    <rect x="550.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="610.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Settings</text>
    <rect x="106.66666666666669" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="166.66666666666669" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Dashboard</text>
    <rect x="223.33333333333337" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Shortcodes</text>
    <rect x="340.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Widgets</text>
    <rect x="456.66666666666674" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Endpoints</text>
    <rect x="573.3333333333334" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="633.3333333333334" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Auth</text>
</svg>
</div>
            </div>
            
            <p>In this diagram, we have a hierarchical structure of namespaces for a WordPress plugin. Each namespace contains related classes and functions, organized by their purpose.</p>
            
            <div class="analogy">
                <h3>The Library Analogy</h3>
                <p>Think of namespaces as sections in a library. Without namespaces, all books (classes, functions) would be piled together in one big heap, making it hard to find what you need and causing confusion when two books have the same title.</p>
                <p>With namespaces, books are organized into different sections (Fiction, Non-Fiction, Reference, etc.), and then further organized into subsections. This structure makes it easier to find what you're looking for and prevents confusion between books with the same title but in different sections.</p>
                <p>Just as you would specify "Science Fiction: War of the Worlds" to distinguish from "History: War of the Worlds," you use namespaces like <code>\SciFi\WellsHG\WarOfTheWorlds</code> and <code>\History\WorldWars\WarOfTheWorlds</code> to distinguish between similarly named classes.</p>
            </div>
        </section>

        <section id="namespace-syntax">
            <h2>Namespace Syntax in PHP</h2>
            
            <p>In PHP, namespaces are declared using the <code>namespace</code> keyword at the beginning of a file, before any other code (except for the <code>declare</code> statement).</p>
            
            <div class="code-example">
                <h3>Basic Namespace Declaration</h3>
                <pre>###CODE_BLOCK_4###</pre>
            </div>
            
            <h3>Nested Namespaces</h3>
            
            <p>Namespaces can be nested to create a hierarchy, similar to directories in a file system. The backslash (\) is used as a separator.</p>
            
            <div class="code-example">
                <h3>Nested Namespace Example</h3>
                <pre>###CODE_BLOCK_5###</pre>
            </div>
            
            <div class="pro-tip">
                <h3>Namespace Standards</h3>
                <p>While PHP allows any valid identifier for namespace names, it's common practice to use StudlyCaps (PascalCase) for namespace names, mirroring the convention for class names. Namespaces are case-insensitive, but maintaining consistent capitalization makes your code more readable.</p>
                <pre>###CODE_BLOCK_6###</pre>
            </div>
        </section>

        <section id="namespace-referencing">
            <h2>Referencing Namespaced Code</h2>
            
            <p>There are three ways to reference namespaced code in PHP: fully qualified names, relative names, and imported names using the <code>use</code> statement.</p>
            
            <div class="code-example">
                <h3>Fully Qualified Names</h3>
                <pre>###CODE_BLOCK_8###</pre>
            </div>
            
            <div class="code-example">
                <h3>Relative Names</h3>
                <pre>###CODE_BLOCK_9###</pre>
            </div>
            
            <div class="code-example">
                <h3>Importing with the 'use' Statement</h3>
                <pre>###CODE_BLOCK_10###</pre>
            </div>
            
            <div class="pro-tip">
                <h3>Group Use Declarations (PHP 7.0+)</h3>
                <p>Since PHP 7.0, you can group multiple use declarations from the same namespace:</p>
                <pre>###CODE_BLOCK_11###</pre>
            </div>
        </section>

        <section id="namespace-global">
            <h2>The Global Namespace</h2>
            
            <p>Code that's not explicitly declared in a namespace belongs to the "global namespace". This includes all PHP built-in functions and classes, as well as code written without a namespace declaration.</p>
            
            <div class="code-example">
                <h3>Working with the Global Namespace</h3>
                <pre>###CODE_BLOCK_12###</pre>
            </div>
            
            <div class="note">
                <h3>Global Functions and Constants</h3>
                <p>When using functions and constants from the global namespace within a namespaced file, you need to prefix them with a backslash (\) to reference them explicitly, or import them with a use statement. Otherwise, PHP will look for them in the current namespace first.</p>
                <pre>###CODE_BLOCK_13###</pre>
            </div>
        </section>

        <section id="namespace-resolving">
            <h2>How PHP Resolves Names</h2>
            
            <p>Understanding how PHP resolves names in namespaced code is crucial for avoiding unexpected behavior.</p>
            
            <div class="code-example">
                <h3>Name Resolution Rules</h3>
                <pre>###CODE_BLOCK_14###</pre>
            </div>
            
            <h3>Special Name Resolution for PHP Internal Classes</h3>
            
            <p>For backward compatibility, PHP applies special rules when resolving names of internal (built-in) classes:</p>
            
            <div class="code-example">
                <h3>PHP Internal Class Resolution</h3>
                <pre>###CODE_BLOCK_15###</pre>
            </div>
        </section>

        <section id="namespace-benefits">
            <h2>Benefits of Using Namespaces</h2>
            
            <h3>Avoiding Name Collisions</h3>
            
            <p>The primary benefit of namespaces is avoiding naming conflicts, especially when integrating third-party code.</p>
            
            <div class="code-example">
                <h3>Name Collision Example</h3>
                <pre>###CODE_BLOCK_16###</pre>
            </div>
            
            <h3>Better Code Organization</h3>
            
            <p>Namespaces allow you to organize your code logically, grouping related functionality together.</p>
            
            <div class="diagram">
                <h3>Organized Code Structure</h3>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 1500" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="1500" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="166.66666666666669" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="166.66666666666669" y1="200" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="166.66666666666669" y1="200" x2="137.5" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="225.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="312.5" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="137.5" y1="320" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="137.5" y1="320" x2="400.0" y2="440" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="400.0" y1="200" x2="633.3333333333334" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="400.0" y1="200" x2="487.5" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="200" x2="575.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="200" x2="662.5" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="283.33333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; B B </text>
    <line x1="166.66666666666669" y1="200" x2="225.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="195.83333333333334" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; D C </text>
    <line x1="283.33333333333337" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="341.6666666666667" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; F D </text>
    <line x1="137.5" y1="320" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="268.75" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; H I </text>
    <line x1="516.6666666666667" y1="80" x2="633.3333333333334" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="575.0" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; K J </text>
    <line x1="400.0" y1="200" x2="575.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="487.5" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; M K </text>
    <rect x="223.33333333333337" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">src/</text>
    <rect x="106.66666666666669" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="166.66666666666669" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">MyPlugin/</text>
    <rect x="223.33333333333337" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Admin/</text>
    <rect x="77.5" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="137.5" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Frontend/</text>
    <rect x="143.0" y="295" width="164" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Admin/Settings.php</text>
    <rect x="226.5" y="295" width="172" height="50" 
          rx="5" class="node-rect"/>
    <text x="312.5" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Admin/Dashboard.php</text>
    <rect x="310.0" y="295" width="180" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Frontend/Widgets.php</text>
    <rect x="298.0" y="415" width="204" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="440" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Frontend/Shortcodes.php</text>
    <rect x="456.66666666666674" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">\MyPlugin</text>
    <rect x="326.0" y="175" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">\MyPlugin\\Admin</text>
    <rect x="434.66666666666674" y="175" width="164" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">\MyPlugin\Frontend</text>
    <rect x="519.3333333333334" y="175" width="228" height="50" 
          rx="5" class="node-rect"/>
    <text x="633.3333333333334" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">\MyPlugin\\Admin\\Settings</text>
    <rect x="369.5" y="295" width="236" height="50" 
          rx="5" class="node-rect"/>
    <text x="487.5" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">\MyPlugin\\Admin\\Dashboard</text>
    <rect x="457.0" y="295" width="236" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">\MyPlugin\Frontend\\Widgets</text>
    <rect x="532.5" y="295" width="260" height="50" 
          rx="5" class="node-rect"/>
    <text x="662.5" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">\MyPlugin\Frontend\\Shortcodes</text>
</svg>
</div>
            </div>
            
            <p>This diagram shows how the file structure and namespace structure can mirror each other, creating a logical organization for your code.</p>
            
            <h3>Autoloading Compatibility</h3>
            
            <p>Namespaces work hand-in-hand with autoloading standards like PSR-4, which map namespace structures to file directories for automatic class loading.</p>
            
            <div class="code-example">
                <h3>PSR-4 Autoloading Example</h3>
                <pre>###CODE_BLOCK_17###</pre>
            </div>
        </section>

        <section id="namespace-wordpress">
            <h2>Namespaces in WordPress Development</h2>
            
            <p>WordPress core still largely operates without namespaces for backward compatibility reasons. However, modern WordPress development, especially for plugins and themes, increasingly uses namespaces.</p>
            
            <h3>Plugin Namespaces</h3>
            
            <p>When creating WordPress plugins, it's a good practice to namespace your code to avoid conflicts with other plugins or WordPress core.</p>
            
            <div class="code-example">
                <h3>WordPress Plugin with Namespaces</h3>
                <pre>###CODE_BLOCK_18###</pre>
            </div>
            
            <h3>Admin Class in a Namespace</h3>
            
            <div class="code-example">
                <h3>Admin Class (includes/class-admin.php)</h3>
                <pre>###CODE_BLOCK_19###</pre>
            </div>
            
            <h3>Frontend Class in a Namespace</h3>
            
            <div class="code-example">
                <h3>Frontend Class (includes/class-frontend.php)</h3>
                <pre>###CODE_BLOCK_20###</pre>
            </div>
        </section>

        <section id="namespace-autoloading">
            <h2>Autoloading with Namespaces</h2>
            
            <p>One of the most powerful benefits of using namespaces is the ability to set up automatic class loading based on the namespace structure. This eliminates the need for numerous <code>require</code> or <code>include</code> statements.</p>
            
            <h3>Simple Autoloader</h3>
            
            <div class="code-example">
                <h3>Basic PSR-4 Style Autoloader</h3>
                <pre>###CODE_BLOCK_23###</pre>
            </div>
            
            <h3>Using Composer Autoloading</h3>
            
            <p>For more robust autoloading, Composer provides a PSR-4 compatible autoloader that's widely used in modern PHP development.</p>
            
            <div class="code-example">
                <h3>Setting Up Composer Autoloading</h3>
                <pre>###CODE_BLOCK_24###</pre>
            </div>
            
            <div class="pro-tip">
                <h3>WordPress and Composer</h3>
                <p>While WordPress core doesn't use Composer, many modern WordPress plugins and themes do. When distributing your plugin, you have two main options:</p>
                <ol>
                    <li>Include Composer's autoloader and vendor directory in your distribution package</li>
                    <li>Use a custom autoloader specific to your plugin to avoid conflicts with other plugins using Composer</li>
                </ol>
                <p>For smaller plugins without many dependencies, the second approach is often simpler and more lightweight.</p>
            </div>
        </section>

        <section id="namespace-best-practices">
            <h2>Namespace Best Practices</h2>
            
            <div class="best-practices">
                <div class="practice">
                    <h3>Use Vendor Namespaces</h3>
                    <p>Start your namespace with a unique vendor name (usually your company or plugin name) to avoid conflicts with other plugins or libraries.</p>
                    <div class="code-example">
                        <h4>Good: Using a vendor namespace</h4>
                        <pre>###CODE_BLOCK_25###</pre>
                    </div>
                </div>
                
                <div class="practice">
                    <h3>Match Namespace to Directory Structure</h3>
                    <p>Following PSR-4 standards, your namespace structure should mirror your directory structure for easier navigation and autoloading.</p>
                    <div class="code-example">
                        <h4>Good: Directory structure matches namespace</h4>
                        <pre>###CODE_BLOCK_26###</pre>
                    </div>
                </div>
                
                <div class="practice">
                    <h3>Use a Single Namespace Per File</h3>
                    <p>For clarity and maintainability, stick to one namespace per file. This also simplifies autoloading.</p>
                    <div class="code-example">
                        <h4>Good: One namespace per file</h4>
                        <pre>###CODE_BLOCK_27###</pre>
                    </div>
                </div>
                
                <div class="practice">
                    <h3>Import Classes with Use Statements</h3>
                    <p>For readability, import the classes you use frequently with <code>use</code> statements at the top of your file rather than using fully qualified names throughout.</p>
                    <div class="code-example">
                        <h4>Good: Importing with use statements</h4>
                        <pre>###CODE_BLOCK_29###</pre>
                    </div>
                </div>
                
                <div class="practice">
                    <h3>Be Explicit with Global Functions and Classes</h3>
                    <p>When using PHP built-in functions or WordPress functions within a namespace, either prefix them with a backslash (\) or import them using <code>use function</code> to avoid ambiguity.</p>
                    <div class="code-example">
                        <h4>Good: Being explicit with global functions</h4>
                        <pre>###CODE_BLOCK_31###</pre>
                    </div>
                </div>
                
                <div class="practice">
                    <h3>Use __NAMESPACE__ for Callbacks</h3>
                    <p>When registering callbacks in WordPress hooks from within a namespace, use the <code>__NAMESPACE__</code> constant to build the fully qualified function name.</p>
                    <div class="code-example">
                        <h4>Good: Using __NAMESPACE__ for callbacks</h4>
                        <pre>###CODE_BLOCK_33###</pre>
                    </div>
                </div>
            </div>
        </section>

        <section id="common-namespace-challenges">
            <h2>Common Namespace Challenges</h2>
            
            <div class="challenges">
                <div class="challenge">
                    <h3>Working with Global WordPress Functions</h3>
                    <p>One of the biggest challenges when using namespaces in WordPress is interfacing with WordPress's global functions and classes.</p>
                    <div class="code-example">
                        <h4>Challenge: Accessing WordPress Functions</h4>
                        <pre>###CODE_BLOCK_34###</pre>
                    </div>
                </div>
                
                <div class="challenge">
                    <h3>Dynamic Namespace References</h3>
                    <p>Creating dynamic class names with namespaces requires special handling.</p>
                    <div class="code-example">
                        <h4>Challenge: Dynamic Class Names</h4>
                        <pre>###CODE_BLOCK_35###</pre>
                    </div>
                </div>
                
                <div class="challenge">
                    <h3>Backward Compatibility with Non-Namespaced Code</h3>
                    <p>Integrating namespaced code with older, non-namespaced code can be tricky.</p>
                    <div class="code-example">
                        <h4>Challenge: Integration with Legacy Code</h4>
                        <pre>###CODE_BLOCK_36###</pre>
                    </div>
                </div>
                
                <div class="challenge">
                    <h3>Namespace Autoloading in WordPress</h3>
                    <p>Setting up autoloading in the WordPress environment requires some special considerations.</p>
                    <div class="code-example">
                        <h4>Challenge: WordPress-Specific Autoloading</h4>
                        <pre>###CODE_BLOCK_37###</pre>
                    </div>
                </div>
            </div>
        </section>

        <section id="real-world-examples">
            <h2>Real-World Examples in WordPress Plugins</h2>
            
            <h3>WooCommerce</h3>
            
            <p>WooCommerce, one of the most popular WordPress plugins, makes extensive use of namespaces to organize its large codebase.</p>
            
            <div class="code-example">
                <h3>WooCommerce Namespace Structure Example</h3>
                <pre>###CODE_BLOCK_38###</pre>
            </div>
            
            <h3>Advanced Custom Fields</h3>
            
            <p>The Pro version of Advanced Custom Fields uses namespaces to organize its additional functionality.</p>
            
            <div class="code-example">
                <h3>ACF Pro Namespace Structure Example</h3>
                <pre>###CODE_BLOCK_39###</pre>
            </div>
            
            <h3>Creating a REST API Endpoint with Namespaces</h3>
            
            <p>Here's a practical example of using namespaces when creating a custom REST API endpoint for your WordPress plugin:</p>
            
            <div class="code-example">
                <h3>Custom REST API with Namespaces</h3>
                <pre>###CODE_BLOCK_40###</pre>
            </div>
        </section>

        <section id="homework">
            <h2>Homework: Refactoring a Plugin to Use Namespaces</h2>
            
            <div class="assignment">
                <h3>Assignment: Namespace Organization</h3>
                
                <p>For this assignment, you'll take a simple WordPress plugin without namespaces and refactor it to use a proper namespace structure and organization.</p>
                
                <h4>Requirements:</h4>
                <ol>
                    <li>Create a namespace structure for the plugin with at least three namespaces:
                        <ul>
                            <li>Main plugin namespace (e.g., <code>MyPlugin</code>)</li>
                            <li>Admin namespace for admin-related code (e.g., <code>MyPlugin\Admin</code>)</li>
                            <li>Frontend namespace for frontend-related code (e.g., <code>MyPlugin\Frontend</code>)</li>
                        </ul>
                    </li>
                    <li>Implement a simple autoloader for the namespaced classes</li>
                    <li>Update all class and function references to use the appropriate namespace</li>
                    <li>Properly handle WordPress function calls from within namespaces</li>
                    <li>Document your code with PHPDoc blocks that include namespace information</li>
                </ol>
                
                <h4>Starting Plugin Code:</h4>
                <pre>###CODE_BLOCK_44###</pre>
                
                <h4>Bonus Challenges:</h4>
                <ul>
                    <li>Implement PSR-4 compatible autoloading</li>
                    <li>Add a new namespace for API functionality with a simple REST endpoint</li>
                    <li>Implement dependency injection using interfaces and namespaced classes</li>
                    <li>Create a composer.json file for the plugin with appropriate autoloading configuration</li>
                </ul>
            </div>
        </section>

        <section class="summary">
            <h2>Key Takeaways</h2>
            
            <div class="takeaways">
                <div class="takeaway">
                    <h3>Code Organization</h3>
                    <p>Namespaces provide a logical way to organize code, grouping related classes, functions, and constants together.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Avoiding Name Collisions</h3>
                    <p>Namespaces help prevent naming conflicts, allowing different plugins or libraries to use the same class names without conflicts.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Autoloading Compatibility</h3>
                    <p>Proper namespace usage enables PSR-4 autoloading, reducing the need for manual file inclusion and making your code more maintainable.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Modern WordPress Development</h3>
                    <p>While WordPress core doesn't extensively use namespaces, modern plugin and theme development increasingly adopts this approach for better organization and compatibility.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Global Namespace Management</h3>
                    <p>Understanding how to reference global functions and classes from within namespaced code is crucial for effective WordPress development.</p>
                </div>
            </div>
            
            <div class="next-steps">
                <h3>Next Steps</h3>
                <p>Now that you understand namespaces, we'll explore traits in our next lesson. Traits provide a mechanism for code reuse in PHP's single inheritance model, complementing the organizational structure that namespaces provide.</p>
            </div>
        </section>

        <section class="resources">
            <h2>Additional Resources</h2>
            
            <ul>
                <li><a href="https://www.php.net/manual/en/language.namespaces.php" target="_blank">PHP Manual: Namespaces</a></li>
                <li><a href="https://phptherightway.com/#namespaces" target="_blank">PHP The Right Way: Namespaces</a></li>
                <li><a href="https://www.php-fig.org/psr/psr-4/" target="_blank">PSR-4: Autoloader</a></li>
                <li><a href="https://developer.wordpress.org/plugins/intro/" target="_blank">WordPress Plugin Developer Handbook</a></li>
                <li><a href="https://getcomposer.org/doc/01-basic-usage.md#autoloading" target="_blank">Composer Autoloading</a></li>
                <li><a href="https://carlalexander.ca/php-namespaces-wordpress/" target="_blank">PHP Namespaces in WordPress</a></li>
            </ul>
        </section>
            </div>
<!-- Lesson Navigation -->
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
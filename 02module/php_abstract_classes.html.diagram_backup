<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>Abstract Classes in PHP: Blueprint for Child Classes - PHP WordPress Course</title>
<meta content="Welcome to our exploration of abstract classes in PHP! Abstract classes are a fundamental concept in object-oriented programming that bridge the gap between int" name="description"/>
<meta content="PHP, WordPress, web development, php, abstract, classes" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Abstract Classes</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 9</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_inheritance.html">Inheritance</a></li>
<li><a class="sidebar-link" href="/02module/php_method_overriding.html">Method Overriding</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/php_abstract_classes.html">Abstract Classes</a></li>
<li><a class="sidebar-link" href="/02module/php_interfaces.html">Interfaces</a></li>
<li><a class="sidebar-link" href="/02module/php_namespaces.html">Namespaces</a></li>
<li><a class="sidebar-link" href="/02module/php_traits.html">Traits</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_extend_with_inheritance.html">Homework: Inheritance</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_oop_concepts.html">← Prev: Session 8: OOP Intro</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_planning_php_application.html">Next: Session 10: Project →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>Abstract Classes in PHP: Blueprint for Child Classes</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 45 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: Object-Oriented PHP</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Understand OOP principles in PHP</li>
<li>Create and use classes and objects</li>
<li>Implement inheritance and polymorphism</li>
<li>Apply OOP best practices</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="module-intro">
            <h2>Building a Foundation with Abstract Classes</h2>
            <p>Welcome to our exploration of abstract classes in PHP! Abstract classes are a fundamental concept in object-oriented programming that bridge the gap between interfaces and concrete classes. They provide a powerful way to establish common structures while enforcing implementation details in child classes.</p>
            
            <div class="note">
                <p><strong>Why Abstract Classes Matter:</strong> Abstract classes are essential for creating robust, maintainable PHP applications. In WordPress development, abstract classes form the backbone of many core components including widgets, admin pages, and REST API controllers. Understanding abstract classes will dramatically improve your ability to extend WordPress and create plugins that integrate seamlessly with core functionality.</p>
            </div>
        </section>

        <section id="abstract-class-basics">
            <h2>Understanding Abstract Classes</h2>
            
            <p>Abstract classes are like architectural blueprints for a building. The blueprint itself isn't a building (you can't live in it), but it defines the essential structure that all actual buildings based on that blueprint must follow. Similarly, an abstract class can't be instantiated directly, but it defines a structure that all extending classes must adhere to.</p>
            
            <div class="diagram">
                <h3>Abstract Class Structure</h3>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
    
    <!-- Background -->
    <rect x="0" y="0" width="600" height="300" rx="8" fill="#f3e5f5" 
          stroke="#7b1fa2" stroke-width="2"/>
    
    <!-- Icon -->
    <g transform="translate(300, 100)">
        <rect x="-40" y="-30" width="80" height="60" rx="5" 
              fill="white" stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="-10" x2="20" y2="-10" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="0" x2="20" y2="0" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="10" x2="20" y2="10" 
              stroke="#7b1fa2" stroke-width="2"/>
    </g>
    
    <!-- Text -->
    <text x="300" y="180" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="18" 
          fill="#4a148c" font-weight="bold">
        Class Diagram
    </text>
    
    <text x="300" y="210" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="14" 
          fill="#4a148c" opacity="0.8">
        (Diagram converted to static representation)
    </text>
    
    <!-- Original content hint -->
    <text x="300" y="240" text-anchor="middle" 
          font-family="monospace" font-size="10" 
          fill="#4a148c" opacity="0.5">
        classDiagram class AbstractClass { &gt; +regularMetho...
    </text>
</svg>
</div>
            </div>
            
            <h3>Key Characteristics of Abstract Classes</h3>
            
            <div class="feature-list">
                <div class="feature">
                    <h4>Cannot Be Instantiated</h4>
                    <p>Abstract classes cannot be directly instantiated with the <code>new</code> keyword. They are meant to be extended by child classes.</p>
                    <pre>###CODE_BLOCK_1###</pre>
                </div>
                
                <div class="feature">
                    <h4>Can Contain Abstract Methods</h4>
                    <p>Abstract classes can declare abstract methods—methods without an implementation that must be defined by any non-abstract child class.</p>
                    <pre>###CODE_BLOCK_2###</pre>
                </div>
                
                <div class="feature">
                    <h4>Can Contain Concrete Methods</h4>
                    <p>Unlike interfaces, abstract classes can contain fully implemented (concrete) methods, providing common functionality to all child classes.</p>
                    <pre>###CODE_BLOCK_3###</pre>
                </div>
                
                <div class="feature">
                    <h4>Can Contain Properties</h4>
                    <p>Abstract classes can define properties (member variables) that child classes will inherit.</p>
                    <pre>###CODE_BLOCK_4###</pre>
                </div>
                
                <div class="feature">
                    <h4>Can Declare Constructor Methods</h4>
                    <p>Abstract classes can have constructor methods that child classes can call with <code>parent::__construct()</code>.</p>
                    <pre>###CODE_BLOCK_6###</pre>
                </div>
            </div>
            
            <div class="analogy">
                <h3>The Restaurant Menu Analogy</h3>
                <p>Think of an abstract class as a restaurant franchise template:</p>
                <ul>
                    <li>The franchise headquarters creates a menu template (abstract class) with certain required dishes (abstract methods) that every franchise location must serve.</li>
                    <li>The template also includes standard recipes (concrete methods) that all locations will use exactly as specified.</li>
                    <li>You can't open a "template restaurant" (instantiate the abstract class), but you can open franchise locations (concrete child classes) that implement the required dishes while using the standard recipes.</li>
                    <li>Each location (child class) must provide its own implementation of the required dishes (abstract methods) based on local tastes and ingredients, but all locations share the same core identity and standards.</li>
                </ul>
            </div>
        </section>

        <section id="abstract-classes-syntax">
            <h2>Abstract Class Syntax and Structure</h2>
            
            <p>Creating and working with abstract classes in PHP follows a specific syntax. Let's explore the structure of abstract classes and how to use them effectively.</p>
            
            <div class="code-example">
                <h3>Basic Abstract Class Syntax</h3>
                <pre>###CODE_BLOCK_7###</pre>
            </div>
            
            <h3>Abstract Method Rules</h3>
            
            <ul>
                <li>Abstract methods can only exist within abstract classes or interfaces</li>
                <li>Abstract methods cannot have an implementation (no method body)</li>
                <li>Abstract methods end with a semicolon instead of curly braces</li>
                <li>Abstract methods must specify access modifier (public, protected, or private)</li>
                <li>When a child class implements an abstract method, it must maintain the same or a less restrictive visibility</li>
                <li>The child implementation must match or have compatible parameter types and count</li>
            </ul>
            
            <div class="code-example">
                <h3>Extending an Abstract Class</h3>
                <pre>###CODE_BLOCK_8###</pre>
            </div>
            
            <h3>Multiple Levels of Inheritance with Abstract Classes</h3>
            
            <p>Abstract classes can extend other abstract classes, creating a chain of inheritance where each level can add its own abstract and concrete methods.</p>
            
            <div class="diagram">
                <h3>Multi-level Abstract Inheritance</h3>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
    
    <!-- Background -->
    <rect x="0" y="0" width="600" height="300" rx="8" fill="#f3e5f5" 
          stroke="#7b1fa2" stroke-width="2"/>
    
    <!-- Icon -->
    <g transform="translate(300, 100)">
        <rect x="-40" y="-30" width="80" height="60" rx="5" 
              fill="white" stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="-10" x2="20" y2="-10" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="0" x2="20" y2="0" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="10" x2="20" y2="10" 
              stroke="#7b1fa2" stroke-width="2"/>
    </g>
    
    <!-- Text -->
    <text x="300" y="180" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="18" 
          fill="#4a148c" font-weight="bold">
        Class Diagram
    </text>
    
    <text x="300" y="210" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="14" 
          fill="#4a148c" opacity="0.8">
        (Diagram converted to static representation)
    </text>
    
    <!-- Original content hint -->
    <text x="300" y="240" text-anchor="middle" 
          font-family="monospace" font-size="10" 
          fill="#4a148c" opacity="0.5">
        classDiagram class BaseAbstract { &gt; +baseMethod() ...
    </text>
</svg>
</div>
            </div>
            
            <div class="code-example">
                <h3>Multi-level Abstract Class Example</h3>
                <pre>###CODE_BLOCK_9###</pre>
            </div>
        </section>

        <section id="abstract-class-vs-interface">
            <h2>Abstract Classes vs. Interfaces</h2>
            
            <p>One of the most common questions in OOP is when to use an abstract class versus an interface. Both provide a way to define a contract that implementers must follow, but they have important differences.</p>
            
            <div class="comparison-table">
                <h3>Comparing Abstract Classes and Interfaces</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Feature</th>
                            <th>Abstract Class</th>
                            <th>Interface</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Instantiation</td>
                            <td>Cannot be instantiated</td>
                            <td>Cannot be instantiated</td>
                        </tr>
                        <tr>
                            <td>Method implementation</td>
                            <td>Can contain both concrete and abstract methods</td>
                            <td>Can only contain method signatures (PHP 8.0+ allows default method implementations)</td>
                        </tr>
                        <tr>
                            <td>Properties</td>
                            <td>Can contain properties with any visibility</td>
                            <td>Can only contain public constants (no variables)</td>
                        </tr>
                        <tr>
                            <td>Constructor</td>
                            <td>Can have a constructor</td>
                            <td>Cannot have a constructor</td>
                        </tr>
                        <tr>
                            <td>Inheritance</td>
                            <td>Single inheritance only (can extend one class)</td>
                            <td>Multiple inheritance (can implement many interfaces)</td>
                        </tr>
                        <tr>
                            <td>Access modifiers</td>
                            <td>Can use public, protected, and private</td>
                            <td>All methods are implicitly public</td>
                        </tr>
                        <tr>
                            <td>Use case</td>
                            <td>"Is-a" relationship with shared implementation</td>
                            <td>"Can-do" relationship (capability contract)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <div class="code-example">
                <h3>Abstract Class vs. Interface Example</h3>
                <pre>###CODE_BLOCK_10###</pre>
            </div>
            
            <h3>When to Use Abstract Classes vs. Interfaces</h3>
            
            <div class="decision-guide">
                <h4>Use Abstract Classes When:</h4>
                <ul>
                    <li>You want to share code among related classes (common implementation)</li>
                    <li>The classes that extend your abstract class have many common methods or fields</li>
                    <li>You need to declare non-public members (protected/private methods or properties)</li>
                    <li>You need constructor logic in the base type</li>
                    <li>You're building a framework with base functionality that will be customized</li>
                    <li>You have an "is-a" relationship that shares behavior</li>
                </ul>
                
                <h4>Use Interfaces When:</h4>
                <ul>
                    <li>You expect unrelated classes to implement your interface</li>
                    <li>You want to specify a behavior but not its implementation</li>
                    <li>You need multiple inheritance (a class can implement multiple interfaces)</li>
                    <li>You're defining a contract for a plugin system or API</li>
                    <li>You have a "can-do" relationship (capability) rather than an "is-a" relationship</li>
                </ul>
            </div>
            
            <div class="pro-tip">
                <h4>Best of Both Worlds: Using Interfaces and Abstract Classes Together</h4>
                <p>Many robust designs use both abstract classes and interfaces together. An abstract class can implement interfaces, providing a partial implementation for its child classes.</p>
                <div class="code-example">
                    <pre>###CODE_BLOCK_11###</pre>
                </div>
            </div>
        </section>

        <section id="real-world-examples">
            <h2>Abstract Classes in the Real World</h2>
            
            <h3>Example 1: WordPress Widget Framework</h3>
            
            <p>WordPress uses an abstract class for its widget framework. The <code>WP_Widget</code> abstract class provides base functionality for all widget types while requiring specific implementations for widget rendering and form handling.</p>
            
            <div class="code-example">
                <h4>WordPress Widget Abstract Class (Simplified)</h4>
                <pre>###CODE_BLOCK_13###</pre>
            </div>
            
            <h3>Example 2: Database Abstraction Layer</h3>
            
            <p>Database abstraction layers often use abstract classes to provide a common interface for different database systems while allowing system-specific implementations.</p>
            
            <div class="code-example">
                <h4>Database Abstraction Layer Example</h4>
                <pre>###CODE_BLOCK_14###</pre>
            </div>
            
            <h3>Example 3: Template Method Design Pattern</h3>
            
            <p>The Template Method pattern is a common use case for abstract classes. It defines the skeleton of an algorithm but allows subclasses to override specific steps.</p>
            
            <div class="code-example">
                <h4>Report Generator Example</h4>
                <pre>###CODE_BLOCK_15###</pre>
            </div>
        </section>

        <section id="wordpress-examples">
            <h2>Abstract Classes in WordPress Development</h2>
            
            <p>WordPress core and many popular plugins make extensive use of abstract classes. Understanding these patterns will help you create more professional WordPress extensions.</p>
            
            <h3>WordPress REST API Controllers</h3>
            
            <p>The WordPress REST API uses abstract classes to define the structure of controller classes for different resources.</p>
            
            <div class="code-example">
                <h4>WordPress REST Controller Example</h4>
                <pre>###CODE_BLOCK_16###</pre>
            </div>
            
            <h3>The WordPress Admin Settings API</h3>
            
            <p>Creating an abstract class for admin pages can help standardize your plugin's admin interface while allowing for customization.</p>
            
            <div class="code-example">
                <h4>Custom Admin Page Abstract Class</h4>
                <pre>###CODE_BLOCK_17###</pre>
            </div>
        </section>

        <section id="abstract-class-best-practices">
            <h2>Best Practices for Abstract Classes</h2>
            
            <div class="best-practices">
                <div class="practice">
                    <h3>Keep the Abstract Interface Minimal</h3>
                    <p>Only make methods abstract when they absolutely must be implemented differently in child classes. If a method has a sensible default implementation, make it concrete with the option to override.</p>
                    <pre>###CODE_BLOCK_18###</pre>
                </div>
                
                <div class="practice">
                    <h3>Use Template Method Pattern</h3>
                    <p>The Template Method pattern is a natural fit for abstract classes. Define the skeleton of an algorithm in the parent class, deferring some steps to subclasses.</p>
                    <pre>###CODE_BLOCK_19###</pre>
                </div>
                
                <div class="practice">
                    <h3>Provide Constructors for Common Initialization</h3>
                    <p>Use constructors in abstract classes to handle common initialization code that all child classes need.</p>
                    <pre>###CODE_BLOCK_20###</pre>
                </div>
                
                <div class="practice">
                    <h3>Use Class Constants for Configuration</h3>
                    <p>Abstract classes can define constants that child classes can use for configuration without overriding.</p>
                    <pre>###CODE_BLOCK_21###</pre>
                </div>
                
                <div class="practice">
                    <h3>Document Abstract Methods Thoroughly</h3>
                    <p>Abstract methods should have thorough PHPDoc comments to guide implementers on what the method should do and return.</p>
                    <pre>###CODE_BLOCK_22###</pre>
                </div>
                
                <div class="practice">
                    <h3>Use Protected Instead of Private for Extensibility</h3>
                    <p>Use protected visibility for properties and methods that child classes may need to access or override. Private members aren't available to child classes.</p>
                    <pre>###CODE_BLOCK_23###</pre>
                </div>
            </div>
        </section>

        <section id="homework">
            <h2>Homework: Extend Your Previous Class with Abstract Classes</h2>
            
            <div class="assignment">
                <h3>Assignment: Building a Product Framework with Abstract Classes</h3>
                
                <p>For this assignment, you'll refactor the Product class hierarchy from the previous homework to use abstract classes. You'll create an abstract base class that defines the common structure and behavior for different types of products.</p>
                
                <h4>Requirements:</h4>
                <ol>
                    <li>Create an abstract <code>AbstractProduct</code> class with:
                        <ul>
                            <li>Protected properties for name, price, and SKU</li>
                            <li>A constructor that sets these properties</li>
                            <li>Getters and setters for each property</li>
                            <li>At least one concrete method that provides common functionality</li>
                            <li>At least one abstract method that child classes must implement</li>
                        </ul>
                    </li>
                    <li>Create at least two concrete product classes (e.g., <code>PhysicalProduct</code> and <code>DigitalProduct</code>) that extend the abstract class</li>
                    <li>Implement all required abstract methods in each child class</li>
                    <li>Add at least one unique method to each child class that makes sense for its type</li>
                    <li>Create a test script that demonstrates the functionality of your classes</li>
                </ol>
                
                <h4>Starter Code:</h4>
                <pre>###CODE_BLOCK_27###</pre>
                
                <h4>Bonus Challenges:</h4>
                <ul>
                    <li>Create a third product type (e.g., <code>SubscriptionProduct</code>) with unique properties and behavior</li>
                    <li>Add an abstract <code>save()</code> method that each product implements differently (e.g., saving to database, file, etc.)</li>
                    <li>Create a <code>ProductFactory</code> class that can create different product types based on input</li>
                    <li>Implement the Template Method pattern in the abstract class for a complex operation like "process order"</li>
                </ul>
            </div>
        </section>

        <section class="summary">
            <h2>Key Takeaways</h2>
            
            <div class="takeaways">
                <div class="takeaway">
                    <h3>Purpose of Abstract Classes</h3>
                    <p>Abstract classes provide a way to define a common structure and behavior for related classes while requiring specific implementations for certain methods.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Abstract vs. Concrete Methods</h3>
                    <p>Abstract classes can contain both abstract methods (without implementation) and concrete methods (with implementation), allowing for shared code and required customization.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Class Hierarchy</h3>
                    <p>Abstract classes are ideal for creating class hierarchies where child classes share common properties and methods but need to implement specific behaviors differently.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Abstract vs. Interface</h3>
                    <p>Use abstract classes when you have an "is-a" relationship with shared implementation. Use interfaces when you have a "can-do" relationship or need multiple inheritance.</p>
                </div>
                
                <div class="takeaway">
                    <h3>Template Method Pattern</h3>
                    <p>Abstract classes are perfect for implementing the Template Method pattern, which defines the skeleton of an algorithm but allows subclasses to override specific steps.</p>
                </div>
            </div>
            
            <div class="next-steps">
                <h3>Next Steps</h3>
                <p>Now that you understand abstract classes, we'll continue exploring advanced OOP concepts with interfaces, which provide another way to define contracts between classes. Together, abstract classes and interfaces give you powerful tools for creating flexible, maintainable PHP applications and WordPress extensions.</p>
            </div>
        </section>

        <section class="footer">
            <h2>Feedback and Questions</h2>
            
            <p>If you have any questions or need clarification on abstract classes, feel free to reach out. Your feedback is valuable for improving this course!</p>  
            <p>Happy coding!</p>
        </section>
        
        <section class="resources">
            <h2>Additional Resources</h2>
            
            <ul>
                <li><a href="https://www.php.net/manual/en/language.oop5.abstract.php" target="_blank">PHP Manual: Class Abstraction</a></li>
                <li><a href="https://phptherightway.com/#object-oriented-programming" target="_blank">PHP The Right Way: Object-Oriented Programming</a></li>
                <li><a href="https://developer.wordpress.org/plugins/intro/" target="_blank">WordPress Plugin Developer Handbook</a></li>
                <li><a href="https://refactoring.guru/design-patterns/template-method" target="_blank">Template Method Design Pattern</a></li>
                <li><a href="https://developer.wordpress.org/rest-api/extending-the-rest-api/controller-classes/" target="_blank">WordPress REST API: Controller Classes</a></li>
                <li><a href="https://carlalexander.ca/polymorphism-wordpress-abstract-classes/" target="_blank">Polymorphism and WordPress: Abstract Classes</a></li>
                <li><a href="https://wordpress.stackexchange.com/questions/102752/common-abstract-class-for-plugins" target="_blank">Common Abstract Classes for WordPress Plugins</a></li>
            </ul>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>PHP Constants - PHP WordPress Course</title>
<meta content="Define and use constants in PHP applications." name="description"/>
<meta content="PHP, WordPress, web development, php, constants" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>

<style>
/* Global diagram and SVG styles */
.mermaid-converted,
.svg-container,
.diagram {
    margin: 1.5rem auto !important;
    padding: 1rem !important;
    text-align: center !important;
    overflow: hidden !important;
    max-width: 100% !important;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #dee2e6;
}

.mermaid-converted svg,
.svg-container svg,
.diagram svg {
    max-width: 100% !important;
    height: auto !important;
    display: block !important;
    margin: 0 auto !important;
}

/* Fix for decision diamonds */
.decision-node polygon,
polygon.decision {
    fill: #fff3cd !important;
    stroke: #856404 !important;
    stroke-width: 2px !important;
}

/* Remove excessive bottom margins */
.mermaid-converted + *,
.svg-container + *,
.diagram + * {
    margin-top: 1.5rem !important;
}

/* Center content vertically in containers */
.mermaid-converted > *,
.svg-container > *,
.diagram > * {
    vertical-align: middle;
}
</style>

</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Constants</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 1</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/review_php_setup.html">Review PHP Setup</a></li>
<li><a class="sidebar-link" href="/02module/php_tags_basic_syntax.html">PHP Tags &amp; Syntax</a></li>
<li><a class="sidebar-link" href="/02module/php_output_methods.html">Output Methods</a></li>
<li><a class="sidebar-link" href="/02module/php_comments.html">Comments in PHP</a></li>
<li><a class="sidebar-link" href="/02module/php_variables_and_data_types.html">Variables &amp; Data Types</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/php_constants.html">Constants</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_script.html">Homework: PHP Script</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/01module/project_static_site.html">← Prev: Module 1: Project</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_arithmetic_operators.html">Next: Session 2: Operators →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>PHP Constants</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 30 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: Variables &amp; Data Types</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Understand PHP variables and constants</li>
<li>Master PHP data types</li>
<li>Learn variable scope and lifetime</li>
<li>Apply best practices for naming and usage</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="intro">
            <h2>Introduction to PHP Constants</h2>
            <p>Welcome to our exploration of constants in PHP! While we've already learned about variables, constants serve a different but equally important purpose in PHP programming. Unlike variables, which can change throughout program execution, constants provide a way to store values that should remain unchanged.</p>
            
            <p>In this session, we'll learn what constants are, how to define and use them, and discover their role in WordPress development. We'll also explore best practices for working with constants in your PHP projects.</p>

<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 1300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="1300" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="127.77777777777777" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="205.55555555555554" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="283.3333333333333" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="361.1111111111111" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="438.88888888888886" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="516.6666666666666" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="594.4444444444443" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="127.77777777777777" y1="200" x2="672.2222222222222" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="127.77777777777777" y1="200" x2="225.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="205.55555555555554" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="205.55555555555554" y1="200" x2="575.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="205.55555555555554" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="244.44444444444446" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[Scope] A </text>
    <line x1="283.33333333333337" y1="80" x2="361.1111111111111" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="322.22222222222223" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; E[Predefined Constants] A </text>
    <line x1="283.33333333333337" y1="80" x2="516.6666666666666" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.0" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; G[WordPress Constants] B </text>
    <line x1="516.6666666666667" y1="80" x2="672.2222222222222" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="594.4444444444445" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; B2[const keyword] C </text>
    <line x1="127.77777777777777" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="263.8888888888889" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C2[Class] D </text>
    <rect x="221.33333333333337" y="55" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">PHP Constants</text>
    <rect x="434.66666666666674" y="55" width="164" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Definition Methods</text>
    <rect x="67.77777777777777" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="127.77777777777777" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Scope</text>
    <rect x="145.55555555555554" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="205.55555555555554" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Data Types</text>
    <rect x="193.33333333333331" y="175" width="180" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.3333333333333" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Predefined Constants</text>
    <rect x="291.1111111111111" y="175" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="361.1111111111111" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Magic Constants</text>
    <rect x="352.88888888888886" y="175" width="172" height="50" 
          rx="5" class="node-rect"/>
    <text x="438.88888888888886" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">WordPress Constants</text>
    <rect x="446.66666666666663" y="175" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666666" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">define function</text>
    <rect x="532.4444444444443" y="175" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="594.4444444444443" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">const keyword</text>
    <rect x="612.2222222222222" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="672.2222222222222" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Global</text>
    <rect x="165.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Class</text>
    <rect x="340.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Scalar Types</text>
    <rect x="505.0" y="295" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Array Constants</text>
</svg>
</div>
            
            <p class="analogy"><strong>Analogy:</strong> If variables are like chalkboards where you can write, erase, and rewrite values as needed, constants are like stone engravings – once carved, their content remains fixed and unchangeable. Just as ancient stone tablets preserved important laws and truths for generations, constants in your code preserve critical values that should never change during execution.</p>
        </section>

        <section class="constant-basics">
            <h2>Understanding PHP Constants</h2>
            <p>Constants are identifiers (names) for simple values that cannot be changed during the execution of a script. Once defined, constants remain the same for the entire script.</p>
            
            <h3>Key Characteristics of Constants</h3>
            <ul>
                <li><strong>Immutable:</strong> Once defined, a constant's value cannot be changed or undefined</li>
                <li><strong>No $ Prefix:</strong> Unlike variables, constants do not use the $ prefix</li>
                <li><strong>Global Scope:</strong> Constants are automatically global and can be accessed from anywhere in the script</li>
                <li><strong>Scalar Types:</strong> Constants can only hold scalar values (boolean, integer, float, string) and arrays (as of PHP 7.0)</li>
                <li><strong>Cannot Be Redefined:</strong> Attempting to redefine an existing constant will result in a warning</li>
            </ul>
            
            <h3>Constants vs. Variables</h3>
            <p>Let's compare constants with variables to better understand their differences:</p>
            
            <table class="comparison-table">
                <thead>
                    <tr>
                        <th>Feature</th>
                        <th>Constants</th>
                        <th>Variables</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Naming Prefix</td>
                        <td>No prefix</td>
                        <td>$ prefix</td>
                    </tr>
                    <tr>
                        <td>Scope</td>
                        <td>Global by default</td>
                        <td>Depends on declaration location</td>
                    </tr>
                    <tr>
                        <td>Mutability</td>
                        <td>Cannot be changed once defined</td>
                        <td>Can be reassigned at any time</td>
                    </tr>
                    <tr>
                        <td>Declaration</td>
                        <td>define() function or const keyword</td>
                        <td>Assignment using = operator</td>
                    </tr>
                    <tr>
                        <td>Case-sensitivity</td>
                        <td>Case-sensitive by default (can be made case-insensitive with define())</td>
                        <td>Always case-sensitive</td>
                    </tr>
                    <tr>
                        <td>Data Types</td>
                        <td>Scalar types and arrays</td>
                        <td>Any data type</td>
                    </tr>
                </tbody>
            </table>
            
            <pre><code>&lt;?php
// Variable example
$maxUsers = 100;
$maxUsers = 200;  // Can be changed/reassigned
echo $maxUsers;   // Outputs: 200

// Constant example
define('MAX_LOGIN_ATTEMPTS', 5);
// define('MAX_LOGIN_ATTEMPTS', 10);  // This would produce a warning
echo MAX_LOGIN_ATTEMPTS;  // Outputs: 5
?&gt;</code></pre>
            
            <p class="analogy"><strong>Analogy:</strong> Think of variables as adjustable thermostats that you can turn up or down as needed, while constants are like temperature limits built into the device itself that prevent it from operating outside safe parameters. The thermostats ($variables) can be adjusted within the constraints defined by the built-in limits (constants).</p>
        </section>

        <section class="defining-constants">
            <h2>Defining Constants in PHP</h2>
            <p>PHP provides two main ways to define constants: the <code>define()</code> function and the <code>const</code> keyword. Each has its own use cases and limitations.</p>
            
            <h3>Using the define() Function</h3>
            <p>The <code>define()</code> function is the traditional way to create constants in PHP. It can be used anywhere in your code, even inside conditional blocks or functions.</p>
            
            <pre><code>&lt;?php
// Basic syntax: define(name, value, case-insensitive)
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASS', 'secret123');
define('DB_NAME', 'my_database');

// Case-insensitive constant (third parameter set to true)
define('SITE_STATUS', 'live', true);
echo SITE_STATUS;  // Outputs: live
echo site_status;  // Also outputs: live (case-insensitive)

// Constants with numeric values
define('PI', 3.14159);
define('MAX_USERS', 1000);

// Boolean constants
define('DEBUG_MODE', true);
define('ALLOW_REGISTRATIONS', false);

// Constants can be used in expressions
$circumference = 2 * PI * $radius;

// Constants defined at runtime
if ($environment === 'production') {
    define('ERROR_REPORTING', false);
} else {
    define('ERROR_REPORTING', true);
}

// Array constants (PHP 7.0+)
define('ALLOWED_EXTENSIONS', ['jpg', 'png', 'gif', 'webp']);
echo ALLOWED_EXTENSIONS[0];  // Outputs: jpg
?&gt;</code></pre>
            
            <div class="important-note">
                <h4>Important Note:</h4>
                <p>While the third parameter of <code>define()</code> allows for case-insensitive constants, this feature is deprecated as of PHP 7.3. Always use case-sensitive constants (the default) for new code.</p>
            </div>
            
            <h3>Using the const Keyword</h3>
            <p>The <code>const</code> keyword provides an alternative way to define constants. It has some key differences from <code>define()</code>:</p>
            
            <pre><code>&lt;?php
// Basic syntax with const keyword
const DB_HOST = 'localhost';
const DB_USER = 'root';
const DB_PASS = 'secret123';
const DB_NAME = 'my_database';

// Numeric and boolean constants
const PI = 3.14159;
const MAX_UPLOAD_SIZE = 10485760;  // 10MB in bytes
const DEBUG_MODE = true;

// Array constants (PHP 5.6+)
const SUPPORTED_LANGUAGES = ['en', 'fr', 'es', 'de'];
echo SUPPORTED_LANGUAGES[2];  // Outputs: es

// Using constants in expressions (PHP 5.6+)
const TAX_RATE = 0.08;
const SHIPPING_COST = 5.99;
const PRICE_WITH_TAX = 19.99 * (1 + TAX_RATE);

// This would cause an error - const must be defined at the top level of scope
// if ($environment === 'production') {
//     const ERROR_REPORTING = false;  // Error! Cannot use const in blocks
// }

// Instead, you must define it at the top level
const ERROR_REPORTING = true;
?&gt;</code></pre>
            
            <h3>Key Differences Between define() and const</h3>
            <ul>
                <li><strong>Scope:</strong> <code>define()</code> can be used anywhere, whereas <code>const</code> can only be used at the top level of a file or inside class definitions</li>
                <li><strong>Runtime:</strong> <code>define()</code> creates constants at runtime, while <code>const</code> defines them at compile time</li>
                <li><strong>Conditionals:</strong> <code>define()</code> can be used in conditional blocks, <code>const</code> cannot</li>
                <li><strong>Case-sensitivity:</strong> <code>define()</code> has an option for case-insensitivity, <code>const</code> is always case-sensitive</li>
                <li><strong>Expressions:</strong> Prior to PHP 5.6, <code>const</code> could only use static values, not expressions</li>
                <li><strong>Performance:</strong> <code>const</code> can be slightly faster since it's resolved at compile time</li>
            </ul>

<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 1100" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="1100" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="150.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="250.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="350.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="450.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="550.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="150.0" y1="200" x2="650.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="150.0" y1="200" x2="225.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="150.0" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="150.0" y1="200" x2="575.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="250.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="266.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[&quot;const Keyword&quot;] B </text>
    <line x1="516.6666666666667" y1="80" x2="450.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="483.33333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; B2[&quot;Can be used anywhere&quot;] B </text>
    <line x1="516.6666666666667" y1="80" x2="650.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="583.3333333333334" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; B4[&quot;Slightly slower&quot;] C </text>
    <line x1="150.0" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="275.0" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C2[&quot;Only at top level or in classes&quot;] C </text>
    <rect x="201.33333333333337" y="55" width="164" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Defining Constants</text>
    <rect x="438.66666666666674" y="55" width="156" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">define() Function</text>
    <rect x="88.0" y="175" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="150.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">const Keyword</text>
    <rect x="168.0" y="175" width="164" height="50" 
          rx="5" class="node-rect"/>
    <text x="250.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Runtime definition</text>
    <rect x="260.0" y="175" width="180" height="50" 
          rx="5" class="node-rect"/>
    <text x="350.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Can be used anywhere</text>
    <rect x="328.0" y="175" width="244" height="50" 
          rx="5" class="node-rect"/>
    <text x="450.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Can be defined conditionally</text>
    <rect x="480.0" y="175" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="550.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Slightly slower</text>
    <rect x="548.0" y="175" width="204" height="50" 
          rx="5" class="node-rect"/>
    <text x="650.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Compile time definition</text>
    <rect x="91.0" y="295" width="268" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Only at top level or in classes</text>
    <rect x="306.0" y="295" width="188" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Always case-sensitive</text>
    <rect x="505.0" y="295" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Slightly faster</text>
</svg>
</div>
            
            <h3>When to Use Each Method</h3>
            <p>Choose the appropriate method based on your needs:</p>
            <ul>
                <li>Use <code>define()</code> when:
                    <ul>
                        <li>You need to define constants conditionally</li>
                        <li>Constants need to be defined in a function or block</li>
                        <li>You're working with older PHP versions</li>
                    </ul>
                </li>
                <li>Use <code>const</code> when:
                    <ul>
                        <li>Defining class constants</li>
                        <li>Working at the top level of a file</li>
                        <li>Aiming for slightly better performance</li>
                        <li>Using PHP 5.6+ and want to use expressions</li>
                    </ul>
                </li>
            </ul>
        </section>

        <section class="constant-types">
            <h2>Types of Constants in PHP</h2>
            <p>PHP has several different types of constants, each with specific uses and characteristics.</p>
            
            <h3>User-Defined Constants</h3>
            <p>These are the constants that you define in your own code using <code>define()</code> or <code>const</code>.</p>
            
            <pre><code>&lt;?php
// Regular user-defined constants
define('API_KEY', 'ab12cd34ef56gh78');
const VERSION = '1.2.3';

// Check if a constant is defined
if (defined('API_KEY')) {
    echo "API key is defined as: " . API_KEY;
}

// Get all defined constants (user-defined only)
$userConstants = get_defined_constants(true)['user'];
print_r($userConstants);
?&gt;</code></pre>
            
            <h3>Predefined Constants</h3>
            <p>PHP comes with many built-in constants that provide information about the PHP environment, configuration, and more.</p>
            
            <pre><code>&lt;?php
// PHP version
echo "PHP Version: " . PHP_VERSION;  // e.g., 8.0.0

// Operating system
echo "Running on: " . PHP_OS;  // e.g., Linux, Darwin, WIN32

// Maximum integer value
echo "Max integer: " . PHP_INT_MAX;  // Depends on system architecture

// Line break in the current environment
echo "Text with a line break" . PHP_EOL . "Next line";

// PHP information
echo "Using Zend Engine version: " . zend_version();
echo "Extension directory: " . PHP_EXTENSION_DIR;

// Directory separators
echo "Directory separator: " . DIRECTORY_SEPARATOR;  // '/' on Unix, '\' on Windows
echo "Path separator: " . PATH_SEPARATOR;  // ':' on Unix, ';' on Windows
?&gt;</code></pre>
            
            <h3>Magic Constants</h3>
            <p>Magic constants are special identifiers that change their value depending on where they are used. They are resolved at compile time.</p>
            
            <pre><code>&lt;?php
// Current line number
echo "This is line " . __LINE__;

// Current file (full path)
echo "This file: " . __FILE__;

// Directory of the current file
echo "In directory: " . __DIR__;

// Current function name
function showInfo() {
    echo "Inside function: " . __FUNCTION__;
}
showInfo();

// Current class name
class MyClass {
    public function getClassName() {
        return __CLASS__;
    }
    
    public function getMethod() {
        return __METHOD__;  // ClassName::methodName
    }
    
    // PHP 5.5+
    public function getTrait() {
        return __TRAIT__;  // If inside a trait
    }
}

// PHP 5.3+
namespace MyNamespace {
    echo "Current namespace: " . __NAMESPACE__;
}
?&gt;</code></pre>
            
            <div class="important-note">
                <h4>Magic Constants are Not Really Constants</h4>
                <p>Unlike regular constants, magic constants can have different values depending on where they're used in your code. They're not truly constant, but they can't be changed by your code either.</p>
            </div>
            
            <h3>Class Constants</h3>
            <p>Constants can also be defined within classes using the <code>const</code> keyword. These constants belong to the class, not to any specific instance.</p>
            
            <pre><code>&lt;?php
class Database {
    // Class constants
    const HOST = 'localhost';
    const USER = 'admin';
    const PASS = 'secure_password';
    const NAME = 'my_app';
    
    // Visibility modifiers for constants (PHP 7.1+)
    public const DRIVER = 'mysql';
    private const CHARSET = 'utf8mb4';
    protected const COLLATION = 'utf8mb4_unicode_ci';
    
    public function getConnectionString() {
        // Access constants with self::
        return self::DRIVER . ':host=' . self::HOST . ';dbname=' . self::NAME;
    }
}

// Access class constants outside the class using ::
echo Database::HOST;  // Outputs: localhost
echo Database::DRIVER;  // Outputs: mysql
// echo Database::CHARSET;  // Error - private constant

// Using class constants with inheritance
class ProductDatabase extends Database {
    const NAME = 'products';  // Override parent constant
    
    public function testInheritance() {
        // parent:: refers to parent class constants
        echo "Parent DB: " . parent::NAME;  // Outputs: my_app
        echo "Current DB: " . self::NAME;   // Outputs: products
    }
}
?&gt;</code></pre>
            
            <svg width="650" height="300" viewBox="0 0 650 300" style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
                <!-- Background -->
                <rect x="0" y="0" width="650" height="300" fill="#f8f9fa" rx="10" ry="10" />
                
                <!-- Title -->
                <text x="325" y="30" font-size="20" fill="#333" text-anchor="middle" font-weight="bold">PHP Constant Types</text>
                
                <!-- User-Defined Constants -->
                <rect x="20" y="60" width="140" height="200" rx="10" ry="10" fill="#e3f2fd" stroke="#2196f3" />
                <text x="90" y="90" font-size="16" fill="#0d47a1" text-anchor="middle" font-weight="bold">User-Defined</text>
                <text x="90" y="120" font-size="14" fill="#333" text-anchor="middle">Created by your code</text>
                <text x="90" y="150" font-size="14" fill="#333" text-anchor="middle">define() or const</text>
                <text x="90" y="180" font-size="14" fill="#333" text-anchor="middle">API_KEY</text>
                <text x="90" y="210" font-size="14" fill="#333" text-anchor="middle">MAX_USERS</text>
                <text x="90" y="240" font-size="14" fill="#333" text-anchor="middle">DEBUG_MODE</text>
                
                <!-- Predefined Constants -->
                <rect x="180" y="60" width="140" height="200" rx="10" ry="10" fill="#e8f5e9" stroke="#4caf50" />
                <text x="250" y="90" font-size="16" fill="#1b5e20" text-anchor="middle" font-weight="bold">Predefined</text>
                <text x="250" y="120" font-size="14" fill="#333" text-anchor="middle">Built into PHP</text>
                <text x="250" y="150" font-size="14" fill="#333" text-anchor="middle">PHP_VERSION</text>
                <text x="250" y="180" font-size="14" fill="#333" text-anchor="middle">PHP_OS</text>
                <text x="250" y="210" font-size="14" fill="#333" text-anchor="middle">PHP_INT_MAX</text>
                <text x="250" y="240" font-size="14" fill="#333" text-anchor="middle">PHP_EOL</text>
                
                <!-- Magic Constants -->
                <rect x="340" y="60" width="140" height="200" rx="10" ry="10" fill="#fff8e1" stroke="#ffc107" />
                <text x="410" y="90" font-size="16" fill="#e65100" text-anchor="middle" font-weight="bold">Magic</text>
                <text x="410" y="120" font-size="14" fill="#333" text-anchor="middle">Context-dependent</text>
                <text x="410" y="150" font-size="14" fill="#333" text-anchor="middle">__LINE__</text>
                <text x="410" y="180" font-size="14" fill="#333" text-anchor="middle">__FILE__</text>
                <text x="410" y="210" font-size="14" fill="#333" text-anchor="middle">__DIR__</text>
                <text x="410" y="240" font-size="14" fill="#333" text-anchor="middle">__CLASS__</text>
                
                <!-- Class Constants -->
                <rect x="500" y="60" width="140" height="200" rx="10" ry="10" fill="#f3e5f5" stroke="#9c27b0" />
                <text x="570" y="90" font-size="16" fill="#4a148c" text-anchor="middle" font-weight="bold">Class Constants</text>
                <text x="570" y="120" font-size="14" fill="#333" text-anchor="middle">Belong to classes</text>
                <text x="570" y="150" font-size="14" fill="#333" text-anchor="middle">Constants inside</text>
                <text x="570" y="170" font-size="14" fill="#333" text-anchor="middle">class definitions</text>
                <text x="570" y="200" font-size="14" fill="#333" text-anchor="middle">Access with</text>
                <text x="570" y="220" font-size="14" fill="#333" text-anchor="middle">Class::CONSTANT</text>
                <text x="570" y="240" font-size="14" fill="#333" text-anchor="middle">or self::CONSTANT</text>
            </svg>
        </section>

        <section class="constants-wp">
            <h2>Constants in WordPress</h2>
            <p>WordPress makes extensive use of constants for configuration, debugging, and controlling behavior. Understanding these constants is crucial for effective WordPress development.</p>
            
            <h3>Core WordPress Constants</h3>
            <p>WordPress defines many constants in its core files, particularly in wp-config.php. These constants control critical aspects of the WordPress installation.</p>
            
            <pre><code>&lt;?php
// Database configuration
define('DB_NAME', 'wordpress_db');
define('DB_USER', 'db_user');
define('DB_PASSWORD', 'db_password');
define('DB_HOST', 'localhost');
define('DB_CHARSET', 'utf8');
define('DB_COLLATE', '');

// Authentication unique keys and salts
define('AUTH_KEY',         'put your unique phrase here');
define('SECURE_AUTH_KEY',  'put your unique phrase here');
define('LOGGED_IN_KEY',    'put your unique phrase here');
define('NONCE_KEY',        'put your unique phrase here');
define('AUTH_SALT',        'put your unique phrase here');
define('SECURE_AUTH_SALT', 'put your unique phrase here');
define('LOGGED_IN_SALT',   'put your unique phrase here');
define('NONCE_SALT',       'put your unique phrase here');

// WordPress database table prefix
$table_prefix = 'wp_';

// Debug mode
define('WP_DEBUG', false);
?&gt;</code></pre>
            
            <h3>Common WordPress Configuration Constants</h3>
            <p>Beyond the basic setup constants, WordPress recognizes many additional constants that modify its behavior:</p>
            
            <pre><code>&lt;?php
// Debug related constants
define('WP_DEBUG', true);  // Enable WordPress debug mode
define('WP_DEBUG_LOG', true);  // Log errors to wp-content/debug.log
define('WP_DEBUG_DISPLAY', false);  // Don't display errors on site
define('SCRIPT_DEBUG', true);  // Use unminified scripts and styles

// Performance related
define('COMPRESS_CSS', true);  // Compress CSS
define('COMPRESS_SCRIPTS', true);  // Compress JavaScript
define('CONCATENATE_SCRIPTS', true);  // Concatenate JavaScript
define('DISABLE_WP_CRON', true);  // Disable WordPress cron

// Content and post-related
define('AUTOSAVE_INTERVAL', 300);  // Autosave every 5 minutes (300 seconds)
define('WP_POST_REVISIONS', 5);  // Store only 5 revisions per post
define('MEDIA_TRASH', true);  // Enable trash for media files

// Multi-site configuration
define('WP_ALLOW_MULTISITE', true);  // Allow multi-site
define('MULTISITE', true);  // Enable multi-site
define('SUBDOMAIN_INSTALL', true);  // Use subdomains for sites

// Security related
define('DISALLOW_FILE_EDIT', true);  // Disable file editing in admin
define('DISALLOW_FILE_MODS', true);  // Disable all file modifications
define('FORCE_SSL_ADMIN', true);  // Force SSL for admin area

// Custom content directory
define('WP_CONTENT_DIR', dirname(__FILE__) . '/custom-content');
define('WP_CONTENT_URL', 'https://example.com/custom-content');

// Memory limits
define('WP_MEMORY_LIMIT', '256M');  // PHP memory limit for normal requests
define('WP_MAX_MEMORY_LIMIT', '512M');  // PHP memory limit for admin
?&gt;</code></pre>
            
            <h3>Using Constants in WordPress Themes and Plugins</h3>
            <p>Constants are helpful for defining configuration values in themes and plugins:</p>
            
            <pre><code>&lt;?php
/**
 * Plugin Name: My Awesome Plugin
 * Version: 1.0.0
 */

// Define plugin constants
define('MY_PLUGIN_VERSION', '1.0.0');
define('MY_PLUGIN_PATH', plugin_dir_path(__FILE__));
define('MY_PLUGIN_URL', plugin_dir_url(__FILE__));
define('MY_PLUGIN_BASENAME', plugin_basename(__FILE__));

// Use constants throughout the plugin
function my_plugin_enqueue_scripts() {
    wp_enqueue_style(
        'my-plugin-style',
        MY_PLUGIN_URL . 'assets/css/style.css',
        [],
        MY_PLUGIN_VERSION
    );
    
    wp_enqueue_script(
        'my-plugin-script',
        MY_PLUGIN_URL . 'assets/js/script.js',
        ['jquery'],
        MY_PLUGIN_VERSION,
        true
    );
}
add_action('wp_enqueue_scripts', 'my_plugin_enqueue_scripts');

// Include plugin files
require_once MY_PLUGIN_PATH . 'includes/functions.php';

/**
 * Theme constants (in functions.php)
 */
define('MY_THEME_VERSION', '2.0.0');
define('MY_THEME_DIR', get_template_directory());
define('MY_THEME_URI', get_template_directory_uri());

// Theme options constants
define('MY_THEME_DEFAULT_LAYOUT', 'sidebar-right');
define('MY_THEME_DEFAULT_COLOR_SCHEME', 'light');
?&gt;</code></pre>
            
            <h3>Checking WordPress Constants</h3>
            <p>WordPress provides functions to check if constants are defined and to get their values:</p>
            
            <pre><code>&lt;?php
// Check if a constant is defined
if (defined('WP_DEBUG') && WP_DEBUG) {
    error_log('Debugging is enabled');
}

// Check for development environment
if (!defined('ENVIRONMENT')) {
    define('ENVIRONMENT', 'production');
}

// Different behavior based on environment
if (ENVIRONMENT === 'development') {
    // Development-specific code
    define('API_ENDPOINT', 'https://dev-api.example.com');
} else {
    // Production code
    define('API_ENDPOINT', 'https://api.example.com');
}

// Get upload directory information (uses constants internally)
$upload_dir = wp_upload_dir();
echo "Upload base directory: " . $upload_dir['basedir'];
?&gt;</code></pre>
            
            <p class="analogy"><strong>Analogy:</strong> WordPress constants are like the control panel of a complex machine. Each switch (constant) configures a different aspect of the system's behavior. Some switches have default positions, but operators (developers) can reconfigure them to meet specific needs. The control panel is designed so that once a switch is set, it can't be changed during operation, ensuring consistent behavior.</p>
        </section>

        <section class="practical-examples">
            <h2>Practical Applications of Constants</h2>
            <p>Let's explore some real-world examples of how constants are useful in PHP and WordPress development.</p>
            
            <h3>Configuration Management</h3>
            <p>Constants are ideal for storing configuration values that shouldn't change during program execution:</p>
            
            <pre><code>&lt;?php
// config.php
define('DB_HOST', 'localhost');
define('DB_USER', 'root');
define('DB_PASS', 'your_password');
define('DB_NAME', 'your_database');

define('SITE_URL', 'https://example.com');
define('ADMIN_EMAIL', 'admin@example.com');

define('DEBUG_MODE', true);
define('ERROR_REPORTING_LEVEL', E_ALL);

// Using the configuration
// db_connection.php
function get_database_connection() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);
    
    if ($conn->connect_error) {
        if (DEBUG_MODE) {
            die('Connection failed: ' . $conn->connect_error);
        } else {
            die('Database connection error. Please try again later.');
        }
    }
    
    return $conn;
}
?&gt;</code></pre>
            
            <h3>Path and URL Management</h3>
            <p>Constants help manage file paths and URLs consistently throughout an application:</p>
            
            <pre><code>&lt;?php
// In a plugin or theme
define('MY_APP_PATH', dirname(__FILE__));
define('MY_APP_URL', plugin_dir_url(__FILE__));
define('MY_APP_INCLUDES', MY_APP_PATH . '/includes');
define('MY_APP_TEMPLATES', MY_APP_PATH . '/templates');
define('MY_APP_ASSETS', MY_APP_URL . 'assets');

// Using these constants
function my_app_include_template($template_name) {
    $template_path = MY_APP_TEMPLATES . '/' . $template_name . '.php';
    
    if (file_exists($template_path)) {
        include $template_path;
    } else {
        error_log('Template not found: ' . $template_path);
    }
}

function my_app_enqueue_assets() {
    wp_enqueue_style('my-app-css', MY_APP_ASSETS . '/css/style.css');
    wp_enqueue_script('my-app-js', MY_APP_ASSETS . '/js/script.js');
}
?&gt;</code></pre>
            
            <h3>Feature Flags and Control Flow</h3>
            <p>Constants can act as feature flags to enable or disable functionality:</p>
            
            <pre><code>&lt;?php
// Feature flags
define('ENABLE_COMMENTS', true);
define('ENABLE_USER_REGISTRATION', false);
define('ENABLE_PREMIUM_FEATURES', false);
define('MAINTENANCE_MODE', false);

// Using feature flags
function display_comments($post_id) {
    if (ENABLE_COMMENTS) {
        // Code to display comments
        $comments = get_comments(['post_id' => $post_id]);
        // ...
    } else {
        echo 'Comments are currently disabled.';
    }
}

function check_maintenance_mode() {
    if (MAINTENANCE_MODE) {
        // Show maintenance page to non-admin users
        if (!current_user_can('manage_options')) {
            include 'templates/maintenance.php';
            exit;
        }
    }
}
add_action('template_redirect', 'check_maintenance_mode');
?&gt;</code></pre>
            
            <h3>Defining API Endpoints</h3>
            <p>Constants can help manage API endpoints in a centralized way:</p>
            
            <pre><code>&lt;?php
// API endpoints
define('API_BASE_URL', 'https://api.example.com/v1');
define('API_USERS_ENDPOINT', API_BASE_URL . '/users');
define('API_POSTS_ENDPOINT', API_BASE_URL . '/posts');
define('API_COMMENTS_ENDPOINT', API_BASE_URL . '/comments');

// API keys
define('API_KEY', 'your-secret-api-key');
define('API_SECRET', 'your-api-secret');

// Using these constants
function get_user_data($user_id) {
    $url = API_USERS_ENDPOINT . '/' . $user_id;
    
    $response = wp_remote_get($url, [
        'headers' => [
            'Authorization' => 'Bearer ' . API_KEY,
            'Content-Type' => 'application/json'
        ]
    ]);
    
    if (is_wp_error($response)) {
        return null;
    }
    
    return json_decode(wp_remote_retrieve_body($response), true);
}
?&gt;</code></pre>
            
            <h3>Error Codes and Status Messages</h3>
            <p>Constants help standardize error codes and status messages:</p>
            
            <pre><code>&lt;?php
// Error and status codes
define('STATUS_SUCCESS', 0);
define('ERROR_INVALID_INPUT', 1001);
define('ERROR_DATABASE', 1002);
define('ERROR_API_UNAVAILABLE', 1003);
define('ERROR_UNAUTHORIZED', 1004);

// Error messages
define('MSG_INVALID_EMAIL', 'Please enter a valid email address.');
define('MSG_PASSWORD_TOO_SHORT', 'Password must be at least 8 characters.');
define('MSG_USERNAME_TAKEN', 'This username is already taken.');

// Using these constants
function validate_user_input($data) {
    $errors = [];
    
    if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
        $errors['email'] = MSG_INVALID_EMAIL;
    }
    
    if (strlen($data['password']) < 8) {
        $errors['password'] = MSG_PASSWORD_TOO_SHORT;
    }
    
    if (username_exists($data['username'])) {
        $errors['username'] = MSG_USERNAME_TAKEN;
    }
    
    if (empty($errors)) {
        return [
            'status' => STATUS_SUCCESS,
            'data' => $data
        ];
    }
    
    return [
        'status' => ERROR_INVALID_INPUT,
        'errors' => $errors
    ];
}
?&gt;</code></pre>
            
            <h3>Constants for Enum-like Behavior</h3>
            <p>PHP doesn't have native enums until PHP 8.1, so constants can simulate this behavior:</p>
            
            <pre><code>&lt;?php
// User roles as constants
define('ROLE_ADMIN', 'administrator');
define('ROLE_EDITOR', 'editor');
define('ROLE_AUTHOR', 'author');
define('ROLE_SUBSCRIBER', 'subscriber');

// Order statuses
define('ORDER_STATUS_PENDING', 'pending');
define('ORDER_STATUS_PROCESSING', 'processing');
define('ORDER_STATUS_COMPLETED', 'completed');
define('ORDER_STATUS_CANCELLED', 'cancelled');
define('ORDER_STATUS_REFUNDED', 'refunded');

// Using enum-like constants
function check_user_permission($user_id, $required_role) {
    $user = get_userdata($user_id);
    
    if (!$user) {
        return false;
    }
    
    switch ($required_role) {
        case ROLE_ADMIN:
            return in_array('administrator', $user->roles);
        
        case ROLE_EDITOR:
            return in_array('administrator', $user->roles) || 
                   in_array('editor', $user->roles);
        
        case ROLE_AUTHOR:
            return in_array('administrator', $user->roles) || 
                   in_array('editor', $user->roles) || 
                   in_array('author', $user->roles);
        
        case ROLE_SUBSCRIBER:
            return true;  // All logged-in users have at least subscriber permissions
            
        default:
            return false;
    }
}

// Check if user can edit posts
if (check_user_permission($user_id, ROLE_AUTHOR)) {
    // User can edit posts
}
?&gt;</code></pre>
        </section>

        <section class="best-practices">
            <h2>Best Practices for Working with Constants</h2>
            <p>Let's explore some best practices for defining and using constants in your PHP and WordPress projects.</p>
            
            <h3>Naming Conventions</h3>
            <ul>
                <li><strong>Use ALL_UPPERCASE:</strong> Constants are conventionally written in all uppercase with underscores separating words</li>
                <li><strong>Be Descriptive:</strong> Use clear, descriptive names that indicate the constant's purpose</li>
                <li><strong>Add Prefixes:</strong> In plugins and themes, prefix constants to avoid conflicts with WordPress core or other code</li>
                <li><strong>Group Related Constants:</strong> Use common prefixes for related constants</li>
            </ul>
            
            <pre><code>&lt;?php
// Good constant naming
define('MAX_LOGIN_ATTEMPTS', 5);
define('DEFAULT_PAGINATION_LIMIT', 10);
define('COMPANY_NAME', 'Acme Corporation');

// Plugin-specific constants with prefixes
define('MYPLUGIN_VERSION', '1.0.0');
define('MYPLUGIN_MIN_WP_VERSION', '5.0');
define('MYPLUGIN_PATH', plugin_dir_path(__FILE__));

// Grouped constants with common prefixes
define('API_URL', 'https://api.example.com');
define('API_KEY', 'your-api-key');
define('API_TIMEOUT', 30);

// Bad constant naming (avoid these)
define('Maxattempts', 5);  // Mixed case - should be all uppercase
define('m', 10);  // Too short and non-descriptive
define('timeout', 30);  // Lowercase - should be uppercase
?&gt;</code></pre>
            
            <h3>Organizing Constants</h3>
            <ul>
                <li><strong>Define in One Place:</strong> Keep constants in a centralized configuration file when possible</li>
                <li><strong>Group by Purpose:</strong> Organize constants into logical groups</li>
                <li><strong>Document Constants:</strong> Add comments explaining what each constant does</li>
                <li><strong>Consider Class Constants:</strong> Use class constants for better organization in object-oriented code</li>
            </ul>
            
            <pre><code>&lt;?php
/**
 * Configuration file for MyPlugin
 *
 * Contains all constants used throughout the plugin.
 */

// Plugin information
define('MYPLUGIN_VERSION', '1.0.0');
define('MYPLUGIN_NAME', 'My Awesome Plugin');
define('MYPLUGIN_MIN_WP_VERSION', '5.0');

// Paths and URLs
define('MYPLUGIN_PATH', plugin_dir_path(__FILE__));
define('MYPLUGIN_URL', plugin_dir_url(__FILE__));
define('MYPLUGIN_INCLUDES_PATH', MYPLUGIN_PATH . 'includes/');
define('MYPLUGIN_TEMPLATES_PATH', MYPLUGIN_PATH . 'templates/');
define('MYPLUGIN_ASSETS_URL', MYPLUGIN_URL . 'assets/');

// Database
define('MYPLUGIN_DB_VERSION', '1.0');
define('MYPLUGIN_TABLE_PREFIX', 'myplugin_');

// Feature flags
define('MYPLUGIN_ENABLE_CACHING', true);
define('MYPLUGIN_ENABLE_REST_API', true);
define('MYPLUGIN_ENABLE_ADMIN_NOTICES', true);

// Limits and thresholds
define('MYPLUGIN_CACHE_EXPIRATION', 86400);  // 24 hours in seconds
define('MYPLUGIN_MAX_ITEMS_PER_PAGE', 20);
define('MYPLUGIN_MIN_PASSWORD_LENGTH', 8);
?&gt;</code></pre>
            
            <h3>Security Considerations</h3>
            <ul>
                <li><strong>Don't Store Secrets:</strong> Avoid storing sensitive information in constants that might be exposed</li>
                <li><strong>Use Environment Variables:</strong> For sensitive information, use environment variables instead of constants</li>
                <li><strong>Validate Dynamic Values:</strong> If using constants derived from user input, validate thoroughly</li>
            </ul>
            
            <pre><code>&lt;?php
// Bad practice - sensitive data in constants
define('DB_PASSWORD', 'very_secret_p@ssw0rd');  // Avoid this

// Better approach - use environment variables
define('DB_PASSWORD', getenv('DB_PASSWORD'));

// Even better - with a fallback
define('DB_PASSWORD', getenv('DB_PASSWORD') ? getenv('DB_PASSWORD') : 'default_password');

// Best - with validation
$db_password = getenv('DB_PASSWORD');
if (!$db_password) {
    die('Database password environment variable not set.');
}
define('DB_PASSWORD', $db_password);
?&gt;</code></pre>
            
            <h3>Constants vs. Configuration Classes</h3>
            <p>For larger projects, consider using configuration classes instead of global constants:</p>
            
            <pre><code>&lt;?php
// Traditional constants approach
define('MYPLUGIN_API_URL', 'https://api.example.com');
define('MYPLUGIN_API_KEY', 'your-api-key');
define('MYPLUGIN_API_TIMEOUT', 30);

// Configuration class approach
class MyPlugin_Config {
    const VERSION = '1.0.0';
    const MIN_WP_VERSION = '5.0';
    
    // API configuration
    private static $api = [
        'url' => 'https://api.example.com',
        'key' => null,
        'timeout' => 30
    ];
    
    // Getter methods with validation
    public static function get_api_url() {
        return self::$api['url'];
    }
    
    public static function get_api_key() {
        if (null === self::$api['key']) {
            self::$api['key'] = getenv('MYPLUGIN_API_KEY');
            
            if (!self::$api['key']) {
                error_log('API key not configured');
                return false;
            }
        }
        
        return self::$api['key'];
    }
    
    public static function get_api_timeout() {
        return self::$api['timeout'];
    }
}

// Using the configuration class
$api_url = MyPlugin_Config::get_api_url();
$api_key = MyPlugin_Config::get_api_key();

if ($api_key) {
    // Make API request
}
?&gt;</code></pre>
            
            <h3>Conditional Definition and Checking</h3>
            <ul>
                <li><strong>Check Before Defining:</strong> Avoid redefining constants</li>
                <li><strong>Provide Defaults:</strong> Define default values when needed</li>
                <li><strong>Use defined() Function:</strong> Check if constants exist before using them</li>
            </ul>
            
            <pre><code>&lt;?php
// Check before defining
if (!defined('DEBUG_MODE')) {
    define('DEBUG_MODE', false);
}

// Define constants based on environment
if (!defined('ENVIRONMENT')) {
    if (isset($_SERVER['SERVER_NAME']) && strpos($_SERVER['SERVER_NAME'], 'dev.') === 0) {
        define('ENVIRONMENT', 'development');
    } elseif (isset($_SERVER['SERVER_NAME']) && strpos($_SERVER['SERVER_NAME'], 'staging.') === 0) {
        define('ENVIRONMENT', 'staging');
    } else {
        define('ENVIRONMENT', 'production');
    }
}

// Check before using
function log_debug_message($message) {
    if (defined('DEBUG_MODE') && DEBUG_MODE) {
        error_log($message);
    }
}

// Allow overriding constants in wp-config.php
function myplugin_setup_constants() {
    // Define constants only if not already defined in wp-config.php
    if (!defined('MYPLUGIN_CACHE_ENABLED')) {
        define('MYPLUGIN_CACHE_ENABLED', true);
    }
    
    if (!defined('MYPLUGIN_API_URL')) {
        define('MYPLUGIN_API_URL', 'https://api.example.com');
    }
}
add_action('plugins_loaded', 'myplugin_setup_constants');
?&gt;</code></pre>
        </section>

        <section class="exercise">
            <h2>Practical Exercise: WordPress Theme Configuration</h2>
            <p>Let's put our knowledge of constants to work by creating a configuration system for a WordPress theme.</p>
            
            <h3>Exercise Objectives</h3>
            <p>Create a theme configuration file that uses constants to define:</p>
            <ul>
                <li>Theme information and version</li>
                <li>Paths and URLs for theme assets</li>
                <li>Feature flags for enabling/disabling theme features</li>
                <li>Default settings for theme options</li>
            </ul>
            
            <h3>Theme Configuration File (config.php)</h3>
            <pre><code>&lt;?php
/**
 * Theme Configuration
 * 
 * This file contains all theme constants and configuration settings.
 * It should be included at the beginning of functions.php.
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

/**
 * Theme Information
 */
define('MYTHEME_VERSION', '1.0.0');
define('MYTHEME_NAME', 'Modern WordPress Theme');
define('MYTHEME_MIN_WP_VERSION', '5.7');
define('MYTHEME_MIN_PHP_VERSION', '7.4');

/**
 * Paths and URLs
 */
define('MYTHEME_DIR', get_template_directory());
define('MYTHEME_URI', get_template_directory_uri());
define('MYTHEME_ASSETS_DIR', MYTHEME_DIR . '/assets');
define('MYTHEME_ASSETS_URI', MYTHEME_URI . '/assets');
define('MYTHEME_INCLUDES_DIR', MYTHEME_DIR . '/includes');
define('MYTHEME_TEMPLATES_DIR', MYTHEME_DIR . '/templates');

/**
 * Feature Flags
 * These can be overridden in wp-config.php before themes are loaded
 */
if (!defined('MYTHEME_ENABLE_COMMENTS')) {
    define('MYTHEME_ENABLE_COMMENTS', true);
}

if (!defined('MYTHEME_ENABLE_SIDEBAR')) {
    define('MYTHEME_ENABLE_SIDEBAR', true);
}

if (!defined('MYTHEME_ENABLE_POST_THUMBNAILS')) {
    define('MYTHEME_ENABLE_POST_THUMBNAILS', true);
}

if (!defined('MYTHEME_ENABLE_CUSTOM_LOGO')) {
    define('MYTHEME_ENABLE_CUSTOM_LOGO', true);
}

if (!defined('MYTHEME_ENABLE_CUSTOM_HEADER')) {
    define('MYTHEME_ENABLE_CUSTOM_HEADER', false);
}

if (!defined('MYTHEME_ENABLE_CUSTOM_BACKGROUND')) {
    define('MYTHEME_ENABLE_CUSTOM_BACKGROUND', false);
}

/**
 * Default Settings
 */
define('MYTHEME_DEFAULT_LAYOUT', 'right-sidebar');  // Options: right-sidebar, left-sidebar, no-sidebar
define('MYTHEME_DEFAULT_COLOR_SCHEME', 'light');    // Options: light, dark
define('MYTHEME_DEFAULT_FONT', 'sans-serif');       // Options: sans-serif, serif
define('MYTHEME_DEFAULT_FONT_SIZE', 16);            // Base font size in pixels
define('MYTHEME_EXCERPT_LENGTH', 55);               // Number of words in excerpts
define('MYTHEME_CONTAINER_WIDTH', 1200);            // Container width in pixels

/**
 * Social Media Defaults
 */
define('MYTHEME_SOCIAL_FACEBOOK', '');
define('MYTHEME_SOCIAL_TWITTER', '');
define('MYTHEME_SOCIAL_INSTAGRAM', '');
define('MYTHEME_SOCIAL_LINKEDIN', '');
define('MYTHEME_SOCIAL_YOUTUBE', '');

/**
 * Other Settings
 */
define('MYTHEME_COPYRIGHT_TEXT', '© ' . date('Y') . ' ' . get_bloginfo('name'));
define('MYTHEME_GOOGLE_FONTS_URL', 'https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&family=Roboto:wght@400;500;700&display=swap');
?&gt;</code></pre>
            
            <h3>Using the Configuration in functions.php</h3>
            <pre><code>&lt;?php
/**
 * Theme functions and definitions
 */

// Include configuration
require_once get_template_directory() . '/includes/config.php';

// Check PHP and WordPress version requirements
function mytheme_check_requirements() {
    $php_version = phpversion();
    $wp_version = get_bloginfo('version');
    $errors = [];
    
    if (version_compare($php_version, MYTHEME_MIN_PHP_VERSION, '<')) {
        $errors[] = sprintf(
            __('This theme requires PHP version %s or higher. Your current version is %s.', 'mytheme'),
            MYTHEME_MIN_PHP_VERSION,
            $php_version
        );
    }
    
    if (version_compare($wp_version, MYTHEME_MIN_WP_VERSION, '<')) {
        $errors[] = sprintf(
            __('This theme requires WordPress version %s or higher. Your current version is %s.', 'mytheme'),
            MYTHEME_MIN_WP_VERSION,
            $wp_version
        );
    }
    
    if (!empty($errors)) {
        foreach ($errors as $error) {
            echo '<div class="notice notice-error"><p>' . $error . '</p></div>';
        }
        
        // Switch to default theme
        switch_theme(WP_DEFAULT_THEME);
        return false;
    }
    
    return true;
}
add_action('after_setup_theme', 'mytheme_check_requirements');

// Theme setup function
function mytheme_setup() {
    // Load theme text domain
    load_theme_textdomain('mytheme', MYTHEME_DIR . '/languages');
    
    // Enable features based on constants
    if (MYTHEME_ENABLE_POST_THUMBNAILS) {
        add_theme_support('post-thumbnails');
    }
    
    if (MYTHEME_ENABLE_CUSTOM_LOGO) {
        add_theme_support('custom-logo', [
            'height'      => 100,
            'width'       => 400,
            'flex-height' => true,
            'flex-width'  => true,
        ]);
    }
    
    if (MYTHEME_ENABLE_CUSTOM_HEADER) {
        add_theme_support('custom-header');
    }
    
    if (MYTHEME_ENABLE_CUSTOM_BACKGROUND) {
        add_theme_support('custom-background');
    }
    
    // Register menus
    register_nav_menus([
        'primary' => __('Primary Menu', 'mytheme'),
        'footer'  => __('Footer Menu', 'mytheme'),
    ]);
    
    // Other theme setup...
}
add_action('after_setup_theme', 'mytheme_setup');

// Enqueue scripts and styles
function mytheme_enqueue_scripts() {
    // Enqueue Google Fonts
    wp_enqueue_style(
        'mytheme-google-fonts',
        MYTHEME_GOOGLE_FONTS_URL,
        [],
        MYTHEME_VERSION
    );
    
    // Enqueue main stylesheet
    wp_enqueue_style(
        'mytheme-style',
        get_stylesheet_uri(),
        [],
        MYTHEME_VERSION
    );
    
    // Enqueue theme script
    wp_enqueue_script(
        'mytheme-script',
        MYTHEME_ASSETS_URI . '/js/script.js',
        ['jquery'],
        MYTHEME_VERSION,
        true
    );
    
    // Pass constants to JavaScript
    wp_localize_script(
        'mytheme-script',
        'mythemeVars',
        [
            'layout'      => MYTHEME_DEFAULT_LAYOUT,
            'colorScheme' => MYTHEME_DEFAULT_COLOR_SCHEME,
            'fontSize'    => MYTHEME_DEFAULT_FONT_SIZE,
            'ajaxUrl'     => admin_url('admin-ajax.php'),
            'themeUri'    => MYTHEME_URI,
        ]
    );
}
add_action('wp_enqueue_scripts', 'mytheme_enqueue_scripts');

// Optional: Disable comments if the constant is set to false
if (!MYTHEME_ENABLE_COMMENTS) {
    // Close comments on the front-end
    add_filter('comments_open', '__return_false', 20, 2);
    add_filter('pings_open', '__return_false', 20, 2);
    
    // Hide existing comments
    add_filter('comments_array', '__return_empty_array', 10, 2);
    
    // Remove comments page from admin
    add_action('admin_menu', function() {
        remove_menu_page('edit-comments.php');
    });
    
    // Remove comments from admin bar
    add_action('wp_before_admin_bar_render', function() {
        global $wp_admin_bar;
        $wp_admin_bar->remove_menu('comments');
    });
}

// Include additional files
require_once MYTHEME_INCLUDES_DIR . '/template-functions.php';
require_once MYTHEME_INCLUDES_DIR . '/customizer.php';
require_once MYTHEME_INCLUDES_DIR . '/widget-areas.php';
?&gt;</code></pre>
            
            <h3>Using Constants in Templates</h3>
            <pre><code>&lt;?php
/**
 * Footer template part
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}
?&gt;

&lt;footer class="site-footer"&gt;
    &lt;div class="container"&gt;
        &lt;div class="footer-widgets"&gt;
            &lt;?php dynamic_sidebar('footer-widgets'); ?&gt;
        &lt;/div&gt;
        
        &lt;?php if (has_nav_menu('footer')): ?&gt;
            &lt;nav class="footer-navigation"&gt;
                &lt;?php 
                wp_nav_menu([
                    'theme_location' => 'footer',
                    'menu_class'     => 'footer-menu',
                    'depth'          => 1,
                ]);
                ?&gt;
            &lt;/nav&gt;
        &lt;?php endif; ?&gt;
        
        &lt;div class="site-info"&gt;
            &lt;p class="copyright"&gt;&lt;?php echo MYTHEME_COPYRIGHT_TEXT; ?&gt;&lt;/p&gt;
            
            &lt;?php if (MYTHEME_SOCIAL_FACEBOOK || MYTHEME_SOCIAL_TWITTER || MYTHEME_SOCIAL_INSTAGRAM): ?&gt;
                &lt;div class="social-links"&gt;
                    &lt;?php if (MYTHEME_SOCIAL_FACEBOOK): ?&gt;
                        &lt;a href="&lt;?php echo esc_url(MYTHEME_SOCIAL_FACEBOOK); ?&gt;" target="_blank" rel="noopener noreferrer"&gt;Facebook&lt;/a&gt;
                    &lt;?php endif; ?&gt;
                    
                    &lt;?php if (MYTHEME_SOCIAL_TWITTER): ?&gt;
                        &lt;a href="&lt;?php echo esc_url(MYTHEME_SOCIAL_TWITTER); ?&gt;" target="_blank" rel="noopener noreferrer"&gt;Twitter&lt;/a&gt;
                    &lt;?php endif; ?&gt;
                    
                    &lt;?php if (MYTHEME_SOCIAL_INSTAGRAM): ?&gt;
                        &lt;a href="&lt;?php echo esc_url(MYTHEME_SOCIAL_INSTAGRAM); ?&gt;" target="_blank" rel="noopener noreferrer"&gt;Instagram&lt;/a&gt;
                    &lt;?php endif; ?&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/footer&gt;
</code></pre>
            
            <h3>Exercise Extension</h3>
            <p>Try extending this exercise by:</p>
            <ol>
                <li>Adding more feature flags for different theme components</li>
                <li>Creating class constants in a Theme_Config class</li>
                <li>Implementing environment-specific settings (development vs. production)</li>
                <li>Adding override capabilities in the WordPress Customizer</li>
            </ol>
        </section>

        <section class="conclusion">
            <h2>Summary and Key Takeaways</h2>
            <p>We've covered a lot of ground in our exploration of PHP constants. Here are the key takeaways:</p>
            
            <ul>
                <li><strong>Constants are Immutable:</strong> Once defined, constants cannot be changed during script execution</li>
                <li><strong>Two Definition Methods:</strong> Use <code>define()</code> or <code>const</code> based on your specific needs</li>
                <li><strong>Types of Constants:</strong> User-defined constants, predefined PHP constants, magic constants, and class constants</li>
                <li><strong>WordPress Uses Constants Extensively:</strong> For configuration, debugging, and controlling behavior</li>
                <li><strong>Best Practices:</strong> Use consistent naming conventions, organize constants logically, and follow security principles</li>
                <li><strong>Practical Applications:</strong> Configuration management, path/URL handling, feature flags, and more</li>
            </ul>
            
            <p class="analogy"><strong>Final Analogy:</strong> Programming with constants is like building a house on a solid foundation. The constants provide stable, unchanging reference points that the rest of your code can depend on. Just as a well-designed foundation supports the entire structure above it, well-designed constants support your entire application's architecture and make it more robust and maintainable.</p>
            
            <p>As you continue your PHP and WordPress development journey, you'll find constants to be invaluable tools for creating maintainable, configurable, and robust applications. They help establish fixed reference points in your code and make it easier to manage configuration across different environments and installations.</p>
        </section>

        <section class="resources">
            <h2>Additional Resources</h2>
            
            <h3>PHP Documentation</h3>
            <ul>
                <li><a href="https://www.php.net/manual/en/language.constants.php" target="_blank">PHP Constants</a></li>
                <li><a href="https://www.php.net/manual/en/function.define.php" target="_blank">define() Function</a></li>
                <li><a href="https://www.php.net/manual/en/function.defined.php" target="_blank">defined() Function</a></li>
                <li><a href="https://www.php.net/manual/en/function.constant.php" target="_blank">constant() Function</a></li>
                <li><a href="https://www.php.net/manual/en/language.oop5.constants.php" target="_blank">Class Constants</a></li>
            </ul>
            
            <h3>WordPress Documentation</h3>
            <ul>
                <li><a href="https://developer.wordpress.org/apis/wp-config-php/" target="_blank">wp-config.php</a></li>
                <li><a href="https://wordpress.org/support/article/debugging-in-wordpress/" target="_blank">Debugging in WordPress</a></li>
                <li><a href="https://developer.wordpress.org/plugins/plugin-basics/plugin-directory/" target="_blank">Plugin Basics</a></li>
                <li><a href="https://codex.wordpress.org/Must_Use_Plugins" target="_blank">Must-Use Plugins (Constants in mu-plugins)</a></li>
            </ul>
            
            <h3>Books and Tutorials</h3>
            <ul>
                <li>"Modern PHP: New Features and Good Practices" by Josh Lockhart</li>
                <li>"WordPress Plugin Development Cookbook" by Yannick Lefebvre</li>
                <li>"Professional WordPress Plugin Development" by Brad Williams, Justin Tadlock, and John James Jacoby</li>
            </ul>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 2 24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
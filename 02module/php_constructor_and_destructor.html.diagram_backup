<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>Constructor and Destructor Methods in PHP - PHP WordPress Course</title>
<meta content="Welcome to our deep dive into constructors and destructors! These special methods are crucial for properly initializing and cleaning up objects in PHP. Whether " name="description"/>
<meta content="PHP, WordPress, web development, constructors, and, destructors" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">Constructors and Destructors</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 8</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_oop_concepts.html">OOP Concepts</a></li>
<li><a class="sidebar-link" href="/02module/php_creating_classes_and instantiating_objects.html">Classes &amp; Objects</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/php_constructor_and_destructor.html">Constructor &amp; Destructor</a></li>
<li><a class="sidebar-link" href="/02module/php_access_modifiers.html">Access Modifiers</a></li>
<li><a class="sidebar-link" href="/02module/php_this_keyword.html">The $this Keyword</a></li>
<li><a class="sidebar-link" href="/02module/php_static_properties_and_methods.html">Static Properties</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_create_simple_class.html">Homework: Classes</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_html_forms_review.html">← Prev: Session 7: Forms</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_inheritance.html">Next: Session 9: Advanced OOP →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>Constructor and Destructor Methods in PHP</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 45 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: Object-Oriented PHP</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP programming concepts</li>
<li>Write clean, maintainable code</li>
<li>Apply best practices</li>
<li>Build dynamic applications</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="lecture-intro">
            <h2>The Birth and Death of Objects: Constructors and Destructors</h2>
            <p>Welcome to our deep dive into constructors and destructors! These special methods are crucial for properly initializing and cleaning up objects in PHP. Whether you're building WordPress plugins, themes, or custom applications, mastering these concepts will help you write more efficient and reliable code.</p>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 1000" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="1000" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="200" x2="283.33333333333337" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="320" x2="516.6666666666667" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="320" x2="400.0" y2="440" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.00000000000006" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[&quot;Constructor Called(__construct)&quot;] C </text>
    <line x1="516.6666666666667" y1="200" x2="516.6666666666667" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; E[&quot;Object No Longer Needed&quot;] E </text>
    <rect x="92.66666666666669" y="55" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="166.66666666666669" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Class Definition</text>
    <rect x="161.33333333333337" y="55" width="244" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Object Creation(new keyword)</text>
    <rect x="149.33333333333337" y="175" width="268" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Constructor Called(__construct)</text>
    <rect x="358.66666666666674" y="175" width="316" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Object Lifetime(Methods &amp; Properties)</text>
    <rect x="181.33333333333337" y="295" width="204" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Object No Longer Needed</text>
    <rect x="390.66666666666674" y="295" width="252" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Destructor Called(__destruct)</text>
    <rect x="330.0" y="415" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="440" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Memory Released</text>
    <rect x="340.0" y="55" width="120" height="50" 
          rx="25" class="node-rect"/>
    <text x="400.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">new keyword</text>
    <rect x="456.66666666666674" y="55" width="120" height="50" 
          rx="25" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">__destruct</text>
    <rect x="543.3333333333334" y="55" width="180" height="50" 
          rx="25" class="node-rect"/>
    <text x="633.3333333333334" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Methods &amp; Properties</text>
</svg>
</div>
            
            <p>Think of constructors and destructors as the bookends of an object's lifecycle. The constructor is like a birth certificate—officiating an object's arrival and setting up its initial conditions. The destructor is like a will—handling final tasks before the object fades away.</p>
        </section>

        <section class="constructors">
            <h2>Constructors: Setting the Stage</h2>
            
            <h3>What Are Constructors?</h3>
            <p>A constructor is a special method that is automatically called when an object is created using the <code>new</code> keyword. In PHP, constructors are defined using the <code>__construct()</code> method name.</p>
            
            <div class="svg-container">
                <svg width="600" height="300" viewBox="0 0 600 300">
                    <!-- Class Definition Box -->
                    <rect x="50" y="30" width="500" height="240" rx="5" ry="5" fill="#f5f5f5" stroke="#ccc" stroke-width="2"/>
                    <text x="300" y="20" font-family="Arial" font-size="16" text-anchor="middle" font-weight="bold" fill="#333">Class Definition</text>
                    
                    <!-- Properties -->
                    <rect x="70" y="50" width="200" height="100" rx="5" ry="5" fill="#e3f2fd" stroke="#1e88e5" stroke-width="2"/>
                    <text x="170" y="70" font-family="Arial" font-size="14" text-anchor="middle" font-weight="bold" fill="#333">Properties</text>
                    <text x="170" y="95" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">public $title;</text>
                    <text x="170" y="115" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">public $content;</text>
                    <text x="170" y="135" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">private $author;</text>
                    
                    <!-- Constructor -->
                    <rect x="70" y="160" width="200" height="90" rx="5" ry="5" fill="#d4f1f9" stroke="#1e88e5" stroke-width="2"/>
                    <text x="170" y="180" font-family="Arial" font-size="14" text-anchor="middle" font-weight="bold" fill="#333">Constructor</text>
                    <text x="170" y="205" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">__construct($title, $content) {</text>
                    <text x="170" y="225" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">  $this->title = $title;</text>
                    <text x="170" y="245" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">}</text>
                    
                    <!-- Object Instance -->
                    <rect x="330" y="50" width="200" height="200" rx="5" ry="5" fill="#fff8e1" stroke="#ff9800" stroke-width="2"/>
                    <text x="430" y="70" font-family="Arial" font-size="14" text-anchor="middle" font-weight="bold" fill="#333">Object Instance</text>
                    <text x="430" y="95" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">$post = new BlogPost(</text>
                    <text x="430" y="115" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">  "Hello World",</text>
                    <text x="430" y="135" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">  "This is content..."</text>
                    <text x="430" y="155" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">);</text>
                    
                    <text x="430" y="185" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">$post->title = "Hello World"</text>
                    <text x="430" y="205" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">$post->content = "This is..."</text>
                    <text x="430" y="225" font-family="Arial" font-size="12" text-anchor="middle" fill="#333">author is private</text>
                    
                    <!-- Arrow from constructor to instance -->
                    <path d="M 270,205 L 330,150" stroke="#333" stroke-width="2" stroke-dasharray="5,5" marker-end="url(#arrow)"/>
                    <text x="310" y="190" font-family="Arial" font-size="10" text-anchor="middle" fill="#333">Initializes</text>
                    
                    <!-- Arrow definitions -->
                    <defs>
                        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
                            <path d="M0,0 L0,6 L9,3 z" fill="#333" />
                        </marker>
                    </defs>
                </svg>
            </div>
            
            <h3>The Anatomy of a Constructor</h3>
            <pre><code>&lt;?php
class BlogPost {
    // Properties
    public $title;
    public $content;
    public $author;
    public $publishDate;
    
    // Constructor
    public function __construct($title, $content, $author = 'Anonymous', $publishDate = null) {
        // Initialize properties
        $this->title = $title;
        $this->content = $content;
        $this->author = $author;
        
        // Set default value if none provided
        $this->publishDate = $publishDate ?: date('Y-m-d H:i:s');
        
        // Additional initialization logic
        $this->sanitizeContent();
        
        echo "A new BlogPost object has been created!<br>";
    }
    
    private function sanitizeContent() {
        // Sanitize the content
        $this->content = strip_tags($this->content, '<p><a><strong><em>');
    }
}

// Creating objects with the constructor
$post1 = new BlogPost(
    "Introduction to WordPress",
    "WordPress is a popular CMS that powers over 40% of websites...",
    "Jane Developer"
);

// Object with default author
$post2 = new BlogPost(
    "PHP Tips and Tricks",
    "Here are some useful PHP functions you might not know about..."
);

echo "Post 1 author: {$post1->author}<br>";  // Jane Developer
echo "Post 2 author: {$post2->author}<br>";  // Anonymous
?&gt;</code></pre>

            <h3>Key Constructor Features</h3>
            <ul>
                <li><strong>Automatic invocation:</strong> Called implicitly when creating a new object</li>
                <li><strong>Property initialization:</strong> Sets initial state of the object</li>
                <li><strong>Parameter handling:</strong> Can accept arguments to customize initialization</li>
                <li><strong>Default values:</strong> Can provide fallbacks for optional parameters</li>
                <li><strong>Complex initialization:</strong> Can call other methods or perform complex logic</li>
            </ul>
        </section>

        <section class="constructor-evolution">
            <h2>The Evolution of PHP Constructors</h2>
            
            <p>If you work with legacy code or older WordPress plugins, you might encounter an older constructor style:</p>
            
            <pre><code>&lt;?php
class OldStyleClass {
    // Old-style constructor (PHP 4 style)
    public function OldStyleClass() {
        echo "This is an old-style constructor";
    }
}

class ModernClass {
    // Modern constructor (PHP 5+ style)
    public function __construct() {
        echo "This is a modern constructor";
    }
}

// Both will work in PHP 5.x, but the old style is deprecated in PHP 7+
$old = new OldStyleClass(); // Works in older versions, deprecated in PHP 7+
$new = new ModernClass();   // The recommended approach
?&gt;</code></pre>

            <div class="best-practice">
                <h4>Best Practice</h4>
                <p>Always use <code>__construct()</code> for constructors in your PHP code. The old style constructors were deprecated in PHP 7.0 and were removed in PHP 8.0. WordPress now requires PHP 7.0+ for newer versions, so it's important to follow modern practices.</p>
            </div>
        </section>

        <section class="wordpress-constructors">
            <h2>Constructors in WordPress Development</h2>
            
            <p>Constructors play a vital role in WordPress plugin and theme development. Let's explore some common patterns:</p>
            
            <h3>Plugin Initialization Pattern</h3>
            <pre><code>&lt;?php
/**
 * Plugin Name: Featured Content Slider
 * Description: Adds a featured content slider to your site
 * Version: 1.0.0
 */
 
class Featured_Content_Slider {
    // Singleton instance
    private static $instance = null;
    
    // Plugin settings
    private $settings;
    
    /**
     * Constructor - sets up hooks and filters
     */
    private function __construct() {
        // Define plugin constants
        $this->define_constants();
        
        // Register activation/deactivation hooks
        register_activation_hook(__FILE__, array($this, 'activate'));
        register_deactivation_hook(__FILE__, array($this, 'deactivate'));
        
        // Initialize settings
        $this->settings = get_option('fcs_settings', array(
            'slide_count' => 5,
            'animation' => 'fade',
            'autoplay' => true
        ));
        
        // Add action hooks
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        add_action('init', array($this, 'register_slider_post_type'));
        add_action('widgets_init', array($this, 'register_widgets'));
        
        // Add shortcode
        add_shortcode('featured_slider', array($this, 'render_slider'));
    }
    
    /**
     * Singleton pattern - get instance
     */
    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Define plugin constants
     */
    private function define_constants() {
        define('FCS_VERSION', '1.0.0');
        define('FCS_PLUGIN_DIR', plugin_dir_path(__FILE__));
        define('FCS_PLUGIN_URL', plugin_dir_url(__FILE__));
    }
    
    /**
     * Plugin activation hook
     */
    public function activate() {
        // Create default options
        if (!get_option('fcs_settings')) {
            add_option('fcs_settings', $this->settings);
        }
        
        // Create database tables if needed
        // Flush rewrite rules
        flush_rewrite_rules();
    }
    
    // Other methods would go here...
}

// Initialize the plugin
function featured_content_slider() {
    return Featured_Content_Slider::get_instance();
}

// Kick off the plugin
featured_content_slider();
?&gt;</code></pre>

            <p>In this example, the constructor serves as the central hub for initializing the entire plugin. It:</p>
            <ul>
                <li>Sets up constants for the plugin</li>
                <li>Registers activation and deactivation hooks</li>
                <li>Initializes plugin settings</li>
                <li>Registers WordPress hooks, filters, and shortcodes</li>
            </ul>
            
            <h3>Widget Class Constructor</h3>
            <pre><code>&lt;?php
class Featured_Posts_Widget extends WP_Widget {
    /**
     * Constructor
     */
    public function __construct() {
        // Call parent constructor
        parent::__construct(
            'featured_posts_widget',           // Base ID
            __('Featured Posts', 'textdomain'), // Name
            array(
                'description' => __('Displays featured posts with thumbnails', 'textdomain'),
                'classname' => 'widget_featured_posts'
            )
        );
        
        // Add any additional initialization
        add_action('widgets_init', function() {
            register_widget('Featured_Posts_Widget');
        });
        
        // Add widget-specific styles
        add_action('wp_enqueue_scripts', array($this, 'enqueue_styles'));
    }
    
    /**
     * Enqueue widget styles
     */
    public function enqueue_styles() {
        if (is_active_widget(false, false, $this->id_base, true)) {
            wp_enqueue_style('featured-posts-widget', plugin_dir_url(__FILE__) . 'css/widget.css', array(), '1.0.0');
        }
    }
    
    // Other widget methods (form, update, widget) would go here...
}
?&gt;</code></pre>

            <p>In WordPress widgets, the constructor is used to:</p>
            <ul>
                <li>Define widget properties (name, ID, description)</li>
                <li>Call the parent constructor</li>
                <li>Register the widget with WordPress</li>
                <li>Set up any widget-specific assets or functionality</li>
            </ul>
            
            <h3>Theme Customizer Class Constructor</h3>
            <pre><code>&lt;?php
class Theme_Customizer {
    /**
     * Constructor
     */
    public function __construct() {
        // Register the customizer sections and settings
        add_action('customize_register', array($this, 'register_customizer_sections'));
        
        // Output custom CSS based on settings
        add_action('wp_head', array($this, 'output_customizer_css'));
        
        // Enqueue customizer preview scripts
        add_action('customize_preview_init', array($this, 'enqueue_customizer_scripts'));
    }
    
    /**
     * Register customizer sections, settings, and controls
     */
    public function register_customizer_sections($wp_customize) {
        // Add custom section
        $wp_customize->add_section('theme_header_options', array(
            'title' => __('Header Options', 'textdomain'),
            'priority' => 100
        ));
        
        // Add settings and controls
        $wp_customize->add_setting('header_background_color', array(
            'default' => '#ffffff',
            'sanitize_callback' => 'sanitize_hex_color'
        ));
        
        $wp_customize->add_control(new WP_Customize_Color_Control(
            $wp_customize,
            'header_background_color',
            array(
                'label' => __('Header Background Color', 'textdomain'),
                'section' => 'theme_header_options',
                'settings' => 'header_background_color'
            )
        ));
    }
    
    // Other methods would go here...
}

// Initialize the customizer
new Theme_Customizer();
?&gt;</code></pre>

            <p>In this theme customizer example, the constructor registers various WordPress hooks that will be used to integrate with the Customizer API.</p>
        </section>

        <section class="constructor-params">
            <h2>Working with Constructor Parameters</h2>
            
            <h3>Parameter Types and Default Values</h3>
            <pre><code>&lt;?php
class Product {
    private $name;
    private $price;
    private $categories;
    private $active;
    private $created;
    
    /**
     * Product constructor with various parameter types
     * 
     * @param string $name Product name
     * @param float $price Product price
     * @param array $categories Product categories
     * @param bool $active Is product active?
     * @param DateTime|null $created Creation date
     */
    public function __construct(
        string $name,
        float $price,
        array $categories = [],
        bool $active = true,
        ?DateTime $created = null
    ) {
        $this->name = $name;
        $this->price = $price;
        $this->categories = $categories;
        $this->active = $active;
        $this->created = $created ?: new DateTime();
    }
    
    // Getter methods
    public function getName(): string {
        return $this->name;
    }
    
    public function getPrice(): float {
        return $this->price;
    }
    
    public function getCategories(): array {
        return $this->categories;
    }
    
    public function isActive(): bool {
        return $this->active;
    }
    
    public function getCreated(): DateTime {
        return $this->created;
    }
}

// Using the constructor
$product = new Product(
    'WordPress Theme',
    49.99,
    ['themes', 'premium', 'responsive'],
    true,
    new DateTime('2025-01-15')
);

// Using default values for optional parameters
$simpleProduct = new Product('WordPress Plugin', 29.99);

echo "Product: " . $product->getName() . "<br>";
echo "Price: $" . $product->getPrice() . "<br>";
echo "Categories: " . implode(', ', $product->getCategories()) . "<br>";
echo "Active: " . ($product->isActive() ? 'Yes' : 'No') . "<br>";
echo "Created: " . $product->getCreated()->format('Y-m-d') . "<br>";
?&gt;</code></pre>

            <p>Modern PHP (7.0+) allows type hints and return type declarations, making your code more robust and self-documenting. This is especially valuable in larger WordPress projects.</p>
            
            <h3>Constructor Property Promotion (PHP 8.0+)</h3>
            <p>For WordPress developers using PHP 8.0+, there's a more concise way to define properties and initialize them via the constructor:</p>
            
            <pre><code>&lt;?php
// PHP 8.0+ constructor property promotion
class Product {
    /**
     * Product constructor using property promotion
     */
    public function __construct(
        private string $name,
        private float $price,
        private array $categories = [],
        private bool $active = true,
        private ?DateTime $created = null
    ) {
        // Properties are automatically created and assigned from parameters
        $this->created ??= new DateTime();
    }
    
    // Getter methods
    public function getName(): string {
        return $this->name;
    }
    
    // Other methods...
}

// Usage is the same as before
$product = new Product('WordPress Theme', 49.99);
?&gt;</code></pre>

            <p>This shorthand syntax eliminates repetitive property declarations and assignments in the constructor, resulting in cleaner, more maintainable code.</p>
        </section>

        <section class="constructor-patterns">
            <h2>Advanced Constructor Patterns</h2>
            
            <h3>Dependency Injection</h3>
            <p>A powerful pattern for making your WordPress classes more testable and modular:</p>
            
            <pre><code>&lt;?php
class EmailService {
    public function send($to, $subject, $message) {
        // Email sending logic
        return true;
    }
}

class LogService {
    public function log($message, $level = 'info') {
        // Logging logic
        return true;
    }
}

class UserNotifier {
    private $emailService;
    private $logService;
    
    /**
     * Constructor with dependency injection
     */
    public function __construct(EmailService $emailService, LogService $logService) {
        $this->emailService = $emailService;
        $this->logService = $logService;
    }
    
    /**
     * Notify a user
     */
    public function notifyUser($userId, $message) {
        // Get user email (simplified example)
        $userEmail = "user{$userId}@example.com";
        
        // Send notification
        $result = $this->emailService->send($userEmail, 'Notification', $message);
        
        // Log the result
        $this->logService->log("Notification sent to user {$userId}: " . ($result ? 'success' : 'failed'));
        
        return $result;
    }
}

// Usage with dependency injection
$emailService = new EmailService();
$logService = new LogService();
$notifier = new UserNotifier($emailService, $logService);
$notifier->notifyUser(123, 'Your account has been updated');
?&gt;</code></pre>

            <p>By injecting dependencies through the constructor, your code becomes:</p>
            <ul>
                <li>More testable (you can inject mock services for testing)</li>
                <li>Loosely coupled (components can be swapped out)</li>
                <li>Clearer about its dependencies</li>
            </ul>
            
            <h3>WordPress-Specific Initialization</h3>
            <p>Some WordPress-specific patterns you might use in constructors:</p>
            
            <pre><code>&lt;?php
class Advanced_Plugin {
    private $options;
    private $plugin_path;
    private $plugin_url;
    
    /**
     * Constructor with WordPress-specific initialization
     */
    public function __construct() {
        // Get plugin information using WordPress functions
        $this->plugin_path = plugin_dir_path(__FILE__);
        $this->plugin_url = plugin_dir_url(__FILE__);
        
        // Load options from WordPress database
        $this->options = get_option('advanced_plugin_options', $this->get_default_options());
        
        // Load translations
        add_action('plugins_loaded', array($this, 'load_textdomain'));
        
        // Register hooks based on environment
        if (is_admin()) {
            // Admin-specific hooks
            add_action('admin_menu', array($this, 'add_admin_menu'));
            add_action('admin_init', array($this, 'register_settings'));
        } else {
            // Frontend hooks
            add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
            add_action('wp_footer', array($this, 'add_footer_content'));
        }
        
        // Common hooks
        add_action('init', array($this, 'register_post_types'));
        add_action('widgets_init', array($this, 'register_widgets'));
    }
    
    /**
     * Get default plugin options
     */
    private function get_default_options() {
        return array(
            'feature_x' => true,
            'feature_y' => false,
            'max_items' => 5
        );
    }
    
    /**
     * Load plugin text domain
     */
    public function load_textdomain() {
        load_plugin_textdomain('advanced-plugin', false, dirname(plugin_basename(__FILE__)) . '/languages/');
    }
    
    // Other methods would go here...
}

// Initialize the plugin
new Advanced_Plugin();
?&gt;</code></pre>

            <p>This pattern demonstrates how constructors in WordPress plugins often handle:</p>
            <ul>
                <li>Setting up plugin paths and URLs</li>
                <li>Loading options from the WordPress database</li>
                <li>Registering different hooks for admin and frontend contexts</li>
                <li>Initializing internationalization</li>
            </ul>
        </section>

        <section class="destructors">
            <h2>Destructors: The Cleanup Crew</h2>
            
            <h3>What Are Destructors?</h3>
            <p>A destructor is a special method called when an object is no longer needed and is about to be destroyed. In PHP, destructors are defined using the <code>__destruct()</code> method name.</p>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
    
    <!-- Background -->
    <rect x="0" y="0" width="600" height="300" rx="8" fill="#e3f2fd" 
          stroke="#1976d2" stroke-width="2"/>
    
    <!-- Icon -->
    <g transform="translate(300, 100)">
        <rect x="-40" y="-30" width="80" height="60" rx="5" 
              fill="white" stroke="#1976d2" stroke-width="2"/>
        <line x1="-20" y1="-10" x2="20" y2="-10" 
              stroke="#1976d2" stroke-width="2"/>
        <line x1="-20" y1="0" x2="20" y2="0" 
              stroke="#1976d2" stroke-width="2"/>
        <line x1="-20" y1="10" x2="20" y2="10" 
              stroke="#1976d2" stroke-width="2"/>
    </g>
    
    <!-- Text -->
    <text x="300" y="180" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="18" 
          fill="#0d47a1" font-weight="bold">
        Sequence Diagram
    </text>
    
    <text x="300" y="210" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="14" 
          fill="#0d47a1" opacity="0.8">
        (Diagram converted to static representation)
    </text>
    
    <!-- Original content hint -->
    <text x="300" y="240" text-anchor="middle" 
          font-family="monospace" font-size="10" 
          fill="#0d47a1" opacity="0.5">
        sequenceDiagram participant P as PHP Runtime parti...
    </text>
</svg>
</div>
            
            <h3>The Anatomy of a Destructor</h3>
            <pre><code>&lt;?php
class DatabaseConnection {
    private $connection;
    private $queries = [];
    private $logger;
    
    /**
     * Constructor establishes connection
     */
    public function __construct($host, $username, $password, $database) {
        // For demonstration purposes, we'll just store connection info
        $this->connection = "Connected to {$database} on {$host}";
        $this->logger = fopen('database.log', 'a');
        
        $this->log("Connection established");
        echo "Database connection established<br>";
    }
    
    /**
     * Execute a query
     */
    public function query($sql) {
        $this->queries[] = $sql;
        $this->log("Executed: {$sql}");
        return "Query result for: {$sql}";
    }
    
    /**
     * Log a message
     */
    private function log($message) {
        if ($this->logger) {
            fwrite($this->logger, date('[Y-m-d H:i:s] ') . $message . PHP_EOL);
        }
    }
    
    /**
     * Destructor closes connection and resources
     */
    public function __destruct() {
        // Close log file
        if ($this->logger) {
            $this->log("Connection closed after " . count($this->queries) . " queries");
            fclose($this->logger);
        }
        
        // Close database connection
        $this->connection = null;
        echo "Database connection closed<br>";
    }
}

// Create a scope block so we can see the destructor in action
{
    echo "Creating database connection...<br>";
    $db = new DatabaseConnection('localhost', 'username', 'password', 'wordpress');
    
    // Run some queries
    $db->query("SELECT * FROM wp_posts LIMIT 10");
    $db->query("SELECT * FROM wp_users WHERE user_status = 1");
    
    echo "Finished database operations<br>";
    // The $db object will be destroyed when it goes out of scope
}

echo "After the database operations<br>";
?&gt;</code></pre>

            <h3>What Destructors Do</h3>
            <ul>
                <li><strong>Resource cleanup:</strong> Closing file handles, database connections</li>
                <li><strong>Finalization:</strong> Completing operations or saving state</li>
                <li><strong>Logging:</strong> Tracking object lifecycle events</li>
                <li><strong>Housekeeping:</strong> Removing temporary files or data</li>
            </ul>
            
            <div class="best-practice">
                <h4>Best Practice</h4>
                <p>Don't rely on destructors for critical operations. PHP's garbage collection is not guaranteed to run at a predictable time, especially in long-running WordPress applications (like with object caching or persistent PHP processes).</p>
            </div>
        </section>

        <section class="destructor-scenarios">
            <h2>When Destructors Are Called</h2>
            
            <p>Destructors are called in several scenarios:</p>
            
            <pre><code>&lt;?php
class DestructorDemo {
    private $name;
    
    public function __construct($name) {
        $this->name = $name;
        echo "{$this->name}: Object created<br>";
    }
    
    public function __destruct() {
        echo "{$this->name}: Object destroyed<br>";
    }
}

// Scenario 1: End of script
$obj1 = new DestructorDemo("Scenario 1");
// $obj1's destructor will be called at the end of the script

// Scenario 2: Object goes out of scope
function testScope() {
    $obj2 = new DestructorDemo("Scenario 2");
    echo "Inside function<br>";
    // $obj2's destructor will be called when the function ends
}
testScope();
echo "After function<br>";

// Scenario 3: Object reassigned
$obj3 = new DestructorDemo("Scenario 3a");
$obj3 = new DestructorDemo("Scenario 3b");
// Scenario 3a's destructor is called when $obj3 is reassigned

// Scenario 4: Object explicitly destroyed
$obj4 = new DestructorDemo("Scenario 4");
unset($obj4);
// $obj4's destructor is called immediately

echo "End of script<br>";
// All remaining objects have their destructors called
?&gt;</code></pre>

            <p>The output would show the order in which objects are created and destroyed, illustrating the various scenarios that trigger destructors.</p>
        </section>

        <section class="wordpress-destructors">
            <h2>Destructors in WordPress Development</h2>
            
            <p>While destructors are less commonly used in WordPress than constructors, they have valuable applications:</p>
            
            <h3>Logging and Debugging</h3>
            <pre><code>&lt;?php
class Performance_Logger {
    private $start_time;
    private $component_name;
    private $actions = [];
    
    /**
     * Constructor starts the timer
     */
    public function __construct($component_name) {
        $this->start_time = microtime(true);
        $this->component_name = $component_name;
        $this->log("Started");
    }
    
    /**
     * Log an action with timestamp
     */
    public function log($action) {
        $time = microtime(true);
        $this->actions[] = [
            'action' => $action,
            'time' => $time,
            'elapsed' => $time - $this->start_time
        ];
    }
    
    /**
     * Destructor logs the total execution time
     */
    public function __destruct() {
        $end_time = microtime(true);
        $total_time = $end_time - $this->start_time;
        
        // Only log if WP_DEBUG is enabled
        if (defined('WP_DEBUG') && WP_DEBUG) {
            error_log("PERFORMANCE [{$this->component_name}] Total execution time: {$total_time} seconds");
            
            foreach ($this->actions as $action) {
                error_log("PERFORMANCE [{$this->component_name}] {$action['action']} - {$action['elapsed']} seconds");
            }
        }
    }
}

// Usage in a WordPress plugin function
function process_complex_shortcode($atts) {
    $logger = new Performance_Logger('Complex Shortcode');
    
    // Process attributes
    $logger->log("Attributes processed");
    
    // Query posts
    $posts = get_posts(['numberposts' => 10]);
    $logger->log("Posts queried: " . count($posts));
    
    // Format output
    $output = "<div class='complex-shortcode'>";
    foreach ($posts as $post) {
        $output .= "<h2>{$post->post_title}</h2>";
        $output .= "<p>{$post->post_excerpt}</p>";
    }
    $output .= "</div>";
    $logger->log("Output formatted");
    
    // Destructor will automatically log the total time when function ends
    return $output;
}
?&gt;</code></pre>

            <p>This example uses a destructor to automatically log performance metrics when the function completes.</p>
            
            <h3>Resource Management</h3>
            <pre><code>&lt;?php
class Temporary_File_Manager {
    private $temp_files = [];
    
    /**
     * Constructor
     */
    public function __construct() {
        // Nothing special to initialize
    }
    
    /**
     * Create a temporary file
     */
    public function create_temp_file($content, $prefix = 'wp_temp_') {
        $temp_file = wp_tempnam($prefix);
        file_put_contents($temp_file, $content);
        $this->temp_files[] = $temp_file;
        return $temp_file;
    }
    
    /**
     * Manually clean up a specific file
     */
    public function delete_temp_file($file_path) {
        if (in_array($file_path, $this->temp_files)) {
            @unlink($file_path);
            $this->temp_files = array_diff($this->temp_files, [$file_path]);
            return true;
        }
        return false;
    }
    
    /**
     * Destructor cleans up any remaining temporary files
     */
    public function __destruct() {
        foreach ($this->temp_files as $file) {
            if (file_exists($file)) {
                @unlink($file);
            }
        }
    }
}

// Usage in a WordPress function
function generate_pdf_report() {
    $file_manager = new Temporary_File_Manager();
    
    // Create temporary files for the report process
    $data_file = $file_manager->create_temp_file(json_encode(['sales' => 1000, 'customers' => 50]), 'report_data_');
    $config_file = $file_manager->create_temp_file('{"template": "sales", "format": "A4"}', 'report_config_');
    
    // Process the files to generate PDF (simplified example)
    $pdf_path = ABSPATH . 'wp-content/uploads/reports/report-' . date('Y-m-d') . '.pdf';
    
    // Imagine PDF generation happens here using the temp files
    
    // We can manually delete files we don't need anymore
    $file_manager->delete_temp_file($data_file);
    
    // Any remaining temp files will be automatically deleted by the destructor
    return $pdf_path;
}
?&gt;</code></pre>

            <p>This example demonstrates using a destructor as a safety net to clean up temporary files, ensuring they don't accumulate even if exceptions occur.</p>
        </section>

        <section class="parent-constructors">
            <h2>Parent Constructors and Inheritance</h2>
            
            <p>When working with inheritance, you often need to call the parent constructor. This is especially common in WordPress where many classes extend WordPress core classes.</p>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
    
    <!-- Background -->
    <rect x="0" y="0" width="600" height="300" rx="8" fill="#f3e5f5" 
          stroke="#7b1fa2" stroke-width="2"/>
    
    <!-- Icon -->
    <g transform="translate(300, 100)">
        <rect x="-40" y="-30" width="80" height="60" rx="5" 
              fill="white" stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="-10" x2="20" y2="-10" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="0" x2="20" y2="0" 
              stroke="#7b1fa2" stroke-width="2"/>
        <line x1="-20" y1="10" x2="20" y2="10" 
              stroke="#7b1fa2" stroke-width="2"/>
    </g>
    
    <!-- Text -->
    <text x="300" y="180" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="18" 
          fill="#4a148c" font-weight="bold">
        Class Diagram
    </text>
    
    <text x="300" y="210" text-anchor="middle" 
          font-family="'Segoe UI', Arial, sans-serif" font-size="14" 
          fill="#4a148c" opacity="0.8">
        (Diagram converted to static representation)
    </text>
    
    <!-- Original content hint -->
    <text x="300" y="240" text-anchor="middle" 
          font-family="monospace" font-size="10" 
          fill="#4a148c" opacity="0.5">
        classDiagram class WP_Widget { +__construct(id, na...
    </text>
</svg>
</div>
            
            <pre><code>&lt;?php
/**
 * Example of a WordPress widget with parent constructor
 */
class Latest_Products_Widget extends WP_Widget {
    /**
     * Constructor - must call parent constructor
     */
    public function __construct() {
        // Call parent constructor
        parent::__construct(
            'latest_products',                      // Base ID
            __('Latest Products', 'textdomain'),    // Name
            [
                'description' => __('Displays latest WooCommerce products', 'textdomain'),
                'classname' => 'widget_latest_products'
            ]
        );
        
        // Add our own initialization
        if (is_active_widget(false, false, $this->id_base, true)) {
            add_action('wp_enqueue_scripts', [$this, 'enqueue_styles']);
        }
    }
    
    /**
     * Enqueue widget-specific styles
     */
    public function enqueue_styles() {
        wp_enqueue_style(
            'latest-products-widget', 
            plugin_dir_url(__FILE__) . 'css/latest-products.css',
            [],
            '1.0.0'
        );
    }
    
    /**
     * Front-end display
     */
    public function widget($args, $instance) {
        // Extract widget arguments and instance settings
        extract($args);
        $title = apply_filters('widget_title', $instance['title'] ?? '');
        $number = isset($instance['number']) ? absint($instance['number']) : 5;
        
        // Start widget output
        echo $before_widget;
        
        if ($title) {
            echo $before_title . $title . $after_title;
        }
        
        // Check if WooCommerce exists
        if (class_exists('WooCommerce')) {
            // Query products
            $products = wc_get_products([
                'status' => 'publish',
                'limit' => $number,
                'orderby' => 'date',
                'order' => 'DESC'
            ]);
            
            if ($products) {
                echo '<ul class="latest-products">';
                
                foreach ($products as $product) {
                    echo '<li class="product-item">';
                    echo '<a href="' . esc_url($product->get_permalink()) . '">';
                    
                    if ($product->get_image_id()) {
                        echo $product->get_image('thumbnail');
                    }
                    
                    echo '<span class="product-title">' . $product->get_name() . '</span>';
                    echo '<span class="product-price">' . $product->get_price_html() . '</span>';
                    echo '</a>';
                    echo '</li>';
                }
                
                echo '</ul>';
            } else {
                echo '<p>' . __('No products found.', 'textdomain') . '</p>';
            }
        } else {
            echo '<p>' . __('WooCommerce is not active.', 'textdomain') . '</p>';
        }
        
        echo $after_widget;
    }
    
    /**
     * Backend widget form
     */
    public function form($instance) {
        $title = isset($instance['title']) ? $instance['title'] : __('Latest Products', 'textdomain');
        $number = isset($instance['number']) ? absint($instance['number']) : 5;
        ?>
        <p>
            <label for="<?php echo $this->get_field_id('title'); ?>"><?php _e('Title:', 'textdomain'); ?></label>
            <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>">
        </p>
        <p>
            <label for="<?php echo $this->get_field_id('number'); ?>"><?php _e('Number of products to show:', 'textdomain'); ?></label>
            <input class="tiny-text" id="<?php echo $this->get_field_id('number'); ?>" name="<?php echo $this->get_field_name('number'); ?>" type="number" step="1" min="1" value="<?php echo esc_attr($number); ?>" size="3">
        </p>
        <?php
    }
    
    /**
     * Sanitize widget form values
     */
    public function update($new_instance, $old_instance) {
        $instance = $old_instance;
        $instance['title'] = sanitize_text_field($new_instance['title']);
        $instance['number'] = absint($new_instance['number']);
        return $instance;
    }
}

// Register the widget
function register_latest_products_widget() {
    register_widget('Latest_Products_Widget');
}
add_action('widgets_init', 'register_latest_products_widget');
?&gt;</code></pre>

            <p>Key points about parent constructors:</p>
            <ul>
                <li>Use <code>parent::__construct()</code> to call the parent class constructor</li>
                <li>Make sure to pass all required parameters to the parent constructor</li>
                <li>Call the parent constructor before performing your own initialization</li>
                <li>This ensures the parent class is properly set up before you add your customizations</li>
            </ul>
        </section>

        <section class="common-mistakes">
            <h2>Common Constructor and Destructor Mistakes</h2>
            
            <h3>Constructor Pitfalls</h3>
            <pre><code>&lt;?php
class Problematic_Constructor {
    private $data;
    private $api_url;
    
    /**
     * Problematic constructor with multiple issues
     */
    public function __construct() {
        // MISTAKE 1: Doing too much in the constructor
        $this->data = $this->fetch_large_dataset(); // Slow API call
        
        // MISTAKE 2: Not handling errors properly
        $this->api_url = get_option('api_endpoint'); // What if this is empty?
        
        // MISTAKE 3: Calling methods that might not be ready
        add_action('init', [$this, 'register_post_type']); // Fine
        $this->process_data(); // Might depend on WordPress being fully loaded
        
        // MISTAKE 4: Hardcoding values that should be configurable
        $this->timeout = 30; // Should be a parameter or setting
    }
    
    private function fetch_large_dataset() {
        // Imagine this makes a slow API call
        return ['item1', 'item2', /* many more items */];
    }
    
    private function process_data() {
        // Processing that might depend on WordPress being fully initialized
        $post_ids = get_posts(['fields' => 'ids']);
        // Do something with the post IDs
    }
    
    public function register_post_type() {
        // Register a custom post type
    }
}

// BETTER APPROACH
class Improved_Constructor {
    private $data;
    private $api_url;
    private $timeout;
    
    /**
     * Improved constructor with lazy loading and error handling
     */
    public function __construct($timeout = 30) {
        // Store configuration, but don't do heavy processing
        $this->timeout = $timeout;
        
        // Set up hooks
        add_action('init', [$this, 'register_post_type']);
        add_action('wp_loaded', [$this, 'initialize']);
    }
    
    /**
     * Initialize after WordPress is fully loaded
     */
    public function initialize() {
        // Get API URL with fallback
        $this->api_url = get_option('api_endpoint', 'https://default-api.example.com');
        
        // We don't load data immediately, only when needed
    }
    
    /**
     * Lazy load data only when needed
     */
    public function get_data() {
        if (null === $this->data) {
            $this->data = $this->fetch_large_dataset();
        }
        
        return $this->data;
    }
    
    private function fetch_large_dataset() {
        // API call with error handling
        try {
            // Fetch data with timeout parameter
            return ['item1', 'item2', /* many more items */];
        } catch (Exception $e) {
            error_log('Failed to fetch dataset: ' . $e->getMessage());
            return [];
        }
    }
}
?&gt;</code></pre>

            <h3>Destructor Pitfalls</h3>
            <pre><code>&lt;?php
class Problematic_Destructor {
    private $important_file;
    
    public function __construct() {
        $this->important_file = tmpfile();
        fwrite($this->important_file, "Important data");
    }
    
    // MISTAKE 1: Putting critical operations in destructor
    public function __destruct() {
        // Save critical data to database
        update_option('important_data', fread($this->important_file, 1024));
        
        // MISTAKE 2: No error handling
        fclose($this->important_file);
        
        // MISTAKE 3: Heavy processing in destructor
        $this->process_and_log_statistics(); // Might be slow
    }
    
    private function process_and_log_statistics() {
        // Imagine this does heavy processing
    }
}

// BETTER APPROACH
class Improved_Destructor {
    private $temp_file;
    private $data_saved = false;
    
    public function __construct() {
        $this->temp_file = tmpfile();
        fwrite($this->temp_file, "Important data");
    }
    
    /**
     * Explicit method to save data
     */
    public function save_data() {
        try {
            fseek($this->temp_file, 0);
            update_option('important_data', fread($this->temp_file, 1024));
            $this->data_saved = true;
            return true;
        } catch (Exception $e) {
            error_log('Failed to save data: ' . $e->getMessage());
            return false;
        }
    }
    
    /**
     * Process statistics explicitly
     */
    public function process_statistics() {
        // Processing logic here
    }
    
    /**
     * Improved destructor focuses only on cleanup
     */
    public function __destruct() {
        // Only try to save data if not already saved
        if (!$this->data_saved) {
            try {
                $this->save_data();
            } catch (Exception $e) {
                error_log('Failed to save data during destruction: ' . $e->getMessage());
            }
        }
        
        // Always try to clean up resources
        if (is_resource($this->temp_file)) {
            @fclose($this->temp_file);
        }
    }
}
?&gt;</code></pre>

            <div class="best-practice">
                <h4>Best Practices Summary</h4>
                <p>For constructors:</p>
                <ul>
                    <li>Keep them light and fast (avoid heavy operations)</li>
                    <li>Handle errors properly</li>
                    <li>Use lazy loading for heavy resources</li>
                    <li>Be mindful of WordPress initialization stages</li>
                    <li>Use parameters for configuration instead of hardcoding</li>
                </ul>
                
                <p>For destructors:</p>
                <ul>
                    <li>Use them primarily for cleanup, not critical operations</li>
                    <li>Include error handling</li>
                    <li>Don't assume resources are still available</li>
                    <li>Keep them lightweight</li>
                    <li>Provide explicit methods for important operations</li>
                </ul>
            </div>
        </section>

        <section class="parent-destructors">
            <h2>Parent Destructors and Inheritance</h2>
            
            <p>Just like with constructors, when extending a class, you might need to call the parent's destructor:</p>
            
            <pre><code>&lt;?php
class Resource_Manager {
    protected $resources = [];
    
    public function __construct() {
        echo "Resource_Manager: Initialized<br>";
    }
    
    public function add_resource($name, $value) {
        $this->resources[$name] = $value;
        echo "Resource_Manager: Added resource '{$name}'<br>";
    }
    
    public function __destruct() {
        echo "Resource_Manager: Cleaning up " . count($this->resources) . " resources<br>";
        $this->resources = [];
    }
}

class File_Resource_Manager extends Resource_Manager {
    private $open_files = [];
    
    public function __construct() {
        parent::__construct();
        echo "File_Resource_Manager: Initialized<br>";
    }
    
    public function open_file($path, $mode = 'r') {
        $handle = fopen($path, $mode);
        $this->open_files[] = $handle;
        $this->add_resource('file_' . count($this->open_files), $path);
        return $handle;
    }
    
    public function __destruct() {
        echo "File_Resource_Manager: Closing " . count($this->open_files) . " files<br>";
        
        foreach ($this->open_files as $handle) {
            if (is_resource($handle)) {
                fclose($handle);
            }
        }
        
        parent::__destruct();
        echo "File_Resource_Manager: Destruction complete<br>";
    }
}

// Usage
$file_manager = new File_Resource_Manager();
$temp_file = tempnam(sys_get_temp_dir(), 'wp_');
$handle = $file_manager->open_file($temp_file, 'w');
fwrite($handle, "Hello World");

echo "Main operation complete<br>";
// $file_manager will be destroyed at end of script
?&gt;</code></pre>

            <p>When extending classes with destructors:</p>
            <ul>
                <li>Call <code>parent::__destruct()</code> to ensure parent cleanup runs</li>
                <li>Consider whether to run your cleanup before or after the parent's</li>
                <li>The parent destructor is not called automatically (unlike constructors)</li>
            </ul>
        </section>

        <section class="practical-exercise">
            <h2>Practical Exercise: WordPress Theme Options Class</h2>
            
            <p>Let's create a complete class that uses constructors and destructors in a practical WordPress context:</p>
            
            <pre><code>&lt;?php
/**
 * Theme Options Manager Class
 * 
 * Demonstrates proper use of constructors and destructors for
 * managing theme options in WordPress.
 */
class Theme_Options_Manager {
    // Default options
    private $defaults = [
        'color_scheme' => 'light',
        'font_size' => 'medium',
        'show_sidebar' => true,
        'header_layout' => 'standard'
    ];
    
    // Current options
    private $options = [];
    
    // Has the options been modified?
    private $is_modified = false;
    
    // Cache file for options
    private $cache_file;
    
    /**
     * Constructor: Initialize the options manager
     * 
     * @param array $custom_defaults Optional custom defaults to override standard ones
     */
    public function __construct($custom_defaults = []) {
        // Set up the cache directory
        $upload_dir = wp_upload_dir();
        $cache_dir = $upload_dir['basedir'] . '/theme-cache';
        
        // Create cache directory if it doesn't exist
        if (!file_exists($cache_dir)) {
            wp_mkdir_p($cache_dir);
        }
        
        $this->cache_file = $cache_dir . '/theme-options.json';
        
        // Merge custom defaults with standard defaults
        if (!empty($custom_defaults) && is_array($custom_defaults)) {
            $this->defaults = array_merge($this->defaults, $custom_defaults);
        }
        
        // Try to load from cache first (faster)
        $this->load_from_cache();
        
        // If cache failed, load from database
        if (empty($this->options)) {
            $this->load_from_database();
        }
        
        // If still empty, use defaults
        if (empty($this->options)) {
            $this->options = $this->defaults;
        }
        
        // Register hooks
        add_action('admin_menu', [$this, 'add_options_page']);
        add_action('admin_init', [$this, 'register_settings']);
    }
    
    /**
     * Load options from cache file
     */
    private function load_from_cache() {
        if (file_exists($this->cache_file)) {
            $json = file_get_contents($this->cache_file);
            $cached_options = json_decode($json, true);
            
            if (is_array($cached_options)) {
                $this->options = $cached_options;
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Load options from WordPress database
     */
    private function load_from_database() {
        $saved_options = get_option('theme_options');
        
        if (is_array($saved_options)) {
            $this->options = array_merge($this->defaults, $saved_options);
            
            // Update cache while we're at it
            $this->update_cache();
            
            return true;
        }
        
        return false;
    }
    
    /**
     * Update the cache file
     */
    private function update_cache() {
        $json = json_encode($this->options);
        @file_put_contents($this->cache_file, $json);
    }
    
    /**
     * Get an option value
     * 
     * @param string $key Option key
     * @param mixed $default Default value if option doesn't exist
     * @return mixed Option value
     */
    public function get($key, $default = null) {
        if (isset($this->options[$key])) {
            return $this->options[$key];
        }
        
        if ($default !== null) {
            return $default;
        }
        
        return isset($this->defaults[$key]) ? $this->defaults[$key] : null;
    }
    
    /**
     * Set an option value
     * 
     * @param string $key Option key
     * @param mixed $value Option value
     * @return bool Success
     */
    public function set($key, $value) {
        // Check if the value is actually different
        if (!isset($this->options[$key]) || $this->options[$key] !== $value) {
            $this->options[$key] = $value;
            $this->is_modified = true;
            return true;
        }
        
        return false;
    }
    
    /**
     * Save options to database
     * 
     * @return bool Success
     */
    public function save() {
        if ($this->is_modified) {
            $result = update_option('theme_options', $this->options);
            
            if ($result) {
                $this->update_cache();
                $this->is_modified = false;
            }
            
            return $result;
        }
        
        return true; // Nothing to save
    }
    
    /**
     * Reset options to defaults
     * 
     * @return bool Success
     */
    public function reset() {
        $this->options = $this->defaults;
        $this->is_modified = true;
        return $this->save();
    }
    
    /**
     * Add theme options page to admin menu
     */
    public function add_options_page() {
        add_theme_page(
            __('Theme Options', 'textdomain'),
            __('Theme Options', 'textdomain'),
            'edit_theme_options',
            'theme-options',
            [$this, 'render_options_page']
        );
    }
    
    /**
     * Register settings for the options page
     */
    public function register_settings() {
        register_setting('theme_options_group', 'theme_options');
        
        add_settings_section(
            'theme_options_section',
            __('Theme Options', 'textdomain'),
            [$this, 'render_section_intro'],
            'theme-options'
        );
        
        // Register fields for each option
        foreach ($this->defaults as $key => $value) {
            add_settings_field(
                'theme_option_' . $key,
                ucwords(str_replace('_', ' ', $key)),
                [$this, 'render_field'],
                'theme-options',
                'theme_options_section',
                ['key' => $key]
            );
        }
    }
    
    /**
     * Render the intro text for the options section
     */
    public function render_section_intro() {
        echo '<p>' . __('Customize your theme settings below.', 'textdomain') . '</p>';
    }
    
    /**
     * Render a field based on its type
     */
    public function render_field($args) {
        $key = $args['key'];
        $value = $this->get($key);
        $name = "theme_options[$key]";
        
        switch ($key) {
            case 'color_scheme':
                echo '<select name="' . $name . '">';
                echo '<option value="light" ' . selected($value, 'light', false) . '>Light</option>';
                echo '<option value="dark" ' . selected($value, 'dark', false) . '>Dark</option>';
                echo '<option value="custom" ' . selected($value, 'custom', false) . '>Custom</option>';
                echo '</select>';
                break;
                
            case 'font_size':
                echo '<select name="' . $name . '">';
                echo '<option value="small" ' . selected($value, 'small', false) . '>Small</option>';
                echo '<option value="medium" ' . selected($value, 'medium', false) . '>Medium</option>';
                echo '<option value="large" ' . selected($value, 'large', false) . '>Large</option>';
                echo '</select>';
                break;
                
            case 'show_sidebar':
                echo '<input type="checkbox" name="' . $name . '" value="1" ' . checked($value, true, false) . '>';
                break;
                
            case 'header_layout':
                echo '<select name="' . $name . '">';
                echo '<option value="standard" ' . selected($value, 'standard', false) . '>Standard</option>';
                echo '<option value="centered" ' . selected($value, 'centered', false) . '>Centered</option>';
                echo '<option value="minimal" ' . selected($value, 'minimal', false) . '>Minimal</option>';
                echo '</select>';
                break;
                
            default:
                echo '<input type="text" name="' . $name . '" value="' . esc_attr($value) . '">';
        }
    }
    
    /**
     * Render the options page
     */
    public function render_options_page() {
        ?>
        <div class="wrap">
            <h1><?php echo __('Theme Options', 'textdomain'); ?></h1>
            <form method="post" action="options.php">
                <?php settings_fields('theme_options_group'); ?>
                <?php do_settings_sections('theme-options'); ?>
                <?php submit_button(); ?>
                
                <p>
                    <a href="<?php echo admin_url('themes.php?page=theme-options&reset=1'); ?>" class="button">
                        <?php _e('Reset to Defaults', 'textdomain'); ?>
                    </a>
                </p>
            </form>
        </div>
        <?php
        
        // Handle reset request
        if (isset($_GET['reset']) && $_GET['reset'] == 1) {
            $this->reset();
            wp_redirect(admin_url('themes.php?page=theme-options&reset=success'));
            exit;
        }
    }
    
    /**
     * Destructor: Save any unsaved changes
     */
    public function __destruct() {
        // Automatically save any modified options when the object is destroyed
        if ($this->is_modified) {
            $this->save();
        }
    }
}

// Usage example
function mytheme_get_options_manager() {
    static $options_manager = null;
    
    if (null === $options_manager) {
        $options_manager = new Theme_Options_Manager();
    }
    
    return $options_manager;
}

// Get an option
function mytheme_get_option($key, $default = null) {
    return mytheme_get_options_manager()->get($key, $default);
}

// Set an option
function mytheme_set_option($key, $value) {
    return mytheme_get_options_manager()->set($key, $value);
}

// Save options immediately (not waiting for destructor)
function mytheme_save_options() {
    return mytheme_get_options_manager()->save();
}
?&gt;</code></pre>

            <p>This example demonstrates:</p>
            <ul>
                <li>A robust constructor that initializes options from multiple sources (cache, database, defaults)</li>
                <li>A destructor that automatically saves changes when the object is destroyed</li>
                <li>Proper integration with the WordPress admin interface</li>
                <li>Caching for performance optimization</li>
                <li>Helper functions to make accessing the class easier from anywhere in the theme</li>
            </ul>
        </section>

        <section class="homework">
            <h2>Homework: Create a Simple Class with Constructor and Destructor</h2>
            
            <p>Now it's your turn to practice with constructors and destructors:</p>
            
            <div class="assignment">
                <h3>Assignment</h3>
                <p>Create a <code>File_Logger</code> class that could be used to log events in a WordPress plugin or theme. The class should:</p>
                
                <ol>
                    <li>Have a constructor that initializes the log file and starting timestamp</li>
                    <li>Include methods for logging different types of events (info, warning, error)</li>
                    <li>Have a destructor that closes the file properly and logs the end timestamp</li>
                    <li>Handle potential errors gracefully</li>
                </ol>
                
                <p>Here's a starter template to help you:</p>
                
                <pre><code>&lt;?php
/**
 * File Logger Class for WordPress
 * 
 * A simple class to log events to a file with timestamps.
 */
class File_Logger {
    // Properties for file handle, log path, etc.
    private $file_handle;
    private $log_path;
    private $start_time;
    
    /**
     * Constructor
     * 
     * @param string $log_name Name of the log file (default: 'debug')
     */
    public function __construct($log_name = 'debug') {
        // Initialize the log file
        // Set the start time
        // Create the file handle
    }
    
    /**
     * Log an informational message
     * 
     * @param string $message The message to log
     */
    public function info($message) {
        // Log with 'INFO' level
    }
    
    /**
     * Log a warning message
     * 
     * @param string $message The message to log
     */
    public function warning($message) {
        // Log with 'WARNING' level
    }
    
    /**
     * Log an error message
     * 
     * @param string $message The message to log
     */
    public function error($message) {
        // Log with 'ERROR' level
    }
    
    /**
     * Internal method to write to the log file
     * 
     * @param string $level The log level
     * @param string $message The message to log
     */
    private function write_log($level, $message) {
        // Format the log entry
        // Write to the file
    }
    
    /**
     * Destructor
     */
    public function __destruct() {
        // Log the end timestamp
        // Close the file handle properly
    }
}

// Example usage:
function example_plugin_process() {
    $logger = new File_Logger('my_plugin');
    
    $logger->info('Processing started');
    
    try {
        // Some plugin operation
        $logger->info('Operation successful');
    } catch (Exception $e) {
        $logger->error('Error: ' . $e->getMessage());
    }
    
    // Logger will automatically close the file when the function ends
}
?&gt;</code></pre>
                
                <p>Complete this class with your own implementation. Consider how you would handle file permissions, directory creation, and error scenarios.</p>
            </div>
        </section>

        <section class="additional-resources">
            <h2>Additional Resources</h2>
            
            <h3>Further Reading</h3>
            <ul>
                <li><a href="https://www.php.net/manual/en/language.oop5.decon.php" target="_blank">PHP Manual: Constructors and Destructors</a></li>
                <li><a href="https://developer.wordpress.org/plugins/the-basics/best-practices/" target="_blank">WordPress Plugin Developer Handbook: Best Practices</a></li>
                <li><a href="https://phptherightway.com/#object-oriented-programming" target="_blank">PHP The Right Way: OOP Chapter</a></li>
            </ul>
            
            <h3>Next Class Preview</h3>
            <p>In our next session, we'll explore access modifiers (public, private, protected) and how they control visibility and encapsulation in your classes. We'll also learn about the <code>$this</code> keyword and how it's used to reference the current object instance.</p>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
<script src="/assets/js/mermaid-universal-fix.js"></script>
</body>
</html>
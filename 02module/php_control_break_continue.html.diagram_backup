<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>PHP Control Statements - break and continue - PHP WordPress Course</title>
<meta content="Think of control statements as traffic signals in your code—they direct the flow, telling the program when to stop, when to skip ahead, and when to proceed norm" name="description"/>
<meta content="PHP, WordPress, web development, php, break, and, continue" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Break and Continue</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 4</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_for_loops.html">For Loops</a></li>
<li><a class="sidebar-link" href="/02module/php_while_loops.html">While Loops</a></li>
<li><a class="sidebar-link" href="/02module/php_do_while_loops.html">Do-While Loops</a></li>
<li><a class="sidebar-link" href="/02module/php_foreach_loops_with_arrays.html">Foreach Loops</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/php_control_break_continue.html">Break &amp; Continue</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_loops.html">Homework: Loops</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_if.html">← Prev: Session 3: Conditionals</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_indexed_array.html">Next: Session 5: Arrays →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>PHP Control Statements - break and continue</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 30 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: Control Structures</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP programming concepts</li>
<li>Write clean, maintainable code</li>
<li>Apply best practices</li>
<li>Build dynamic applications</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="intro">
            <h2>Introduction to Control Statements</h2>
            <p>Welcome to our session on PHP Control Statements, specifically the <code>break</code> and <code>continue</code> statements. These powerful control structures allow you to alter the normal flow of loops, giving you precise control over how your code executes.</p>
            
            <p>Think of control statements as traffic signals in your code—they direct the flow, telling the program when to stop, when to skip ahead, and when to proceed normally.</p>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 800" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="800" fill="#fafafa" rx="8"/>
    
    <line x1="137.5" y1="200" x2="575.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="312.5" y1="200" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="400.0" y1="200" x2="487.5" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="487.5" y1="200" x2="137.5" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="312.5" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">True</text>
    <line x1="487.5" y1="200" x2="225.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="356.25" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">False</text>
    <line x1="575.0" y1="200" x2="225.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.0" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="575.0" y1="200" x2="662.5" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="618.75" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <line x1="662.5" y1="200" x2="487.5" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="575.0" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="662.5" y1="200" x2="312.5" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="487.5" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <line x1="487.5" y1="200" x2="575.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="531.25" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt;|False| D[Exit Loop] C </text>
    <line x1="662.5" y1="200" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="531.25" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt;|No| G[Rest of Loop Body] G </text>
    <rect x="340.0" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Loop Starts</text>
    <rect x="59.5" y="175" width="156" height="50" 
          rx="5" class="node-rect"/>
    <text x="137.5" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Execute Loop Body</text>
    <rect x="165.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Exit Loop</text>
    <rect x="234.5" y="175" width="156" height="50" 
          rx="5" class="node-rect"/>
    <text x="312.5" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Rest of Loop Body</text>
    <rect x="334.0" y="175" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Update Counter</text>
    <rect x="417.5" y="175" width="140" height="50" 
          transform="rotate(45 487.5 200)" class="node-rect"/>
    <text x="487.5" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Condition Check</text>
    <rect x="515.0" y="175" width="120" height="50" 
          transform="rotate(45 575.0 200)" class="node-rect"/>
    <text x="575.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">break?</text>
    <rect x="602.5" y="175" width="120" height="50" 
          transform="rotate(45 662.5 200)" class="node-rect"/>
    <text x="662.5" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">continue?</text>
</svg>
</div>
            
            <p>In this lesson, we'll explore how <code>break</code> and <code>continue</code> work, how they differ, and how you can use them to write more efficient and readable code. These control statements work with all loop types we've covered so far: for, while, do-while, and foreach loops.</p>
        </section>

        <section class="break-statement">
            <h2>The break Statement</h2>
            
            <p>The <code>break</code> statement terminates the execution of a loop completely and transfers control to the statement following the loop.</p>
            
            <div class="illustration">
                <svg viewBox="0 0 500 200" xmlns="http://www.w3.org/2000/svg">
                    <!-- Loop visualization -->
                    <rect x="50" y="50" width="400" height="100" rx="20" ry="20" fill="#f0f0f0" stroke="#333" stroke-width="2"/>
                    <text x="250" y="40" text-anchor="middle" font-weight="bold">Loop</text>
                    
                    <!-- Loop iterations -->
                    <rect x="70" y="70" width="60" height="60" rx="10" ry="10" fill="#a0d0e0" stroke="#333" stroke-width="1"/>
                    <text x="100" y="105" text-anchor="middle">1</text>
                    
                    <rect x="140" y="70" width="60" height="60" rx="10" ry="10" fill="#a0d0e0" stroke="#333" stroke-width="1"/>
                    <text x="170" y="105" text-anchor="middle">2</text>
                    
                    <rect x="210" y="70" width="60" height="60" rx="10" ry="10" fill="#a0d0e0" stroke="#333" stroke-width="1"/>
                    <text x="240" y="105" text-anchor="middle">3</text>
                    
                    <rect x="280" y="70" width="60" height="60" rx="10" ry="10" fill="#e0a0a0" stroke="#333" stroke-width="1"/>
                    <text x="310" y="95" text-anchor="middle">4</text>
                    <text x="310" y="115" text-anchor="middle" font-size="12">break!</text>
                    
                    <rect x="350" y="70" width="60" height="60" rx="10" ry="10" fill="#d0d0d0" stroke="#333" stroke-width="1" opacity="0.4"/>
                    <text x="380" y="105" text-anchor="middle" opacity="0.4">5</text>
                    
                    <!-- Break arrow -->
                    <path d="M310 130 L310 170 L470 170" stroke="#e04040" stroke-width="3" fill="none" marker-end="url(#arrowhead)"/>
                    <text x="400" y="160" text-anchor="middle" fill="#e04040">Exit Loop</text>
                    
                    <!-- Arrowhead marker -->
                    <defs>
                        <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto">
                            <polygon points="0 0, 10 3.5, 0 7" fill="#e04040"/>
                        </marker>
                    </defs>
                </svg>
            </div>
            
            <div class="syntax">
                <h3>Syntax</h3>
                <div class="code-block">
                    <pre><code>break;</code></pre>
                </div>
                
                <p>The <code>break</code> statement can also include a numeric argument that specifies how many nested loops to exit:</p>
                
                <div class="code-block">
                    <pre><code>break n; // Exit n levels of nested loops</code></pre>
                </div>
            </div>
            
            <div class="example">
                <h3>Basic Example: Finding an Element</h3>
                <div class="code-block">
                    <pre><code>&lt;?php
$numbers = [1, 3, 5, 7, 9, 11, 13, 15];
$searchFor = 9;
$found = false;
$position = -1;

for ($i = 0; $i < count($numbers); $i++) {
    echo "Checking position $i: " . $numbers[$i] . "&lt;br&gt;";
    
    if ($numbers[$i] === $searchFor) {
        $found = true;
        $position = $i;
        echo "Found $searchFor at position $position!&lt;br&gt;";
        break; // Exit the loop immediately
    }
}

if ($found) {
    echo "Search complete. The number $searchFor was found at position $position.";
} else {
    echo "Search complete. The number $searchFor was not found in the array.";
}
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output:</h4>
                    <pre>Checking position 0: 1
Checking position 1: 3
Checking position 2: 5
Checking position 3: 7
Checking position 4: 9
Found 9 at position 4!
Search complete. The number 9 was found at position 4.</pre>
                </div>
                
                <p>In this example, the <code>break</code> statement terminates the loop as soon as the value is found. This is more efficient than continuing to check the remaining elements unnecessarily.</p>
                
                <p>Think of <code>break</code> like finding what you're looking for in a stack of documents—once you've found it, there's no need to keep searching through the rest of the papers.</p>
            </div>
            
            <div class="example">
                <h3>Advanced Example: Breaking from Nested Loops</h3>
                <div class="code-block">
                    <pre><code>&lt;?php
// 2D grid search example
$grid = [
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12],
    [13, 14, 15, 16]
];
$searchFor = 11;
$found = false;

echo "&lt;h4&gt;Searching for $searchFor in the grid:&lt;/h4&gt;";

// Display the grid
echo "&lt;table border='1' style='border-collapse: collapse'&gt;";
foreach ($grid as $row) {
    echo "&lt;tr&gt;";
    foreach ($row as $cell) {
        echo "&lt;td style='padding: 10px'&gt;$cell&lt;/td&gt;";
    }
    echo "&lt;/tr&gt;";
}
echo "&lt;/table&gt;&lt;br&gt;";

// Search the grid
for ($row = 0; $row < count($grid); $row++) {
    for ($col = 0; $col < count($grid[$row]); $col++) {
        echo "Checking position [$row][$col]: " . $grid[$row][$col] . "&lt;br&gt;";
        
        if ($grid[$row][$col] === $searchFor) {
            $found = true;
            echo "&lt;strong&gt;Found $searchFor at position [$row][$col]!&lt;/strong&gt;&lt;br&gt;";
            break 2; // Break out of BOTH loops
        }
    }
}

if ($found) {
    echo "Search complete. The number $searchFor was found in the grid.";
} else {
    echo "Search complete. The number $searchFor was not found in the grid.";
}
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output:</h4>
                    <h4>Searching for 11 in the grid:</h4>
                    <table border="1" style="border-collapse: collapse">
                        <tr>
                            <td style="padding: 10px">1</td>
                            <td style="padding: 10px">2</td>
                            <td style="padding: 10px">3</td>
                            <td style="padding: 10px">4</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px">5</td>
                            <td style="padding: 10px">6</td>
                            <td style="padding: 10px">7</td>
                            <td style="padding: 10px">8</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px">9</td>
                            <td style="padding: 10px">10</td>
                            <td style="padding: 10px">11</td>
                            <td style="padding: 10px">12</td>
                        </tr>
                        <tr>
                            <td style="padding: 10px">13</td>
                            <td style="padding: 10px">14</td>
                            <td style="padding: 10px">15</td>
                            <td style="padding: 10px">16</td>
                        </tr>
                    </table><br>
                    
                    <pre>Checking position [0][0]: 1
Checking position [0][1]: 2
Checking position [0][2]: 3
Checking position [0][3]: 4
Checking position [1][0]: 5
Checking position [1][1]: 6
Checking position [1][2]: 7
Checking position [1][3]: 8
Checking position [2][0]: 9
Checking position [2][1]: 10
Checking position [2][2]: 11
<strong>Found 11 at position [2][2]!</strong>
Search complete. The number 11 was found in the grid.</pre>
                </div>
                
                <p>This example demonstrates the numeric argument with <code>break</code>. Here, <code>break 2</code> exits both the inner and outer loops when the value is found. Without the numeric argument, only the inner loop would terminate, and the outer loop would continue to the next iteration.</p>
                
                <p>Think of this like searching through a multi-floor building—when you find what you're looking for, <code>break 2</code> lets you exit the building entirely, not just the room you're in.</p>
            </div>
        </section>

        <section class="continue-statement">
            <h2>The continue Statement</h2>
            
            <p>The <code>continue</code> statement skips the rest of the current loop iteration and proceeds to the next iteration. Unlike <code>break</code>, it doesn't terminate the loop entirely—it just jumps ahead.</p>
            
            <div class="illustration">
                <svg viewBox="0 0 500 200" xmlns="http://www.w3.org/2000/svg">
                    <!-- Loop visualization -->
                    <rect x="50" y="50" width="400" height="100" rx="20" ry="20" fill="#f0f0f0" stroke="#333" stroke-width="2"/>
                    <text x="250" y="40" text-anchor="middle" font-weight="bold">Loop</text>
                    
                    <!-- Loop iterations -->
                    <rect x="70" y="70" width="60" height="60" rx="10" ry="10" fill="#a0d0e0" stroke="#333" stroke-width="1"/>
                    <text x="100" y="105" text-anchor="middle">1</text>
                    
                    <rect x="140" y="70" width="60" height="60" rx="10" ry="10" fill="#a0e0a0" stroke="#333" stroke-width="1"/>
                    <text x="170" y="95" text-anchor="middle">2</text>
                    <text x="170" y="115" text-anchor="middle" font-size="12">continue!</text>
                    
                    <rect x="210" y="70" width="60" height="60" rx="10" ry="10" fill="#a0d0e0" stroke="#333" stroke-width="1"/>
                    <text x="240" y="105" text-anchor="middle">3</text>
                    
                    <rect x="280" y="70" width="60" height="60" rx="10" ry="10" fill="#a0d0e0" stroke="#333" stroke-width="1"/>
                    <text x="310" y="105" text-anchor="middle">4</text>
                    
                    <rect x="350" y="70" width="60" height="60" rx="10" ry="10" fill="#a0d0e0" stroke="#333" stroke-width="1"/>
                    <text x="380" y="105" text-anchor="middle">5</text>
                    
                    <!-- Continue arrow -->
                    <path d="M170 130 L170 150 C170 160, 220 160, 220 150 L220 130" stroke="#40a040" stroke-width="3" fill="none" marker-end="url(#continuearrow)"/>
                    <text x="195" y="170" text-anchor="middle" fill="#40a040">Skip to Next</text>
                    
                    <!-- Arrowhead marker -->
                    <defs>
                        <marker id="continuearrow" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto">
                            <polygon points="0 0, 10 3.5, 0 7" fill="#40a040"/>
                        </marker>
                    </defs>
                </svg>
            </div>
            
            <div class="syntax">
                <h3>Syntax</h3>
                <div class="code-block">
                    <pre><code>continue;</code></pre>
                </div>
                
                <p>Like <code>break</code>, the <code>continue</code> statement can also include a numeric argument:</p>
                
                <div class="code-block">
                    <pre><code>continue n; // Skip to the next iteration of the nth enclosing loop</code></pre>
                </div>
            </div>
            
            <div class="example">
                <h3>Basic Example: Processing Only Even Numbers</h3>
                <div class="code-block">
                    <pre><code>&lt;?php
$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
$sum = 0;

echo "Adding only even numbers:&lt;br&gt;";

foreach ($numbers as $number) {
    // Skip odd numbers
    if ($number % 2 !== 0) {
        echo "Skipping $number (odd)&lt;br&gt;";
        continue;
    }
    
    // Process even numbers
    $sum += $number;
    echo "Adding $number to sum (now $sum)&lt;br&gt;";
}

echo "Final sum of even numbers: $sum";
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output:</h4>
                    <pre>Adding only even numbers:
Skipping 1 (odd)
Adding 2 to sum (now 2)
Skipping 3 (odd)
Adding 4 to sum (now 6)
Skipping 5 (odd)
Adding 6 to sum (now 12)
Skipping 7 (odd)
Adding 8 to sum (now 20)
Skipping 9 (odd)
Adding 10 to sum (now 30)
Final sum of even numbers: 30</pre>
                </div>
                
                <p>In this example, <code>continue</code> allows us to skip the odd numbers and only process the even ones. When an odd number is encountered, the rest of the loop body is skipped, and execution jumps to the next iteration.</p>
                
                <p>Think of <code>continue</code> like sorting mail—when you come across junk mail, you immediately discard it and continue to the next piece without further processing.</p>
            </div>
            
            <div class="example">
                <h3>Advanced Example: Nested Loops with continue</h3>
                <div class="code-block">
                    <pre><code>&lt;?php
// Generate a multiplication table with some exceptions
echo "&lt;h4&gt;Multiplication Table (skipping multiples of 5)&lt;/h4&gt;";
echo "&lt;table border='1' style='border-collapse: collapse'&gt;";

// Table header
echo "&lt;tr&gt;&lt;th&gt;×&lt;/th&gt;";
for ($i = 1; $i <= 10; $i++) {
    echo "&lt;th&gt;$i&lt;/th&gt;";
}
echo "&lt;/tr&gt;";

// Table body
for ($row = 1; $row <= 10; $row++) {
    echo "&lt;tr&gt;";
    echo "&lt;th&gt;$row&lt;/th&gt;"; // Row header
    
    for ($col = 1; $col <= 10; $col++) {
        $result = $row * $col;
        
        // Skip multiples of 5
        if ($result % 5 === 0) {
            echo "&lt;td style='background-color: #ffd0d0;'&gt;Skip&lt;/td&gt;";
            continue;
        }
        
        echo "&lt;td&gt;$result&lt;/td&gt;";
    }
    
    echo "&lt;/tr&gt;";
}

echo "&lt;/table&gt;";
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output:</h4>
                    <h4>Multiplication Table (skipping multiples of 5)</h4>
                    <table border="1" style="border-collapse: collapse">
                        <tr>
                            <th>×</th>
                            <th>1</th>
                            <th>2</th>
                            <th>3</th>
                            <th>4</th>
                            <th>5</th>
                            <th>6</th>
                            <th>7</th>
                            <th>8</th>
                            <th>9</th>
                            <th>10</th>
                        </tr>
                        <tr>
                            <th>1</th>
                            <td>1</td>
                            <td>2</td>
                            <td>3</td>
                            <td>4</td>
                            <td style="background-color: #ffd0d0;">Skip</td>
                            <td>6</td>
                            <td>7</td>
                            <td>8</td>
                            <td>9</td>
                            <td style="background-color: #ffd0d0;">Skip</td>
                        </tr>
                        <tr>
                            <th>2</th>
                            <td>2</td>
                            <td>4</td>
                            <td>6</td>
                            <td>8</td>
                            <td style="background-color: #ffd0d0;">Skip</td>
                            <td>12</td>
                            <td>14</td>
                            <td>16</td>
                            <td>18</td>
                            <td style="background-color: #ffd0d0;">Skip</td>
                        </tr>
                        <!-- Additional rows would follow... -->
                    </table>
                </div>
                
                <p>This example uses the <code>continue</code> statement to skip certain calculations in a multiplication table. When a multiple of 5 is encountered, we display "Skip" instead of the actual value and proceed to the next cell.</p>
                
                <p>Think of this like following a recipe but skipping certain ingredients that you don't like or are allergic to—you still complete the recipe, just without those specific items.</p>
            </div>
            
            <div class="example">
                <h3>Using continue with a Numeric Argument</h3>
                <div class="code-block">
                    <pre><code>&lt;?php
// Process a 2D array, skipping certain sub-arrays entirely
$data = [
    [1, 2, 3, 4],
    [5, -1, 7, 8],  // Contains a negative value
    [9, 10, 11, 12],
    [13, 14, -2, 16],  // Contains a negative value
    [17, 18, 19, 20]
];

echo "Processing only sub-arrays without negative values:&lt;br&gt;";

for ($i = 0; $i < count($data); $i++) {
    echo "Checking sub-array $i: [" . implode(", ", $data[$i]) . "]&lt;br&gt;";
    
    // Check if this sub-array contains any negative values
    for ($j = 0; $j < count($data[$i]); $j++) {
        if ($data[$i][$j] < 0) {
            echo "Found negative value " . $data[$i][$j] . " at position [$i][$j], skipping entire sub-array&lt;br&gt;";
            continue 2; // Skip to the next iteration of the outer loop
        }
    }
    
    // Process the sub-array (only reached if no negatives were found)
    $sum = array_sum($data[$i]);
    echo "Processing sub-array $i, sum: $sum&lt;br&gt;";
    echo "&lt;hr&gt;";
}
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output:</h4>
                    <pre>Processing only sub-arrays without negative values:
Checking sub-array 0: [1, 2, 3, 4]
Processing sub-array 0, sum: 10
------------------------------
Checking sub-array 1: [5, -1, 7, 8]
Found negative value -1 at position [1][1], skipping entire sub-array
Checking sub-array 2: [9, 10, 11, 12]
Processing sub-array 2, sum: 42
------------------------------
Checking sub-array 3: [13, 14, -2, 16]
Found negative value -2 at position [3][2], skipping entire sub-array
Checking sub-array 4: [17, 18, 19, 20]
Processing sub-array 4, sum: 74
------------------------------</pre>
                </div>
                
                <p>This example demonstrates <code>continue</code> with a numeric argument. By using <code>continue 2</code>, we skip the rest of the inner loop <em>and</em> the current iteration of the outer loop when a negative value is found. This allows us to efficiently skip processing sub-arrays that don't meet our criteria.</p>
                
                <p>Think of this like inspecting a batch of products—if you find a defect in any item from a batch, you might decide to reject the entire batch and move on to the next one.</p>
            </div>
        </section>

        <section class="comparison">
            <h2>break vs. continue: When to Use Each</h2>
            
            <div class="comparison-table">
                <svg viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg">
                    <!-- Header -->
                    <rect x="50" y="50" width="300" height="50" fill="#4a7ba7" stroke="#333" stroke-width="1"/>
                    <text x="200" y="80" text-anchor="middle" fill="white" font-weight="bold">break</text>
                    
                    <rect x="350" y="50" width="300" height="50" fill="#4a7ba7" stroke="#333" stroke-width="1"/>
                    <text x="500" y="80" text-anchor="middle" fill="white" font-weight="bold">continue</text>
                    
                    <!-- Row 1: Purpose -->
                    <rect x="50" y="100" width="300" height="75" fill="#e0f0ff" stroke="#333" stroke-width="1"/>
                    <text x="200" y="125" text-anchor="middle" font-weight="bold">Purpose</text>
                    <text x="200" y="150" text-anchor="middle" font-size="14">Terminates loop execution entirely</text>
                    
                    <rect x="350" y="100" width="300" height="75" fill="#e0f0ff" stroke="#333" stroke-width="1"/>
                    <text x="500" y="125" text-anchor="middle" font-weight="bold">Purpose</text>
                    <text x="500" y="150" text-anchor="middle" font-size="14">Skips current iteration and continues with next</text>
                    
                    <!-- Row 2: Use Cases -->
                    <rect x="50" y="175" width="300" height="125" fill="#f0f7ff" stroke="#333" stroke-width="1"/>
                    <text x="200" y="200" text-anchor="middle" font-weight="bold">When to Use</text>
                    <text x="200" y="225" text-anchor="middle" font-size="14">• When you've found what you're looking for</text>
                    <text x="200" y="250" text-anchor="middle" font-size="14">• When an error or exceptional condition occurs</text>
                    <text x="200" y="275" text-anchor="middle" font-size="14">• When continuing is unnecessary or inefficient</text>
                    
                    <rect x="350" y="175" width="300" height="125" fill="#f0f7ff" stroke="#333" stroke-width="1"/>
                    <text x="500" y="200" text-anchor="middle" font-weight="bold">When to Use</text>
                    <text x="500" y="225" text-anchor="middle" font-size="14">• When you want to skip certain elements</text>
                    <text x="500" y="250" text-anchor="middle" font-size="14">• For filtering operations</text>
                    <text x="500" y="275" text-anchor="middle" font-size="14">• When some iterations can be skipped but not all</text>
                    
                    <!-- Row 3: Analogy -->
                    <rect x="50" y="300" width="300" height="75" fill="#e0f0ff" stroke="#333" stroke-width="1"/>
                    <text x="200" y="325" text-anchor="middle" font-weight="bold">Analogy</text>
                    <text x="200" y="350" text-anchor="middle" font-size="14">Emergency exit - leave the building immediately</text>
                    
                    <rect x="350" y="300" width="300" height="75" fill="#e0f0ff" stroke="#333" stroke-width="1"/>
                    <text x="500" y="325" text-anchor="middle" font-weight="bold">Analogy</text>
                    <text x="500" y="350" text-anchor="middle" font-size="14">Skip to the next chapter in a book</text>
                </svg>
            </div>
            
            <p>Understanding when to use <code>break</code> versus <code>continue</code> is important for writing efficient and readable code:</p>
            
            <ul>
                <li><strong>Use break when:</strong>
                    <ul>
                        <li>You've found what you're searching for and don't need to check the rest of the elements</li>
                        <li>An error or exceptional condition makes continuing the loop pointless or dangerous</li>
                        <li>You've reached a natural endpoint in your processing logic</li>
                    </ul>
                </li>
                <li><strong>Use continue when:</strong>
                    <ul>
                        <li>You want to skip processing for certain elements but continue with others</li>
                        <li>You're filtering or selecting items that match specific criteria</li>
                        <li>Some iterations can be skipped to improve efficiency, but you still need to process the remaining elements</li>
                    </ul>
                </li>
            </ul>
        </section>

        <section class="loop-types">
            <h2>Control Statements in Different Loop Types</h2>
            
            <p>The <code>break</code> and <code>continue</code> statements work with all PHP loop types, but with some important differences to keep in mind:</p>
            
            <div class="subsection">
                <h3>In for Loops</h3>
                <div class="code-block">
                    <pre><code>&lt;?php
echo "Using break in a for loop:&lt;br&gt;";
for ($i = 1; $i <= 10; $i++) {
    if ($i == 5) {
        echo "Reached 5, breaking the loop&lt;br&gt;";
        break;
    }
    echo "Iteration: $i&lt;br&gt;";
}

echo "&lt;hr&gt;";

echo "Using continue in a for loop:&lt;br&gt;";
for ($i = 1; $i <= 10; $i++) {
    if ($i % 3 == 0) {
        echo "Skipping $i (multiple of 3)&lt;br&gt;";
        continue;
    }
    echo "Processing: $i&lt;br&gt;";
}
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output:</h4>
                    <pre>Using break in a for loop:
Iteration: 1
Iteration: 2
Iteration: 3
Iteration: 4
Reached 5, breaking the loop
------------------------------
Using continue in a for loop:
Processing: 1
Processing: 2
Skipping 3 (multiple of 3)
Processing: 4
Processing: 5
Skipping 6 (multiple of 3)
Processing: 7
Processing: 8
Skipping 9 (multiple of 3)
Processing: 10</pre>
                </div>
                
                <p>In for loops, <code>continue</code> skips the remainder of the loop body but still executes the increment expression. This is important to understand, as the counter variable will still be updated when <code>continue</code> is used.</p>
            </div>
            
            <div class="subsection">
                <h3>In while and do-while Loops</h3>
                <div class="code-block">
                    <pre><code>&lt;?php
echo "Using break in a while loop:&lt;br&gt;";
$counter = 1;
while ($counter <= 10) {
    if ($counter == 5) {
        echo "Reached 5, breaking the loop&lt;br&gt;";
        break;
    }
    echo "Iteration: $counter&lt;br&gt;";
    $counter++;
}

echo "&lt;hr&gt;";

echo "Using continue in a while loop:&lt;br&gt;";
$counter = 1;
while ($counter <= 10) {
    if ($counter % 3 == 0) {
        echo "Skipping $counter (multiple of 3)&lt;br&gt;";
        $counter++; // Important! Must increment before continue
        continue;
    }
    echo "Processing: $counter&lt;br&gt;";
    $counter++;
}
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output:</h4>
                    <pre>Using break in a while loop:
Iteration: 1
Iteration: 2
Iteration: 3
Iteration: 4
Reached 5, breaking the loop
------------------------------
Using continue in a while loop:
Processing: 1
Processing: 2
Skipping 3 (multiple of 3)
Processing: 4
Processing: 5
Skipping 6 (multiple of 3)
Processing: 7
Processing: 8
Skipping 9 (multiple of 3)
Processing: 10</pre>
                </div>
                
                <div class="warning">
                    <h4>Important Note:</h4>
                    <p>In while and do-while loops, you must update your counter variable before using <code>continue</code>, or you'll create an infinite loop! Unlike for loops, the increment isn't built into the loop structure.</p>
                </div>
                
                <p>This is a common source of bugs—always make sure your loop variable is properly updated before using <code>continue</code> in while or do-while loops.</p>
            </div>
            
            <div class="subsection">
                <h3>In foreach Loops</h3>
                <div class="code-block">
                    <pre><code>&lt;?php
echo "Using break in a foreach loop:&lt;br&gt;";
$fruits = ["Apple", "Banana", "Cherry", "Durian", "Elderberry"];
foreach ($fruits as $index => $fruit) {
    if ($fruit == "Durian") {
        echo "Found Durian, breaking the loop&lt;br&gt;";
        break;
    }
    echo "Fruit #" . ($index + 1) . ": $fruit&lt;br&gt;";
}

echo "&lt;hr&gt;";

echo "Using continue in a foreach loop:&lt;br&gt;";
$scores = ["John" => 85, "Mary" => 92, "Bob" => 67, "Alice" => 95, "Tom" => 78];
foreach ($scores as $student => $score) {
    if ($score < 80) {
        echo "Skipping $student (score below 80)&lt;br&gt;";
        continue;
    }
    echo "$student has a good score: $score&lt;br&gt;";
}
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output:</h4>
                    <pre>Using break in a foreach loop:
Fruit #1: Apple
Fruit #2: Banana
Fruit #3: Cherry
Found Durian, breaking the loop
------------------------------
Using continue in a foreach loop:
John has a good score: 85
Mary has a good score: 92
Skipping Bob (score below 80)
Alice has a good score: 95
Skipping Tom (score below 80)</pre>
                </div>
                
                <p>In foreach loops, <code>continue</code> skips to the next element in the array or object. You don't need to worry about counter variables since foreach automatically handles the iteration.</p>
            </div>
        </section>

        <section class="real-world">
            <h2>Real-World Examples</h2>
            
            <div class="subsection">
                <h3>Form Validation</h3>
                <p>Control statements are useful for form validation logic:</p>
                
                <div class="code-block">
                    <pre><code>&lt;?php
// Simulated form data
$formData = [
    "username" => "john_doe",
    "email" => "john@example.com",
    "password" => "pass123",
    "age" => "25",
    "terms" => "yes"
];

// Required fields
$requiredFields = ["username", "email", "password", "terms"];

// Validation rules
$validationRules = [
    "username" => "/^[a-zA-Z0-9_]{3,20}$/",
    "email" => "/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/",
    "password" => "/^.{6,}$/",
    "age" => "/^[0-9]+$/"
];

// Validate the form
$errors = [];
$isValid = true;

foreach ($formData as $field => $value) {
    // Skip fields that don't have validation rules
    if (!isset($validationRules[$field])) {
        echo "Field '$field' doesn't have validation rules, skipping...&lt;br&gt;";
        continue;
    }
    
    // Check if required field is empty
    if (in_array($field, $requiredFields) && empty($value)) {
        $errors[] = "Field '$field' is required but empty";
        $isValid = false;
        continue; // No need to perform pattern validation if empty
    }
    
    // Validate against pattern
    if (!preg_match($validationRules[$field], $value)) {
        $errors[] = "Field '$field' has invalid format: '$value'";
        $isValid = false;
    } else {
        echo "Field '$field' is valid: '$value'&lt;br&gt;";
    }
}

// Check final validation result
if ($isValid) {
    echo "&lt;hr&gt;Form is valid! Processing data...";
} else {
    echo "&lt;hr&gt;Form has errors:&lt;br&gt;";
    foreach ($errors as $error) {
        echo "- $error&lt;br&gt;";
    }
}
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output:</h4>
                    <pre>Field 'username' is valid: 'john_doe'
Field 'email' is valid: 'john@example.com'
Field 'password' is valid: 'pass123'
Field 'age' is valid: '25'
Field 'terms' doesn't have validation rules, skipping...
------------------------------
Form is valid! Processing data...</pre>
                </div>
                
                <p>In this form validation example, <code>continue</code> is used to skip fields that don't need further validation, making the code more efficient and easier to follow.</p>
            </div>
            
            <div class="subsection">
                <h3>Data Processing with Error Handling</h3>
                <p>Use break to handle error conditions in data processing:</p>
                
                <div class="code-block">
                    <pre><code>&lt;?php
// Simulate processing a batch of records
$records = [
    ["id" => 1, "name" => "John Smith", "email" => "john@example.com"],
    ["id" => 2, "name" => "Jane Doe", "email" => "jane@example.com"],
    ["id" => 3, "name" => "", "email" => "missing.name@example.com"],  // Missing name
    ["id" => 4, "name" => "Bob Johnson", "email" => "bob@example.com"],
    ["id" => 5, "name" => "Alice Brown", "email" => "invalid-email"]  // Invalid email
];

$batchId = "BATCH-" . date("Ymd-His");
$successCount = 0;
$errorCount = 0;
$continueOnError = true; // Toggle to control error handling behavior

echo "Starting to process batch: $batchId&lt;br&gt;";
echo "&lt;hr&gt;";

foreach ($records as $index => $record) {
    echo "Processing record #" . ($index + 1) . " (ID: " . $record["id"] . ")&lt;br&gt;";
    
    // Validate record
    $errors = [];
    
    if (empty($record["name"])) {
        $errors[] = "Name is required";
    }
    
    if (empty($record["email"]) || !filter_var($record["email"], FILTER_VALIDATE_EMAIL)) {
        $errors[] = "Valid email is required";
    }
    
    // Check for validation errors
    if (!empty($errors)) {
        $errorCount++;
        echo "Validation errors found:&lt;br&gt;";
        foreach ($errors as $error) {
            echo "- $error&lt;br&gt;";
        }
        
        if ($continueOnError) {
            echo "Skipping this record and continuing with the next one...&lt;br&gt;";
            echo "&lt;hr&gt;";
            continue;
        } else {
            echo "Aborting batch processing due to errors&lt;br&gt;";
            break;
        }
    }
    
    // Process the valid record (in a real app, this might be a database insert)
    echo "Record processed successfully: " . $record["name"] . " &lt;" . $record["email"] . "&gt;&lt;br&gt;";
    $successCount++;
    echo "&lt;hr&gt;";
}

// Final report
echo "Batch processing complete&lt;br&gt;";
echo "Successful records: $successCount&lt;br&gt;";
echo "Failed records: $errorCount&lt;br&gt;";
echo "Total records: " . count($records) . "&lt;br&gt;";

if ($continueOnError) {
    echo "Errors were skipped during processing";
} else {
    echo "Processing stopped at the first error";
}
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output (with continueOnError = true):</h4>
                    <pre>Starting to process batch: BATCH-20250427-123456
------------------------------
Processing record #1 (ID: 1)
Record processed successfully: John Smith &lt;john@example.com&gt;
------------------------------
Processing record #2 (ID: 2)
Record processed successfully: Jane Doe &lt;jane@example.com&gt;
------------------------------
Processing record #3 (ID: 3)
Validation errors found:
- Name is required
Skipping this record and continuing with the next one...
------------------------------
Processing record #4 (ID: 4)
Record processed successfully: Bob Johnson &lt;bob@example.com&gt;
------------------------------
Processing record #5 (ID: 5)
Validation errors found:
- Valid email is required
Skipping this record and continuing with the next one...
------------------------------
Batch processing complete
Successful records: 3
Failed records: 2
Total records: 5
Errors were skipped during processing</pre>
                </div>
                
                <p>This example shows how <code>break</code> and <code>continue</code> can be used for error handling in a data processing scenario. By toggling the <code>$continueOnError</code> variable, you can control whether to skip records with errors or abort the entire batch when an error is encountered.</p>
            </div>
        </section>

        <section class="best-practices">
            <h2>Best Practices and Pitfalls</h2>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 1100" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="1100" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="150.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="250.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="350.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="450.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="550.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="150.0" y1="200" x2="650.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="250.0" y1="200" x2="225.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="350.0" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="350.0" y1="200" x2="575.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="250.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="266.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[Document Complex Usage] A </text>
    <line x1="283.33333333333337" y1="80" x2="450.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="366.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; E[Consider Refactoring] B </text>
    <line x1="516.6666666666667" y1="80" x2="650.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="583.3333333333334" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; B2[can reduce readability] C </text>
    <line x1="250.0" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="325.0" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; D1[Check counter updates with while] E </text>
    <rect x="145.33333333333337" y="55" width="276" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Control Statement Best Practices</text>
    <rect x="454.66666666666674" y="55" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Use Sparingly</text>
    <rect x="52.0" y="175" width="196" height="50" 
          rx="5" class="node-rect"/>
    <text x="150.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Document Complex Usage</text>
    <rect x="144.0" y="175" width="212" height="50" 
          rx="5" class="node-rect"/>
    <text x="250.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Beware of Infinite Loops</text>
    <rect x="260.0" y="175" width="180" height="50" 
          rx="5" class="node-rect"/>
    <text x="350.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Consider Refactoring</text>
    <rect x="340.0" y="175" width="220" height="50" 
          rx="5" class="node-rect"/>
    <text x="450.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Too many breaks/continues</text>
    <rect x="452.0" y="175" width="196" height="50" 
          rx="5" class="node-rect"/>
    <text x="550.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">can reduce readability</text>
    <rect x="508.0" y="175" width="284" height="50" 
          rx="5" class="node-rect"/>
    <text x="650.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Especially with numeric arguments</text>
    <rect x="87.0" y="295" width="276" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Check counter updates with while</text>
    <rect x="294.0" y="295" width="212" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Consider using functions</text>
    <rect x="441.0" y="295" width="268" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">instead of complex nested loops</text>
</svg>
</div>
            
            <div class="subsection">
                <h3>Best Practices</h3>
                <ul>
                    <li><strong>Use sparingly:</strong> While control statements are powerful, overusing them can make your code difficult to follow. Code with too many <code>break</code> and <code>continue</code> statements may indicate a design that could be improved.</li>
                    <li><strong>Document usage:</strong> When using more complex patterns, especially with numeric arguments or in nested loops, add comments explaining the logic and purpose.</li>
                    <li><strong>Be careful with while/do-while:</strong> Always ensure counter variables are properly updated before using <code>continue</code> in these loops.</li>
                    <li><strong>Consider refactoring:</strong> If you find yourself using many nested loops with complex break/continue logic, consider refactoring into smaller functions or using other programming patterns for better readability.</li>
                    <li><strong>Use early returns in functions:</strong> In functions, returning early often leads to cleaner code than using break statements in loops.</li>
                </ul>
            </div>
            
            <div class="subsection">
                <h3>Common Pitfalls</h3>
                
                <div class="pitfall">
                    <h4>Infinite Loops with continue</h4>
                    <div class="code-block">
                        <pre><code>&lt;?php
// INCORRECT - creates an infinite loop
$i = 0;
while ($i < 10) {
    if ($i == 5) {
        // Oops! We forgot to increment $i before continuing
        continue;
    }
    echo $i . " ";
    $i++;
}

// CORRECT
$i = 0;
while ($i < 10) {
    if ($i == 5) {
        $i++; // Increment before continuing
        continue;
    }
    echo $i . " ";
    $i++;
}
?&gt;</code></pre>
                    </div>
                    
                    <p>The first example creates an infinite loop because when <code>$i</code> reaches 5, the <code>continue</code> statement skips the increment and the condition <code>$i == 5</code> will always be true.</p>
                </div>
                
                <div class="pitfall">
                    <h4>Break Only Exits One Level of Nesting</h4>
                    <div class="code-block">
                        <pre><code>&lt;?php
// INCORRECT - break only exits the inner loop
$found = false;
for ($i = 0; $i < 5; $i++) {
    for ($j = 0; $j < 5; $j++) {
        if ($i * $j == 6) {
            echo "Found it: $i * $j = 6&lt;br&gt;";
            $found = true;
            break; // This only breaks out of the inner loop
        }
    }
    if ($found) {
        // We need this extra check to break out of the outer loop
        break;
    }
}

// CORRECT - use break with a numeric argument
for ($i = 0; $i < 5; $i++) {
    for ($j = 0; $j < 5; $j++) {
        if ($i * $j == 6) {
            echo "Found it: $i * $j = 6&lt;br&gt;";
            break 2; // This breaks out of both loops
        }
    }
}
?&gt;</code></pre>
                    </div>
                    
                    <p>By default, <code>break</code> only exits the innermost loop. If you need to exit multiple levels of nested loops, use the numeric argument or restructure your code.</p>
                </div>
                
                <div class="pitfall">
                    <h4>Overusing Control Statements</h4>
                    <div class="code-block">
                        <pre><code>&lt;?php
// HARD TO READ - too many control statements
function processItems($items) {
    foreach ($items as $item) {
        if (empty($item['id'])) {
            continue;
        }
        
        if ($item['type'] == 'special') {
            if ($item['priority'] > 3) {
                // Process high-priority special items
            } else {
                continue;
            }
        } else {
            if ($item['status'] == 'active') {
                if ($item['value'] > 100) {
                    // Process high-value active items
                } else {
                    continue;
                }
            } else {
                continue;
            }
        }
    }
}

// BETTER - restructured logic
function processItemsBetter($items) {
    foreach ($items as $item) {
        // Skip invalid items
        if (empty($item['id'])) {
            continue;
        }
        
        // Process special items
        if ($item['type'] == 'special' && $item['priority'] > 3) {
            // Process high-priority special items
            continue;
        }
        
        // Process regular items
        if ($item['status'] == 'active' && $item['value'] > 100) {
            // Process high-value active items
        }
    }
}
?&gt;</code></pre>
                    </div>
                    
                    <p>Excessive use of control statements can make your code hard to follow. When possible, restructure your logic to be more straightforward and use early filtering to reduce nesting.</p>
                </div>
            </div>
        </section>

        <section class="alternatives">
            <h2>Alternatives to Control Statements</h2>
            
            <p>While <code>break</code> and <code>continue</code> are useful, sometimes there are cleaner alternatives:</p>
            
            <div class="subsection">
                <h3>Using Array Functions</h3>
                <div class="code-block">
                    <pre><code>&lt;?php
// Using break to find an element
$numbers = [1, 3, 5, 7, 9, 11, 13, 15];
$searchFor = 9;
$position = -1;

for ($i = 0; $i < count($numbers); $i++) {
    if ($numbers[$i] === $searchFor) {
        $position = $i;
        break;
    }
}

echo "Using break: Found $searchFor at position $position&lt;br&gt;";

// Alternative using array_search()
$position = array_search($searchFor, $numbers);
echo "Using array_search(): Found $searchFor at position $position&lt;br&gt;";

echo "&lt;hr&gt;";

// Using continue to filter elements
$values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
$evenValues = [];

foreach ($values as $value) {
    if ($value % 2 != 0) {
        continue; // Skip odd numbers
    }
    $evenValues[] = $value;
}

echo "Using continue: Even values: " . implode(", ", $evenValues) . "&lt;br&gt;";

// Alternative using array_filter()
$evenValues = array_filter($values, function($value) {
    return $value % 2 == 0;
});

echo "Using array_filter(): Even values: " . implode(", ", $evenValues) . "&lt;br&gt;";
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output:</h4>
                    <pre>Using break: Found 9 at position 4
Using array_search(): Found 9 at position 4
------------------------------
Using continue: Even values: 2, 4, 6, 8, 10
Using array_filter(): Even values: 2, 4, 6, 8, 10</pre>
                </div>
                
                <p>PHP provides many array functions that can replace loops with break/continue statements, often resulting in more concise and readable code.</p>
            </div>
            
            <div class="subsection">
                <h3>Using Early Returns in Functions</h3>
                <div class="code-block">
                    <pre><code>&lt;?php
// Using break/continue in a function
function validateUserWithLoops($userData) {
    $errors = [];
    $requiredFields = ['name', 'email', 'password'];
    
    foreach ($requiredFields as $field) {
        if (!isset($userData[$field]) || empty($userData[$field])) {
            $errors[] = "Missing required field: $field";
            continue;
        }
        
        // Field-specific validation
        switch ($field) {
            case 'email':
                if (!filter_var($userData['email'], FILTER_VALIDATE_EMAIL)) {
                    $errors[] = "Invalid email format";
                }
                break;
                
            case 'password':
                if (strlen($userData['password']) < 8) {
                    $errors[] = "Password must be at least 8 characters";
                }
                break;
        }
    }
    
    return empty($errors) ? true : $errors;
}

// Using early returns instead
function validateUserWithEarlyReturns($userData) {
    $requiredFields = ['name', 'email', 'password'];
    $errors = [];
    
    // Check required fields first
    foreach ($requiredFields as $field) {
        if (!isset($userData[$field]) || empty($userData[$field])) {
            $errors[] = "Missing required field: $field";
        }
    }
    
    // Return early if required fields are missing
    if (!empty($errors)) {
        return $errors;
    }
    
    // Email validation
    if (!filter_var($userData['email'], FILTER_VALIDATE_EMAIL)) {
        $errors[] = "Invalid email format";
    }
    
    // Password validation
    if (strlen($userData['password']) < 8) {
        $errors[] = "Password must be at least 8 characters";
    }
    
    return empty($errors) ? true : $errors;
}

// Test both functions
$user1 = [
    'name' => 'John Doe',
    'email' => 'john@example.com',
    'password' => 'short'
];

$result1 = validateUserWithLoops($user1);
$result2 = validateUserWithEarlyReturns($user1);

echo "Result with loops: ";
print_r($result1);
echo "&lt;br&gt;";

echo "Result with early returns: ";
print_r($result2);
?&gt;</code></pre>
                </div>
                
                <div class="output">
                    <h4>Output:</h4>
                    <pre>Result with loops: Array ( [0] => Password must be at least 8 characters )
Result with early returns: Array ( [0] => Password must be at least 8 characters )</pre>
                </div>
                
                <p>Using early returns in functions can often lead to more readable code than using break/continue statements in complex nested structures. This approach makes the control flow more explicit and easier to follow.</p>
            </div>
        </section>

        <section class="practice-exercises">
            <h2>Practice Exercises</h2>
            
            <div class="exercise">
                <h3>Exercise 1: Finding Prime Numbers</h3>
                <p>Create a function that finds all prime numbers up to a given limit using break and continue statements to optimize the process.</p>
                
                <div class="code-block">
                    <pre><code>&lt;?php
// Start with this code template
function findPrimes($limit) {
    $primes = [];
    
    // Loop through numbers from 2 to $limit
    for ($num = 2; $num <= $limit; $num++) {
        // Check if $num is prime
        // Use break to optimize when a factor is found
        // Use continue for optimization when appropriate
    }
    
    return $primes;
}

// Test the function
$limit = 50;
$primes = findPrimes($limit);
echo "Prime numbers up to $limit: " . implode(", ", $primes);
?&gt;</code></pre>
                </div>
                
                <div class="solution-hint">
                    <h4>Hint:</h4>
                    <p>A number is prime if it's only divisible by 1 and itself. You can use a break statement to exit the checking loop as soon as you find a factor (which proves the number is not prime). You can also use continue to skip known non-prime numbers (like even numbers greater than 2).</p>
                </div>
            </div>
            
            <div class="exercise">
                <h3>Exercise 2: Data Processing with Error Handling</h3>
                <p>Create a function that processes a list of transactions, validating each one and using break/continue to handle errors according to their severity.</p>
                
                <div class="code-block">
                    <pre><code>&lt;?php
// Start with this code template
$transactions = [
    ['id' => 101, 'amount' => 150.00, 'status' => 'pending'],
    ['id' => 102, 'amount' => -50.00, 'status' => 'completed'],  // Invalid amount
    ['id' => 103, 'amount' => 75.25, 'status' => 'completed'],
    ['id' => 104, 'amount' => 200.00, 'status' => 'unknown'],    // Invalid status
    ['id' => 105, 'amount' => 0.00, 'status' => 'pending'],      // Zero amount
];

function processTransactions($transactions) {
    $results = [
        'processed' => 0,
        'skipped' => 0,
        'processing_halted' => false,
        'total_amount' => 0,
    ];
    
    // Process each transaction
    // Use continue for non-critical errors
    // Use break for critical errors
    
    return $results;
}

// Test the function
$results = processTransactions($transactions);
print_r($results);
?&gt;</code></pre>
                </div>
                
                <div class="solution-hint">
                    <h4>Hint:</h4>
                    <p>Use continue to skip transactions with minor issues (like zero amount) and break to halt processing entirely on critical issues (like negative amounts). Keep track of statistics like the number of transactions processed and skipped.</p>
                </div>
            </div>
            
            <div class="exercise">
                <h3>Exercise 3: Matrix Operations</h3>
                <p>Create a function that performs operations on a matrix (2D array) using nested loops with break and continue to handle special cases.</p>
                
                <div class="code-block">
                    <pre><code>&lt;?php
// Start with this code template
$matrix = [
    [1, 2, 0, 4],
    [5, 0, 7, 8],
    [0, 10, 11, 12],
    [13, 14, 15, 0]
];

function processMatrix($matrix) {
    $result = [
        'row_sums' => [],
        'col_sums' => [],
        'zero_positions' => [],
        'max_value' => 0,
        'max_position' => []
    ];
    
    // Process the matrix
    // Calculate row sums (skip rows with more than one zero)
    // Calculate column sums (skip cells with zero value)
    // Find positions of all zeros
    // Find the maximum value and its position
    
    return $result;
}

// Test the function
$result = processMatrix($matrix);
print_r($result);
?&gt;</code></pre>
                </div>
                
                <div class="solution-hint">
                    <h4>Hint:</h4>
                    <p>Use nested loops to traverse the matrix. Use continue to skip specific cells (like zeros) when calculating sums. Use break to skip entire rows when they contain too many zeros. Keep track of the maximum value and its position while traversing.</p>
                </div>
            </div>
        </section>

        <section class="homework">
            <h2>Homework Assignment</h2>
            
            <div class="assignment">
                <h3>Create a program that uses break and continue statements</h3>
                <p>Develop a PHP application that demonstrates the use of break and continue statements in at least three different scenarios:</p>
                
                <ol>
                    <li>Create a data validation system that validates a set of records (like user registrations), using continue to skip invalid records and break to halt processing on critical errors.</li>
                    <li>Implement a search algorithm that searches for specific patterns in text, using break to optimize performance when matches are found.</li>
                    <li>Develop a simulated data processing pipeline that handles different types of data items, using both break and continue to manage the flow control based on item properties.</li>
                </ol>
                
                <p><strong>Requirements:</strong></p>
                <ul>
                    <li>Use both break and continue statements appropriately in each scenario.</li>
                    <li>Include at least one example of nested loops with break/continue with a numeric argument.</li>
                    <li>Implement error handling and logging to demonstrate the effects of the control statements.</li>
                    <li>Include meaningful comments explaining your code and the logic behind your break/continue usage.</li>
                    <li>Format your output with appropriate HTML and CSS.</li>
                    <li>Submit your code via the class GitHub repository by the next session.</li>
                </ul>
            </div>
        </section>

        <section class="resources">
            <h2>Additional Resources</h2>
            
            <div class="resource-list">
                <ul>
                    <li><a href="https://www.php.net/manual/en/control-structures.break.php" target="_blank">PHP Manual: Break Statement</a></li>
                    <li><a href="https://www.php.net/manual/en/control-structures.continue.php" target="_blank">PHP Manual: Continue Statement</a></li>
                    <li><a href="https://www.php.net/manual/en/language.control-structures.php" target="_blank">PHP Manual: Control Structures</a></li>
                    <li><a href="https://phptherightway.com/" target="_blank">PHP: The Right Way - Control Structures</a></li>
                </ul>
            </div>
        </section>

        <section class="next-session">
            <h2>Coming Up Next</h2>
            <p>In our next session, we'll explore arrays in PHP. Arrays are one of PHP's most powerful and versatile data structures, allowing you to store multiple values in a single variable. We'll cover indexed arrays, associative arrays, multidimensional arrays, and the many array functions that PHP provides for searching, sorting, and manipulating array data.</p>
            <p>Make sure to complete the homework assignment to reinforce your understanding of break and continue statements before the next class!</p>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
<script src="/assets/js/mermaid-universal-fix.js"></script>
</body>
</html>
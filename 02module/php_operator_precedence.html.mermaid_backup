<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>Module 2: PHP Operator Precedence - PHP WordPress Course</title>
<meta content="Understand operator precedence and evaluation order." name="description"/>
<meta content="PHP, WordPress, web development, php, operator, precedence" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>

<style>
/* Global diagram and SVG styles */
.mermaid-converted,
.svg-container,
.diagram {
    margin: 1.5rem auto !important;
    padding: 1rem !important;
    text-align: center !important;
    overflow: hidden !important;
    max-width: 100% !important;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #dee2e6;
}

.mermaid-converted svg,
.svg-container svg,
.diagram svg {
    max-width: 100% !important;
    height: auto !important;
    display: block !important;
    margin: 0 auto !important;
}

/* Fix for decision diamonds */
.decision-node polygon,
polygon.decision {
    fill: #fff3cd !important;
    stroke: #856404 !important;
    stroke-width: 2px !important;
}

/* Remove excessive bottom margins */
.mermaid-converted + *,
.svg-container + *,
.diagram + * {
    margin-top: 1.5rem !important;
}

/* Center content vertically in containers */
.mermaid-converted > *,
.svg-container > *,
.diagram > * {
    vertical-align: middle;
}
</style>

</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Operator Precedence</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 2</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_arithmetic_operators.html">Arithmetic Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_assignment_operators.html">Assignment Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_comparison_operators.html">Comparison Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_logical_operators.html">Logical Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_string_operators.html">String Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_array_operators.html">Array Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_type_operators.html">Type Operators</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/php_operator_precedence.html">Operator Precedence</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_calculator.html">Homework: Calculator</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/review_php_setup.html">← Prev: Session 1: PHP Setup</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_if.html">Next: Session 3: Conditionals →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>Module 2: PHP Operator Precedence</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 30 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: PHP Operators</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP operators</li>
<li>Understand operator precedence</li>
<li>Apply operators in practical scenarios</li>
<li>Write efficient expressions</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="intro">
            <h2>Introduction to PHP Operator Precedence</h2>
            <p>Welcome to our session on PHP Operator Precedence! When writing complex expressions in PHP, understanding the order in which operators are evaluated is crucial for creating code that behaves as expected. PHP, like most programming languages, follows specific rules for determining which operations are performed first in an expression containing multiple operators.</p>
            
            <p>Think of operator precedence as a set of traffic rules that govern the flow of operations in your code. Just as some vehicles (like emergency vehicles) have priority on the road, some operators in PHP have higher precedence than others. Today, we'll explore these precedence rules, understand how they affect your code, and learn how to write expressions that are both correct and clear, avoiding common pitfalls.</p>
        </section>

        <section class="what-is_precedence">
            <h2>What is Operator Precedence?</h2>
            <p>Operator precedence determines the order in which operators are evaluated in an expression. When you write an expression with multiple operators, PHP needs to know which operations to perform first. This is similar to the order of operations in mathematics (remember PEMDAS or BODMAS from school?).</p>

<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 700" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="700" fill="#fafafa" rx="8"/>
    
    <line x1="400.0" y1="200" x2="575.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="470.0" y1="80" x2="225.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="610.0" y1="80" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="505.0" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes: * has higher precedence</text>
    <line x1="610.0" y1="80" x2="575.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="592.5" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt;|Yes: * has higher precedence| C[&quot;3 * 2 = 6&quot;] C </text>
    <rect x="96.0" y="55" width="188" height="50" 
          rx="5" class="node-rect"/>
    <text x="190.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Expression: 5 + 3 * 2</text>
    <rect x="340.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">3 * 2 = 6</text>
    <rect x="515.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">5 + 6 = 11</text>
    <rect x="192.0" y="55" width="276" height="50" 
          rx="5" class="node-rect"/>
    <text x="330.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Without precedence:5 + 3 * 2 = ?</text>
    <rect x="248.0" y="55" width="444" height="50" 
          rx="5" class="node-rect"/>
    <text x="470.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">If evaluated left to right:5 + 3 = 8, then 8 * 2 = 16</text>
    <rect x="103.0" y="175" width="244" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">But this would be incorrect!</text>
    <polygon points="610.0,55.0 692.0,80.0 610.0,105.0 528.0,80.0" class="node-rect"/>
    <text x="610.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Higher precedence?</text>
</svg>
</div>
            
            <div class="code-example">
                <h3>Basic Precedence Example</h3>
                <pre><code>&lt;?php
// Example 1: Arithmetic precedence
$result1 = 5 + 3 * 2;
echo "5 + 3 * 2 = $result1&lt;br&gt;"; // Output: 11 (not 16)
// Multiplication has higher precedence than addition

// Example 2: Using parentheses to change precedence
$result2 = (5 + 3) * 2;
echo "(5 + 3) * 2 = $result2&lt;br&gt;"; // Output: 16
// Parentheses have the highest precedence

// Example 3: Multiple operators with different precedence
$result3 = 10 - 2 * 3 + 4 / 2;
echo "10 - 2 * 3 + 4 / 2 = $result3&lt;br&gt;"; // Output: 4
// Evaluated as: 10 - (2 * 3) + (4 / 2) = 10 - 6 + 2 = 4
?&gt;</code></pre>
            </div>
            
            <p>Without a clear understanding of operator precedence, your expressions might be evaluated in an unexpected order, leading to bugs that can be difficult to track down. Consider the difference between <code>$a && $b || $c</code> and <code>$a && ($b || $c)</code> - these can produce very different results!</p>
        </section>

        <section class="precedence-table">
            <h2>PHP Operator Precedence Table</h2>
            <p>PHP operators are listed below in order of precedence, with the highest precedence operators at the top. Operators with the same precedence are grouped together.</p>
            
            <table class="precedence-full">
                <thead>
                    <tr>
                        <th>Precedence</th>
                        <th>Operator(s)</th>
                        <th>Description</th>
                        <th>Associativity</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>( )</td>
                        <td>Parentheses (grouping)</td>
                        <td>n/a</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>**</td>
                        <td>Exponentiation</td>
                        <td>Right</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>++ --</td>
                        <td>Increment/decrement</td>
                        <td>n/a</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>~ - (int) (float) (string) (array) (object) (bool) !</td>
                        <td>Unary operations, type casting</td>
                        <td>Right</td>
                    </tr>
                    <tr>
                        <td>4</td>
                        <td>* / %</td>
                        <td>Multiplication, division, modulus</td>
                        <td>Left</td>
                    </tr>
                    <tr>
                        <td>5</td>
                        <td>+ - .</td>
                        <td>Addition, subtraction, string concatenation</td>
                        <td>Left</td>
                    </tr>
                    <tr>
                        <td>6</td>
                        <td>&lt;&lt; &gt;&gt;</td>
                        <td>Bitwise shift</td>
                        <td>Left</td>
                    </tr>
                    <tr>
                        <td>7</td>
                        <td>&lt; &lt;= &gt; &gt;= &lt;=&gt;</td>
                        <td>Comparison</td>
                        <td>n/a</td>
                    </tr>
                    <tr>
                        <td>8</td>
                        <td>== != === !== &lt;&gt;</td>
                        <td>Equality</td>
                        <td>n/a</td>
                    </tr>
                    <tr>
                        <td>9</td>
                        <td>&</td>
                        <td>Bitwise AND</td>
                        <td>Left</td>
                    </tr>
                    <tr>
                        <td>10</td>
                        <td>^</td>
                        <td>Bitwise XOR</td>
                        <td>Left</td>
                    </tr>
                    <tr>
                        <td>11</td>
                        <td>|</td>
                        <td>Bitwise OR</td>
                        <td>Left</td>
                    </tr>
                    <tr>
                        <td>12</td>
                        <td>&&</td>
                        <td>Logical AND</td>
                        <td>Left</td>
                    </tr>
                    <tr>
                        <td>13</td>
                        <td>||</td>
                        <td>Logical OR</td>
                        <td>Left</td>
                    </tr>
                    <tr>
                        <td>14</td>
                        <td>??</td>
                        <td>Null coalescing</td>
                        <td>Right</td>
                    </tr>
                    <tr>
                        <td>15</td>
                        <td>? :</td>
                        <td>Ternary</td>
                        <td>Left</td>
                    </tr>
                    <tr>
                        <td>16</td>
                        <td>= += -= *= /= .= %= &= |= ^= &lt;&lt;= &gt;&gt;= **= ??=</td>
                        <td>Assignment</td>
                        <td>Right</td>
                    </tr>
                    <tr>
                        <td>17</td>
                        <td>and</td>
                        <td>Logical AND</td>
                        <td>Left</td>
                    </tr>
                    <tr>
                        <td>18</td>
                        <td>xor</td>
                        <td>Logical XOR</td>
                        <td>Left</td>
                    </tr>
                    <tr>
                        <td>19</td>
                        <td>or</td>
                        <td>Logical OR</td>
                        <td>Left</td>
                    </tr>
                </tbody>
            </table>
            
            <div class="note">
                <p><strong>Note:</strong> This precedence table is for PHP 7 and later. Some operators may behave differently in older versions of PHP.</p>
            </div>
        </section>

        <section class="key-precedence_groups">
            <h2>Key Precedence Groups</h2>
            <p>Let's explore some of the most important precedence groups that you'll encounter frequently in PHP development:</p>
            
            <div class="subsection">
                <h3>1. Parentheses - The Highest Precedence</h3>
                <p>Parentheses always have the highest precedence. They allow you to explicitly control the order of operations:</p>
                
                <pre><code>&lt;?php
// Parentheses change the evaluation order
$a = 5;
$b = 3;
$c = 2;

// Without parentheses
$result1 = $a + $b * $c;
echo "Without parentheses: $a + $b * $c = $result1&lt;br&gt;"; // 11

// With parentheses
$result2 = ($a + $b) * $c;
echo "With parentheses: ($a + $b) * $c = $result2&lt;br&gt;"; // 16

// Multiple levels of parentheses
$result3 = ($a + ($b * $c)) / 2;
echo "Nested parentheses: ($a + ($b * $c)) / 2 = $result3&lt;br&gt;"; // 5.5
?&gt;</code></pre>
                
                <p><strong>Best Practice:</strong> Use parentheses liberally to make your code more readable and to ensure operations are performed in the intended order, even when the default precedence would give the same result.</p>
            </div>
            
            <div class="subsection">
                <h3>2. Arithmetic Operators</h3>
                <p>Arithmetic operators follow a precedence similar to mathematical conventions:</p>
                
                <pre><code>&lt;?php
// Arithmetic operators precedence
$result1 = 10 + 20 * 3 - 40 / 5;
echo "10 + 20 * 3 - 40 / 5 = $result1&lt;br&gt;"; // 10 + 60 - 8 = 62

// Using parentheses for clarity
$result2 = 10 + (20 * 3) - (40 / 5);
echo "10 + (20 * 3) - (40 / 5) = $result2&lt;br&gt;"; // Same result, but clearer

// Exponentiation has higher precedence than multiplication
$result3 = 2 * 3 ** 2;
echo "2 * 3 ** 2 = $result3&lt;br&gt;"; // 2 * 9 = 18 (not 6^2 = 36)

// Modulus has same precedence as multiplication
$result4 = 10 + 20 % 3 * 2;
echo "10 + 20 % 3 * 2 = $result4&lt;br&gt;"; // 10 + (2 * 2) = 14
?&gt;</code></pre>
                
                <p><strong>Key Points:</strong></p>
                <ul>
                    <li>Exponentiation (**) has higher precedence than multiplication, division, and modulus</li>
                    <li>Multiplication (*), division (/), and modulus (%) have equal precedence</li>
                    <li>Addition (+) and subtraction (-) have equal precedence, lower than multiplication/division</li>
                </ul>
            </div>
            
            <div class="subsection">
                <h3>3. String Concatenation</h3>
                <p>The string concatenation operator (.) has the same precedence as addition and subtraction:</p>
                
                <pre><code>&lt;?php
// String concatenation precedence
$name = "John";
$greeting = "Hello, " . $name . "! Today is " . date('l');
echo $greeting . "&lt;br&gt;";

// Concatenation and arithmetic
$a = 5;
$b = 10;
$result = "The sum is: " . $a + $b; // Caution! This doesn't work as expected
echo $result . "&lt;br&gt;"; // Warning: A non-numeric value...

// Correct way with parentheses
$result = "The sum is: " . ($a + $b);
echo $result . "&lt;br&gt;"; // The sum is: 15

// Concatenation vs. addition
$num1 = "10";
$num2 = "20";
$result1 = $num1 + $num2; // Addition (strings converted to numbers)
$result2 = $num1 . $num2; // Concatenation
echo "$num1 + $num2 = $result1 (numeric addition)&lt;br&gt;"; // 30
echo "$num1 . $num2 = $result2 (string concatenation)&lt;br&gt;"; // 1020
?&gt;</code></pre>
                
                <p><strong>Caution:</strong> Be particularly careful when mixing string concatenation with other operators. Use parentheses to clearly indicate your intent.</p>
            </div>
            
            <div class="subsection">
                <h3>4. Comparison and Logical Operators</h3>
                <p>Understanding the precedence between comparison and logical operators is crucial for writing correct conditional expressions:</p>
                
                <pre><code>&lt;?php
// Comparison and logical operators
$a = 5;
$b = 10;
$c = 15;

// Logical operators precedence
$result1 = $a < $b && $b < $c;
echo "($a < $b) && ($b < $c) = " . ($result1 ? 'true' : 'false') . "&lt;br&gt;"; // true

// Comparison has higher precedence than logical operators
$result2 = $a < $b && $b > $c;
echo "($a < $b) && ($b > $c) = " . ($result2 ? 'true' : 'false') . "&lt;br&gt;"; // false

// AND vs OR precedence
$result3 = $a < $b || $b > $c && $a < $c;
// Evaluated as: $a < $b || ($b > $c && $a < $c)
echo "$a < $b || $b > $c && $a < $c = " . ($result3 ? 'true' : 'false') . "&lt;br&gt;"; // true

// Using parentheses for different logic
$result4 = ($a < $b || $b > $c) && $a < $c;
echo "($a < $b || $b > $c) && $a < $c = " . ($result4 ? 'true' : 'false') . "&lt;br&gt;"; // true

// Different result with different parentheses
$result5 = $a < $b || ($b > $c && $a < $c);
echo "$a < $b || ($b > $c && $a < $c) = " . ($result5 ? 'true' : 'false') . "&lt;br&gt;"; // true
?&gt;</code></pre>
                
                <p><strong>Key Points:</strong></p>
                <ul>
                    <li>Comparison operators (&lt;, &gt;, &lt;=, &gt;=, ==, ===, etc.) have higher precedence than logical operators</li>
                    <li>&& (logical AND) has higher precedence than || (logical OR)</li>
                    <li>The word-form operators (and, or, xor) have lower precedence than their symbolic counterparts</li>
                </ul>
            </div>
            
            <div class="subsection">
                <h3>5. Assignment Operators</h3>
                <p>Assignment operators have very low precedence, which can lead to some surprising behavior:</p>
                
                <pre><code>&lt;?php
// Assignment operator precedence
$a = 5;
$b = 10;

// Assignment vs. comparison
if ($c = $a + $b) {
    echo "This will execute because $c is 15 (truthy)&lt;br&gt;";
}

// Correct comparison (using ==)
if ($c == $a + $b) {
    echo "This checks if $c equals " . ($a + $b) . "&lt;br&gt;";
}

// Multiple assignments
$x = $y = $z = 0;
echo "After $x = $y = $z = 0: x = $x, y = $y, z = $z&lt;br&gt;";

// Assignment in expressions
$total = 0;
$numbers = [1, 2, 3, 4, 5];
foreach ($numbers as $num) {
    // The assignment happens, then the value is added to $total
    echo "Total += " . ($total += $num) . "&lt;br&gt;";
}
?&gt;</code></pre>
                
                <p><strong>Caution:</strong> The low precedence of assignment operators is often the source of bugs, especially when mistakenly using = (assignment) instead of == (comparison) in conditional statements.</p>
            </div>
            
            <div class="subsection">
                <h3>6. Different Precedence: Symbolic vs. Word Form Operators</h3>
                <p>PHP provides both symbolic (&&, ||) and word form (and, or) logical operators, with different precedence levels:</p>
                
                <pre><code>&lt;?php
// Symbolic vs. word form operators
$a = true;
$b = false;
$c = true;

// && (higher precedence) vs. and (lower precedence)
$result1 = $a && $b; // $a && $b = false
$result2 = $a and $b; // Interpreted as: ($a) and $b, which is true and false = false

// This is where it gets tricky
$var1 = $a && $b;     // $var1 = false
$var2 = $a and $b;    // Interpreted as: ($var2 = $a) and $b, so $var2 = true!

echo "Using &&: " . ($var1 ? 'true' : 'false') . "&lt;br&gt;"; // false
echo "Using and: " . ($var2 ? 'true' : 'false') . "&lt;br&gt;"; // true!

// || (higher precedence) vs. or (lower precedence)
$var3 = $a || $b;     // $var3 = true
$var4 = $a or $b;     // Interpreted as: ($var4 = $a) or $b, so $var4 = true

echo "Using ||: " . ($var3 ? 'true' : 'false') . "&lt;br&gt;"; // true
echo "Using or: " . ($var4 ? 'true' : 'false') . "&lt;br&gt;"; // true (same result this time)

// Mixing with assignment (very tricky!)
$var5 = false || true;  // $var5 = true
$var6 = false or true;  // Interpreted as: ($var6 = false) or true, so $var6 = false!

echo "false || true results in: " . ($var5 ? 'true' : 'false') . "&lt;br&gt;"; // true
echo "false or true results in: " . ($var6 ? 'true' : 'false') . "&lt;br&gt;"; // false!
?&gt;</code></pre>
                
                <p><strong>Best Practice:</strong> For clarity and to avoid subtle bugs, prefer the symbolic operators (&&, ||) over the word forms (and, or). If you do use the word forms, always use parentheses to clarify your intent.</p>
            </div>
        </section>

        <section class="associativity">
            <h2>Operator Associativity</h2>
            <p>In addition to precedence, PHP operators also have associativity, which determines the order of evaluation when multiple operators of the same precedence appear in an expression.</p>

<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 700" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="700" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="225.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="575.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="225.0" y1="200" x2="283.33333333333337" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="400.0" y1="200" x2="516.6666666666667" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="341.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[&quot;Right Associativity&quot;] A </text>
    <line x1="225.0" y1="200" x2="516.6666666666667" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="370.83333333333337" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C1[&quot;Evaluated right to leftExample: $a = $b = 5 means $a = ($b = 5)&quot;] D </text>
    <rect x="185.33333333333337" y="55" width="196" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Operator Associativity</text>
    <rect x="434.66666666666674" y="55" width="164" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Left Associativity</text>
    <rect x="139.0" y="175" width="172" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Right Associativity</text>
    <rect x="330.0" y="175" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Non-Associative</text>
    <rect x="321.0" y="175" width="508" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Evaluated left to rightExample: 10 - 5 - 2 = (10 - 5) - 2 = 3</text>
    <rect x="21.33333333333337" y="295" width="524" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Evaluated right to leftExample: $a = $b = 5 means $a = ($b = 5)</text>
    <rect x="286.66666666666674" y="295" width="460" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Cannot be chainedExample: $a &lt; $b &lt; $c is not valid PHP</text>
</svg>
</div>
            
            <div class="code-example">
                <h3>Associativity Examples</h3>
                <pre><code>&lt;?php
// Left associativity examples
$a = 20;
$b = 10;
$c = 5;

// Subtraction is left-associative
$result1 = $a - $b - $c;  // ($a - $b) - $c = (20 - 10) - 5 = 5
echo "$a - $b - $c = $result1&lt;br&gt;"; // 5

// Division is also left-associative
$result2 = $a / $b / $c;  // ($a / $b) / $c = (20 / 10) / 5 = 0.4
echo "$a / $b / $c = $result2&lt;br&gt;"; // 0.4

// Right associativity examples

// Assignment is right-associative
$x = $y = $z = 5;  // $x = ($y = ($z = 5))
echo "After $x = $y = $z = 5: x = $x, y = $y, z = $z&lt;br&gt;"; // All 5

// Exponentiation is right-associative
$result3 = 2 ** 3 ** 2;  // 2 ** (3 ** 2) = 2 ** 9 = 512 (not (2 ** 3) ** 2 = 64)
echo "2 ** 3 ** 2 = $result3&lt;br&gt;"; // 512

// Non-associative examples

// Comparison operators are non-associative
$value = 5;
// This does NOT work as in mathematics: 1 < $value < 10
//$result4 = 1 < $value < 10;  // PHP evaluates this as (1 < $value) < 10, which is (true) < 10

// Correct way to check if value is in range
$result5 = (1 < $value) && ($value < 10);
echo "Is $value between 1 and 10? " . ($result5 ? 'Yes' : 'No') . "&lt;br&gt;"; // Yes
?&gt;</code></pre>
            </div>
            
            <div class="important-notes">
                <h3>Important Notes on Associativity</h3>
                <ul>
                    <li><strong>Left associative operators</strong> (like +, -, *, /, %, &amp;, |, ^, &amp;&amp;, ||) group from left to right</li>
                    <li><strong>Right associative operators</strong> (like =, +=, -=, *=, /=, **) group from right to left</li>
                    <li><strong>Non-associative operators</strong> (like ==, !=, ===, !==, &lt;, &gt;, &lt;=, &gt;=) cannot be chained without parentheses</li>
                    <li>Understanding associativity is particularly important when working with assignment operators and exponentiation</li>
                </ul>
            </div>
        </section>

        <section class="common-pitfalls">
            <h2>Common Pitfalls and Mistakes</h2>
            <p>Let's examine some common mistakes related to operator precedence and how to avoid them:</p>
            
            <div class="subsection">
                <h3>1. Assignment vs. Comparison</h3>
                <p>One of the most common errors in PHP is confusing the assignment operator (=) with the equality comparison operator (==):</p>
                
                <pre><code>&lt;?php
// Assignment vs. comparison pitfall
$value = 10;

// WRONG: Assignment in condition
if ($result = 20) {
    echo "This always executes because 20 is truthy&lt;br&gt;";
    echo "And \$result now equals $result&lt;br&gt;";
}

// CORRECT: Comparison in condition
if ($value == 20) {
    echo "This only executes if \$value equals 20&lt;br&gt;";
} else {
    echo "\$value does not equal 20&lt;br&gt;";
}

// The assignment error is especially common in loops
$i = 0;
// WRONG: Infinite loop because we're assigning, not comparing
/* 
while ($i = 1) {
    echo "This will run forever!";
}
*/

// CORRECT: Comparison in loop condition
while ($i == 0) {
    echo "This runs once&lt;br&gt;";
    $i++;
}
?&gt;</code></pre>
                
                <p><strong>Prevention:</strong> Many developers adopt the practice of putting the constant value on the left side of comparisons (e.g., <code>if (20 == $value)</code>), which would cause a syntax error if you accidentally used = instead of ==. Modern IDEs will also warn you about this issue.</p>
            </div>
            
            <div class="subsection">
                <h3>2. Logical Operator Precedence Confusion</h3>
                <p>Misunderstanding the precedence of logical operators can lead to unexpected behavior:</p>
                
                <pre><code>&lt;?php
// Logical operator precedence pitfall
$a = true;
$b = false;
$c = true;

// WRONG: Assuming OR and AND have the same precedence
$result1 = $a || $b && $c;
echo "Using $a || $b && $c without parentheses: " . ($result1 ? 'true' : 'false') . "&lt;br&gt;";
// This evaluates as: $a || ($b && $c) because && has higher precedence

// CORRECT: Use parentheses to control evaluation order
$result2 = ($a || $b) && $c;
echo "Using ($a || $b) && $c with parentheses: " . ($result2 ? 'true' : 'false') . "&lt;br&gt;";

// WRONG: Mixing word forms and symbols without understanding precedence
$var = false;
$result3 = $var or true;
echo "Using 'false or true' in an assignment: " . ($result3 ? 'true' : 'false') . "&lt;br&gt;";
// This evaluates as: ($var = false) or true, so $result3 is false!

// CORRECT: Use parentheses for clarity
$result4 = false || true; // or: $result4 = (false or true);
echo "Using 'false || true' correctly: " . ($result4 ? 'true' : 'false') . "&lt;br&gt;";
?&gt;</code></pre>
                
                <p><strong>Prevention:</strong> Always use parentheses to explicitly define the intended order of operations in complex logical expressions. Prefer using the symbolic operators (&&, ||) instead of the word forms (and, or).</p>
            </div>
            
            <div class="subsection">
                <h3>3. Ternary Operator Gotchas</h3>
                <p>The ternary operator can be tricky, especially when nested:</p>
                
                <pre><code>&lt;?php
// Ternary operator pitfalls
$a = 5;
$b = 10;
$c = 15;

// Simple usage is straightforward
$result1 = ($a < $b) ? "a is less than b" : "a is not less than b";
echo "Simple ternary: $result1&lt;br&gt;";

// WRONG: Nesting without parentheses can be confusing
$result2 = $a < $b ? $a : $b < $c ? $b : $c;
echo "Nested ternary without parentheses: $result2&lt;br&gt;";
// This might not work as expected due to left associativity

// CORRECT: Use parentheses for nested ternary operators
$result3 = $a < $b ? $a : ($b < $c ? $b : $c);
echo "Nested ternary with parentheses: $result3&lt;br&gt;";

// PHP 7.4+ warning: Unparenthesized ternary operations are deprecated

// Commonly seen abbreviated version
$name = null;
$display_name = $name ?: "Guest"; // Shorthand for $name ? $name : "Guest"
echo "Display name: $display_name&lt;br&gt;";

// PHP 7+ null coalescing operator (different precedence!)
$username = $_GET['username'] ?? "Guest";
echo "Username: $username&lt;br&gt;";
?&gt;</code></pre>
                
                <p><strong>Prevention:</strong> Always use parentheses with nested ternary operations to clarify the intended behavior. Consider using if-else statements instead for complex conditions, as they're often more readable.</p>
            </div>
            
            <div class="subsection">
                <h3>4. Concatenation and Addition Confusion</h3>
                <p>Mixing string concatenation with arithmetic operations can lead to unexpected results:</p>
                
                <pre><code>&lt;?php
// Concatenation vs. addition pitfall
$a = 5;
$b = 10;

// WRONG: Concatenation operator has same precedence as addition
$result1 = "Sum: " . $a + $b; // Parsed as: ("Sum: " . $a) + $b
// This gives a warning or error because "Sum: 5" is not a valid number

// CORRECT: Use parentheses to specify operation order
$result2 = "Sum: " . ($a + $b);
echo "Correctly formatted: $result2&lt;br&gt;"; // Sum: 15

// WRONG: String with a number
$str = "42";
$result3 = $str + 10; // PHP converts "42" to int 42, resulting in 52
echo "String '42' + 10 = $result3&lt;br&gt;"; // 52 (numeric addition)

// CORRECT: For string concatenation
$result4 = $str . 10;
echo "String '42' . 10 = $result4&lt;br&gt;"; // "4210" (string concatenation)
?&gt;</code></pre>
                
                <p><strong>Prevention:</strong> Always use parentheses around arithmetic operations that are part of string concatenation. Be explicit about your intentions when working with strings that might be interpreted as numbers.</p>
            </div>
        </section>

        <section class="best-practices">
            <h2>Best Practices</h2>
            <p>Follow these guidelines to write code that is both correct and clear regarding operator precedence:</p>
            
            <div class="best-practices_list">
                <ul>
                    <li><strong>Use parentheses liberally:</strong> Even when not strictly necessary, parentheses make your code more readable and clarify your intentions.</li>
                    <li><strong>Break complex expressions into simpler ones:</strong> Instead of writing one complex expression, break it down into multiple steps with intermediate variables.</li>
                    <li><strong>Comment complicated expressions:</strong> Add comments to explain the logic behind complex expressions, especially when they involve multiple operator types.</li>
                    <li><strong>Be consistent:</strong> Use a consistent style for operator spacing and parentheses throughout your codebase.</li>
                    <li><strong>Use symbolic logical operators:</strong> Prefer &amp;&amp; and || over and and or to avoid precedence confusion.</li>
                    <li><strong>Be explicit about type conversions:</strong> Use explicit type casting ((int), (string), etc.) rather than relying on implicit conversion.</li>
                    <li><strong>Use comparison operators correctly:</strong> Double-check that you're using == for comparison and = for assignment.</li>
                    <li><strong>Consider using named constants:</strong> For complex expressions that appear multiple times, define a named constant to improve readability.</li>
                </ul>
            </div>
            
            <div class="code-example">
                <h3>Best Practices Example</h3>
                <pre><code>&lt;?php
// A real-world function that applies best practices

/**
 * Calculate the total price for an order
 *
 * @param array $items Array of items with 'price' and 'quantity' keys
 * @param float $tax_rate Tax rate (e.g., 0.07 for 7%)
 * @param bool $apply_discount Whether to apply a discount
 * @param float $discount_rate Discount rate (default 0.10 for 10%)
 * @return array Order details including subtotal, tax, discount, and total
 */
function calculateOrderTotal(array $items, float $tax_rate, bool $apply_discount = false, float $discount_rate = 0.10): array {
    // Initialize totals
    $subtotal = 0.0;
    
    // Calculate subtotal from items
    foreach ($items as $item) {
        // Use parentheses for clarity, even when not strictly necessary
        $item_total = (float)$item['price'] * (int)$item['quantity'];
        $subtotal += $item_total;
    }
    
    // Calculate discount (if applicable)
    $discount = 0.0;
    if ($apply_discount && $subtotal > 0) {
        // Calculate discount amount
        $discount = $subtotal * $discount_rate;
    }
    
    // Apply discount
    $discounted_subtotal = $subtotal - $discount;
    
    // Calculate tax
    $tax = $discounted_subtotal * $tax_rate;
    
    // Calculate final total
    $total = $discounted_subtotal + $tax;
    
    // Return order details
    return [
        'subtotal' => $subtotal,
        'discount' => $discount,
        'tax' => $tax,
        'total' => $total
    ];
}

// Usage example
$order_items = [
    ['name' => 'Widget', 'price' => 19.99, 'quantity' => 2],
    ['name' => 'Gadget', 'price' => 29.99, 'quantity' => 1],
    ['name' => 'Doohickey', 'price' => 9.99, 'quantity' => 3]
];

$tax_rate = 0.07; // 7% tax
$apply_discount = true;

// Calculate order total
$order_summary = calculateOrderTotal($order_items, $tax_rate, $apply_discount);

// Display order summary
echo "&lt;h3&gt;Order Summary&lt;/h3&gt;";
echo "Subtotal: $" . number_format($order_summary['subtotal'], 2) . "&lt;br&gt;";
echo "Discount: $" . number_format($order_summary['discount'], 2) . "&lt;br&gt;";
echo "Tax: $" . number_format($order_summary['tax'], 2) . "&lt;br&gt;";
echo "Total: $" . number_format($order_summary['total'], 2) . "&lt;br&gt;";

// Alternative approach for a complicated expression
// INSTEAD OF:
// $complex_value = $a * $b + $c / ($d - $e) * ($f + $g);

// Break it down:
function calculateComplexValue($a, $b, $c, $d, $e, $f, $g) {
    // Calculate each part separately
    $part1 = $a * $b;
    
    // Use clear parentheses for division
    $denominator = ($d - $e);
    
    // Check for division by zero
    if ($denominator !== 0) {
        $part2 = $c / $denominator;
    } else {
        // Handle division by zero
        $part2 = 0; // Or throw an exception
    }
    
    $part3 = ($f + $g);
    
    // Combine the parts
    $result = $part1 + ($part2 * $part3);
    
    return $result;
}
?&gt;</code></pre>
            </div>
        </section>

        <section class="real-world">
            <h2>Real-World Examples</h2>
            <p>Let's look at some real-world scenarios where understanding operator precedence is crucial:</p>
            
            <div class="subsection">
                <h3>1. Conditional Logic in User Authentication</h3>
                
                <pre><code>&lt;?php
// User authentication example
function authenticateUser($username, $password, $remember_me = false) {
    // Simulate database lookup
    $user = findUserByUsername($username);
    
    // WRONG approach - precedence issues
    if (!$user || !verifyPassword($user, $password) && !isSocialLoginValid($user))
        return false;
    
    // CORRECT approach with explicit parentheses
    if ((!$user) || ((!verifyPassword($user, $password)) && (!isSocialLoginValid($user))))
        return false;
    
    // Even better: break it down for readability
    if (!$user) {
        // User not found
        return false;
    }
    
    // Check credentials
    $password_valid = verifyPassword($user, $password);
    $social_login_valid = isSocialLoginValid($user);
    
    // User must have either valid password or valid social login
    if (!$password_valid && !$social_login_valid) {
        return false;
    }
    
    // Authentication successful
    if ($remember_me) {
        setRememberMeCookie($user);
    }
    
    return true;
}

// Simulation functions for the example
function findUserByUsername($username) {
    // Simulate user lookup
    if ($username === 'admin') {
        return ['id' => 1, 'username' => 'admin', 'password_hash' => 'hash_here'];
    }
    return null;
}

function verifyPassword($user, $password) {
    // Simulate password verification
    return $password === 'password';
}

function isSocialLoginValid($user) {
    // Simulate social login check
    return false;
}

function setRememberMeCookie($user) {
    // Simulate setting a cookie
    echo "Remember-me cookie set for user {$user['username']}&lt;br&gt;";
}

// Test the authentication
$auth_result = authenticateUser('admin', 'password', true);
echo "Authentication result: " . ($auth_result ? 'Success' : 'Failure') . "&lt;br&gt;";
?&gt;</code></pre>
            </div>
            
            <div class="subsection">
                <h3>2. Data Filtering and Validation</h3>
                
                <pre><code>&lt;?php
// Data filtering example
function filterProducts($products, $category = null, $min_price = null, $max_price = null, $in_stock_only = false) {
    $filtered = [];
    
    foreach ($products as $product) {
        // WRONG: Precedence confusion
        if ($category !== null && $product['category'] !== $category || 
            $min_price !== null && $product['price'] < $min_price || 
            $max_price !== null && $product['price'] > $max_price || 
            $in_stock_only && $product['stock'] <= 0)
            continue;
        
        // CORRECT: Proper use of parentheses
        if (($category !== null && $product['category'] !== $category) || 
            ($min_price !== null && $product['price'] < $min_price) || 
            ($max_price !== null && $product['price'] > $max_price) || 
            ($in_stock_only && $product['stock'] <= 0))
            continue;
        
        // Even better: break it down for readability
        // Skip if category doesn't match
        if ($category !== null && $product['category'] !== $category) {
            continue;
        }
        
        // Skip if price is too low
        if ($min_price !== null && $product['price'] < $min_price) {
            continue;
        }
        
        // Skip if price is too high
        if ($max_price !== null && $product['price'] > $max_price) {
            continue;
        }
        
        // Skip if out of stock (when in_stock_only is true)
        if ($in_stock_only && $product['stock'] <= 0) {
            continue;
        }
        
        // Product passed all filters
        $filtered[] = $product;
    }
    
    return $filtered;
}

// Sample product data
$products = [
    ['id' => 1, 'name' => 'Laptop', 'category' => 'electronics', 'price' => 899.99, 'stock' => 5],
    ['id' => 2, 'name' => 'Smartphone', 'category' => 'electronics', 'price' => 499.99, 'stock' => 0],
    ['id' => 3, 'name' => 'Headphones', 'category' => 'accessories', 'price' => 99.99, 'stock' => 10],
    ['id' => 4, 'name' => 'Tablet', 'category' => 'electronics', 'price' => 299.99, 'stock' => 3],
    ['id' => 5, 'name' => 'Mouse', 'category' => 'accessories', 'price' => 29.99, 'stock' => 20],
];

// Filter electronics between $200 and $700 that are in stock
$filtered = filterProducts($products, 'electronics', 200, 700, true);

// Display results
echo "&lt;h3&gt;Filtered Products&lt;/h3&gt;";
echo "&lt;ul&gt;";
foreach ($filtered as $product) {
    echo "&lt;li&gt;{$product['name']} - ${$product['price']} ({$product['stock']} in stock)&lt;/li&gt;";
}
echo "&lt;/ul&gt;";
?&gt;</code></pre>
            </div>
            
            <div class="subsection">
                <h3>3. Dynamic SQL Query Building</h3>
                
                <pre><code>&lt;?php
// Dynamic SQL query building
function buildSearchQuery($search_terms, $filters = []) {
    $base_query = "SELECT * FROM products WHERE 1=1";
    $params = [];
    
    // Add search terms
    if (!empty($search_terms)) {
        // WRONG: Operator precedence confusion
        $base_query .= " AND (name LIKE ? OR description LIKE ?" . 
                       !empty($filters['search_sku']) ? " OR sku LIKE ?" : "" . ")";
        
        // CORRECT: Use parentheses for string concatenation
        $base_query .= " AND (name LIKE ? OR description LIKE ?" . 
                      ((!empty($filters['search_sku'])) ? " OR sku LIKE ?" : "") . ")";
        
        $search_pattern = "%" . $search_terms . "%";
        $params[] = $search_pattern;
        $params[] = $search_pattern;
        
        if (!empty($filters['search_sku'])) {
            $params[] = $search_pattern;
        }
    }
    
    // Apply category filter
    if (!empty($filters['category'])) {
        $base_query .= " AND category = ?";
        $params[] = $filters['category'];
    }
    
    // Apply price range filter
    if (!empty($filters['min_price']) || !empty($filters['max_price'])) {
        if (!empty($filters['min_price'])) {
            $base_query .= " AND price >= ?";
            $params[] = (float) $filters['min_price'];
        }
        
        if (!empty($filters['max_price'])) {
            $base_query .= " AND price <= ?";
            $params[] = (float) $filters['max_price'];
        }
    }
    
    // Apply in-stock filter
    if (!empty($filters['in_stock']) && $filters['in_stock']) {
        $base_query .= " AND stock > 0";
    }
    
    // Apply sorting
    $base_query .= " ORDER BY " . (!empty($filters['sort_by']) ? $filters['sort_by'] : "name") . 
                   " " . (!empty($filters['sort_dir']) && strtoupper($filters['sort_dir']) === "DESC" ? "DESC" : "ASC");
    
    // Add pagination
    if (!empty($filters['page']) && !empty($filters['limit'])) {
        $page = max(1, (int) $filters['page']);
        $limit = max(1, (int) $filters['limit']);
        $offset = ($page - 1) * $limit;
        
        $base_query .= " LIMIT ?, ?";
        $params[] = $offset;
        $params[] = $limit;
    }
    
    return [
        'query' => $base_query,
        'params' => $params
    ];
}

// Example filters
$filters = [
    'category' => 'electronics',
    'min_price' => 100,
    'max_price' => 500,
    'in_stock' => true,
    'sort_by' => 'price',
    'sort_dir' => 'asc',
    'page' => 1,
    'limit' => 10,
    'search_sku' => true
];

// Build a search query
$search_result = buildSearchQuery("phone", $filters);

// Display the query
echo "&lt;h3&gt;Generated SQL Query&lt;/h3&gt;";
echo "&lt;p&gt;" . htmlspecialchars($search_result['query']) . "&lt;/p&gt;";

echo "&lt;h4&gt;Parameters:&lt;/h4&gt;";
echo "&lt;pre&gt;";
print_r($search_result['params']);
echo "&lt;/pre&gt;";
?&gt;</code></pre>
            </div>
        </section>

        <section class="practice-exercises">
            <h2>Practice Exercises</h2>
            <p>Test your understanding of PHP operator precedence with these exercises:</p>
            
            <div class="exercise">
                <h3>Exercise 1: Predict the Output</h3>
                <p>Without running the code, predict the output of the following PHP snippets:</p>
                <pre><code>&lt;?php
// Expression 1
$result1 = 5 + 3 * 2 - 4 / 2;

// Expression 2
$a = true;
$b = false;
$c = true;
$result2 = $a && $b || $c;

// Expression 3
$x = 10;
$y = 5;
$z = 2;
$result3 = $x / $y * $z;

// Expression 4
$str = "10";
$num = 5;
$result4 = $str + $num . " items";

// Expression 5
$val = null;
$default = "Default";
$result5 = $val ?? $default . " Value";
?&gt;</code></pre>
                <p>After predicting, write a PHP script to verify your answers and explain why each expression produces its result.</p>
            </div>
            
            <div class="exercise">
                <h3>Exercise 2: Fix the Bugs</h3>
                <p>The following code contains bugs related to operator precedence. Identify and fix each issue:</p>
                <pre><code>&lt;?php
// Bug 1: Logical operator confusion
function isValidInput($value, $min, $max) {
    return $value >= $min && $value <= $max || $value == 0;
}

// Bug 2: Assignment in condition
function processUser($user) {
    if ($status = getUserStatus($user)) {
        echo "User is active";
    }
    return $status;
}

// Bug 3: String concatenation issue
function formatPrice($price, $currency) {
    return "Price: " . $currency . $price * 1.1; // Add 10% tax
}

// Bug 4: Ternary operator nesting
function getDisplayName($user) {
    return $user->first_name ? $user->first_name : $user->username ? $user->username : "Guest";
}

// Bug 5: Bitwise vs. logical operators
function hasPermission($user, $permission) {
    $admin_role = 1;
    $editor_role = 2;
    
    return $user->role & $admin_role || $user->role & $editor_role && $permission != "delete";
}

// Implement your fixed versions of each function
?&gt;</code></pre>
            </div>
            
            <div class="exercise">
                <h3>Exercise 3: Create a Complex Expression</h3>
                <p>Write a PHP function that calculates the total cost of an order based on the following rules:</p>
                <ul>
                    <li>Base price is the sum of all items (price * quantity)</li>
                    <li>Apply a 10% discount if the total is over $100</li>
                    <li>Apply an additional 5% discount if the customer is a member</li>
                    <li>Add 8% tax after discounts</li>
                    <li>Add $5 shipping fee for orders under $50 (after discount, before tax)</li>
                </ul>
                <p>Write this function in two ways:</p>
                <ol>
                    <li>As a single complex expression with careful use of parentheses</li>
                    <li>Using a step-by-step approach with intermediate variables</li>
                </ol>
                <p>Compare the readability and maintainability of both approaches.</p>
            </div>
        </section>

        <section class="summary">
            <h2>Summary</h2>
            <p>In this session, we've explored PHP's operator precedence and associativity, which determine the order in which operators are evaluated in expressions:</p>
            
            <ul>
                <li><strong>Operator Precedence:</strong> Defines which operators have higher priority and are evaluated first in expressions with multiple operators.</li>
                <li><strong>Operator Associativity:</strong> Determines the order of evaluation for operators with the same precedence level (left-to-right or right-to-left).</li>
                <li><strong>Key Precedence Groups:</strong> Parentheses have highest precedence, followed by arithmetic operators, string concatenation, comparisons, logical operators, and finally assignments.</li>
                <li><strong>Common Pitfalls:</strong> We've identified frequent mistakes related to precedence, such as confusing assignment with comparison, misunderstanding logical operator precedence, and mixing operators without proper parentheses.</li>
                <li><strong>Best Practices:</strong> Use parentheses liberally, break complex expressions into simpler ones, and be explicit about your intentions to write code that is both correct and clear.</li>
            </ul>
            
            <p>Understanding operator precedence is fundamental to writing reliable PHP code. By mastering these concepts, you can avoid subtle bugs and create expressions that accurately reflect your intentions. Remember, even when the default precedence would give the expected result, using parentheses improves code readability and makes your code more maintainable.</p>
        </section>

        <section class="next-session">
            <h2>Next Session Preview</h2>
            <p>In our next session, we'll explore PHP Control Structures, which allow you to control the flow of your programs. We'll build on our understanding of operators and expressions to create conditional statements (if/else, switch) and loops (for, while, foreach) that make decisions and repeat actions based on the expressions we've learned to write correctly.</p>
        </section>

        <section class="additional-resources">
            <h2>Additional Resources</h2>
            <ul>
                <li><a href="https://www.php.net/manual/en/language.operators.precedence.php" target="_blank">PHP Manual: Operator Precedence</a></li>
                <li><a href="https://www.php.net/manual/en/language.operators.php" target="_blank">PHP Manual: Operators</a></li>
                <li><a href="https://www.php.net/manual/en/language.expressions.php" target="_blank">PHP Manual: Expressions</a></li>
                <li><a href="https://www.php.net/manual/en/types.comparisons.php" target="_blank">PHP Manual: Type Comparisons</a></li>
                <li><a href="https://www.php.net/manual/en/language.types.type-juggling.php" target="_blank">PHP Manual: Type Juggling</a></li>
            </ul>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 2 24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>Module 2: PHP Assignment Operators - PHP WordPress Course</title>
<meta content="Learn assignment operators including compound assignments." name="description"/>
<meta content="PHP, WordPress, web development, php, assignment, operators" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Assignment Operators</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 2</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_arithmetic_operators.html">Arithmetic Operators</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/php_assignment_operators.html">Assignment Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_comparison_operators.html">Comparison Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_logical_operators.html">Logical Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_string_operators.html">String Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_array_operators.html">Array Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_type_operators.html">Type Operators</a></li>
<li><a class="sidebar-link" href="/02module/php_operator_precedence.html">Operator Precedence</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_calculator.html">Homework: Calculator</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/review_php_setup.html">← Prev: Session 1: PHP Setup</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_if.html">Next: Session 3: Conditionals →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>Module 2: PHP Assignment Operators</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 30 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: PHP Operators</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP operators</li>
<li>Understand operator precedence</li>
<li>Apply operators in practical scenarios</li>
<li>Write efficient expressions</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="intro">
            <h2>Introduction to PHP Assignment Operators</h2>
            <p>Welcome to our session on PHP Assignment Operators! These operators are fundamental tools in PHP programming that allow us to assign values to variables and perform operations simultaneously. Assignment operators not only make your code more concise but also more readable and efficient.</p>
            
            <p>Think of assignment operators as efficient workers in a warehouse. Regular assignment is like a worker placing an item on a shelf. Combined assignment operators (like +=) are like workers who retrieve an item, modify it, and put it back in one smooth motion, saving time and effort. Today, we'll explore these operators, understand their behavior, and see how they can make your code more efficient through practical examples.</p>
        </section>

        <section class="operators-overview">
            <h2>Basic Assignment Operator</h2>
            <p>The most fundamental assignment operator in PHP is the equals sign (=). It assigns the value on its right to the variable on its left.</p>
            
            <div class="code-example">
                <h3>Basic Assignment Example</h3>
                <pre><code>&lt;?php
// Simple variable assignment
$username = "johndoe";
$age = 25;
$price = 19.99;
$is_active = true;

echo "Username: " . $username . "&lt;br&gt;";
echo "Age: " . $age . "&lt;br&gt;";
echo "Price: $" . $price . "&lt;br&gt;";
echo "Active user: " . ($is_active ? "Yes" : "No") . "&lt;br&gt;";
?&gt;</code></pre>
            </div>
            
            <p><strong>Important Note:</strong> The assignment operator (=) is different from the equality comparison operator (==). The former assigns a value, while the latter checks if two values are equal.</p>
            
            <div class="example-comparison">
                <pre><code>&lt;?php
$a = 5;        // Assignment: $a gets the value 5
$result = ($a == 5); // Comparison: checks if $a equals 5, returns true
echo $result ? "Equal" : "Not equal"; // Outputs: Equal
?&gt;</code></pre>
            </div>
        </section>

        <section class="combined-operators">
            <h2>Combined Assignment Operators</h2>
            <p>PHP provides combined operators that merge an arithmetic (or other) operation with assignment. These operators first perform a calculation and then assign the result back to the variable.</p>
            
            <div class="svg-container">
                <svg viewBox="0 0 800 350" xmlns="http://www.w3.org/2000/svg">
                    <!-- Addition Assignment -->
                    <rect x="50" y="50" width="160" height="100" rx="10" fill="#4CAF50" />
                    <text x="130" y="100" text-anchor="middle" font-size="24" fill="white">+=</text>
                    <text x="130" y="130" text-anchor="middle" font-size="16" fill="white">Addition Assignment</text>
                    
                    <!-- Subtraction Assignment -->
                    <rect x="230" y="50" width="160" height="100" rx="10" fill="#2196F3" />
                    <text x="310" y="100" text-anchor="middle" font-size="24" fill="white">-=</text>
                    <text x="310" y="130" text-anchor="middle" font-size="16" fill="white">Subtraction Assignment</text>
                    
                    <!-- Multiplication Assignment -->
                    <rect x="410" y="50" width="160" height="100" rx="10" fill="#9C27B0" />
                    <text x="490" y="100" text-anchor="middle" font-size="24" fill="white">*=</text>
                    <text x="490" y="130" text-anchor="middle" font-size="16" fill="white">Multiplication Assignment</text>
                    
                    <!-- Division Assignment -->
                    <rect x="590" y="50" width="160" height="100" rx="10" fill="#FF5722" />
                    <text x="670" y="100" text-anchor="middle" font-size="24" fill="white">/=</text>
                    <text x="670" y="130" text-anchor="middle" font-size="16" fill="white">Division Assignment</text>
                    
                    <!-- Modulus Assignment -->
                    <rect x="50" y="170" width="160" height="100" rx="10" fill="#795548" />
                    <text x="130" y="220" text-anchor="middle" font-size="24" fill="white">%=</text>
                    <text x="130" y="250" text-anchor="middle" font-size="16" fill="white">Modulus Assignment</text>
                    
                    <!-- Exponentiation Assignment -->
                    <rect x="230" y="170" width="160" height="100" rx="10" fill="#009688" />
                    <text x="310" y="220" text-anchor="middle" font-size="24" fill="white">**=</text>
                    <text x="310" y="250" text-anchor="middle" font-size="16" fill="white">Exponentiation Assignment</text>
                    
                    <!-- Concatenation Assignment -->
                    <rect x="410" y="170" width="160" height="100" rx="10" fill="#673AB7" />
                    <text x="490" y="220" text-anchor="middle" font-size="24" fill="white">.=</text>
                    <text x="490" y="250" text-anchor="middle" font-size="16" fill="white">Concatenation Assignment</text>
                    
                    <!-- NULL Coalescing Assignment -->
                    <rect x="590" y="170" width="160" height="100" rx="10" fill="#3F51B5" />
                    <text x="670" y="220" text-anchor="middle" font-size="24" fill="white">??=</text>
                    <text x="670" y="250" text-anchor="middle" font-size="16" fill="white">NULL Coalescing</text>
                </svg>
            </div>
            
            <div class="operators-table">
                <table>
                    <thead>
                        <tr>
                            <th>Operator</th>
                            <th>Name</th>
                            <th>Equivalent To</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>+=</td>
                            <td>Addition assignment</td>
                            <td>$x = $x + $y</td>
                            <td>Adds $y to $x, then assigns the result to $x</td>
                        </tr>
                        <tr>
                            <td>-=</td>
                            <td>Subtraction assignment</td>
                            <td>$x = $x - $y</td>
                            <td>Subtracts $y from $x, then assigns the result to $x</td>
                        </tr>
                        <tr>
                            <td>*=</td>
                            <td>Multiplication assignment</td>
                            <td>$x = $x * $y</td>
                            <td>Multiplies $x by $y, then assigns the result to $x</td>
                        </tr>
                        <tr>
                            <td>/=</td>
                            <td>Division assignment</td>
                            <td>$x = $x / $y</td>
                            <td>Divides $x by $y, then assigns the result to $x</td>
                        </tr>
                        <tr>
                            <td>%=</td>
                            <td>Modulus assignment</td>
                            <td>$x = $x % $y</td>
                            <td>Gets the remainder of $x divided by $y, then assigns it to $x</td>
                        </tr>
                        <tr>
                            <td>**=</td>
                            <td>Exponentiation assignment</td>
                            <td>$x = $x ** $y</td>
                            <td>Raises $x to the power of $y, then assigns the result to $x</td>
                        </tr>
                        <tr>
                            <td>.=</td>
                            <td>Concatenation assignment</td>
                            <td>$x = $x . $y</td>
                            <td>Appends $y to $x, then assigns the result to $x</td>
                        </tr>
                        <tr>
                            <td>??=</td>
                            <td>Null coalescing assignment</td>
                            <td>$x = $x ?? $y</td>
                            <td>Assigns $y to $x if $x is null</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <p>Let's examine each of these operators in detail with practical examples.</p>
        </section>

        <section class="addition-assignment">
            <h2>Addition Assignment (+=)</h2>
            <p>The addition assignment operator (+=) adds the value on the right to the variable on the left and assigns the result back to the variable on the left.</p>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 500" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="500" fill="#fafafa" rx="8"/>
    
    <line x1="516.6666666666667" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[&quot;Get current value: 5&quot;] C </text>
    <rect x="223.33333333333337" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">$x = 5</text>
    <rect x="456.66666666666674" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">$x += 3</text>
    <rect x="193.33333333333337" y="175" width="180" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Get current value: 5</text>
    <rect x="442.66666666666674" y="175" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Add 3: 5 + 3 = 8</text>
    <rect x="306.0" y="295" width="188" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Store result in $x: 8</text>
</svg>
</div>
            
            <div class="code-example">
                <h3>Basic Addition Assignment Example</h3>
                <pre><code>&lt;?php
// Initialize counter
$counter = 0;
echo "Initial counter: " . $counter . "&lt;br&gt;";

// Increment using addition assignment
$counter += 1;
echo "After adding 1: " . $counter . "&lt;br&gt;";

// Add multiple values
$counter += 5;
echo "After adding 5: " . $counter . "&lt;br&gt;";

// Add a variable amount
$increment = 10;
$counter += $increment;
echo "After adding $increment: " . $counter . "&lt;br&gt;";
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Score Tracking</h3>
                <p>The addition assignment operator is perfect for tracking scores in a game:</p>
                
                <pre><code>&lt;?php
// Initialize player scores
$player1_score = 0;
$player2_score = 0;

// Simulate a game with multiple rounds
$rounds = [
    ['player1' => 15, 'player2' => 12],
    ['player1' => 8, 'player2' => 10],
    ['player1' => 20, 'player2' => 15],
    ['player1' => 5, 'player2' => 18]
];

// Track scores using addition assignment
echo "&lt;h3&gt;Game Score Tracker&lt;/h3&gt;";

foreach ($rounds as $round => $scores) {
    $round_number = $round + 1;
    
    // Update scores using addition assignment
    $player1_score += $scores['player1'];
    $player2_score += $scores['player2'];
    
    echo "Round $round_number: Player 1 scored {$scores['player1']} points, Player 2 scored {$scores['player2']} points&lt;br&gt;";
    echo "Current total - Player 1: $player1_score, Player 2: $player2_score&lt;br&gt;&lt;br&gt;";
}

// Determine winner
if ($player1_score > $player2_score) {
    echo "Final result: Player 1 wins with $player1_score points!";
} elseif ($player2_score > $player1_score) {
    echo "Final result: Player 2 wins with $player2_score points!";
} else {
    echo "Final result: It's a tie with $player1_score points each!";
}
?&gt;</code></pre>
            </div>
            
            <p><strong>Analogy:</strong> The addition assignment operator is like a savings account where you're constantly depositing money (adding values) to your existing balance, and the account is automatically updated after each deposit.</p>
        </section>

        <section class="subtraction-assignment">
            <h2>Subtraction Assignment (-=)</h2>
            <p>The subtraction assignment operator (-=) subtracts the value on the right from the variable on the left and assigns the result back to the variable on the left.</p>
            
            <div class="code-example">
                <h3>Basic Subtraction Assignment Example</h3>
                <pre><code>&lt;?php
// Initialize value
$balance = 100;
echo "Initial balance: $" . $balance . "&lt;br&gt;";

// Deduct using subtraction assignment
$balance -= 25;
echo "After deducting $25: $" . $balance . "&lt;br&gt;";

// Deduct another amount
$balance -= 10;
echo "After deducting $10: $" . $balance . "&lt;br&gt;";

// Deduct a variable amount
$withdrawal = 15;
$balance -= $withdrawal;
echo "After withdrawing $$withdrawal: $" . $balance . "&lt;br&gt;";
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Inventory Management</h3>
                <p>The subtraction assignment operator is useful for managing inventory levels:</p>
                
                <pre><code>&lt;?php
// Initial inventory
$product_inventory = [
    'laptop' => 25,
    'smartphone' => 40,
    'tablet' => 15,
    'headphones' => 50
];

// Process customer orders
$customer_orders = [
    ['product' => 'laptop', 'quantity' => 3],
    ['product' => 'smartphone', 'quantity' => 5],
    ['product' => 'headphones', 'quantity' => 10],
    ['product' => 'tablet', 'quantity' => 2]
];

echo "&lt;h3&gt;Inventory Management System&lt;/h3&gt;";
echo "Initial inventory levels:&lt;br&gt;";
foreach ($product_inventory as $product => $quantity) {
    echo ucfirst($product) . ": " . $quantity . "&lt;br&gt;";
}

echo "&lt;br&gt;Processing orders...&lt;br&gt;&lt;br&gt;";

// Process each order
foreach ($customer_orders as $order) {
    $product = $order['product'];
    $quantity = $order['quantity'];
    
    echo "Order: $quantity x " . ucfirst($product) . "&lt;br&gt;";
    
    // Check if enough inventory
    if ($product_inventory[$product] >= $quantity) {
        // Update inventory using subtraction assignment
        $product_inventory[$product] -= $quantity;
        echo "Order processed successfully. Remaining " . ucfirst($product) . " inventory: " . $product_inventory[$product] . "&lt;br&gt;&lt;br&gt;";
    } else {
        echo "Insufficient inventory for " . ucfirst($product) . ". Order cannot be processed.&lt;br&gt;&lt;br&gt;";
    }
}

echo "Final inventory levels:&lt;br&gt;";
foreach ($product_inventory as $product => $quantity) {
    echo ucfirst($product) . ": " . $quantity . "&lt;br&gt;";
    
    // Check for low inventory
    if ($quantity < 10) {
        echo "&lt;span style='color: red;'&gt;Low inventory warning for " . ucfirst($product) . "!&lt;/span&gt;&lt;br&gt;";
    }
}
?&gt;</code></pre>
            </div>
            
            <p><strong>Analogy:</strong> The subtraction assignment operator is like a water tank with a release valve. Every time you open the valve (subtract a value), the water level (variable value) decreases, and the new level is automatically recorded.</p>
        </section>

        <section class="multiplication-assignment">
            <h2>Multiplication Assignment (*=)</h2>
            <p>The multiplication assignment operator (*=) multiplies the variable on the left by the value on the right and assigns the result back to the variable on the left.</p>
            
            <div class="code-example">
                <h3>Basic Multiplication Assignment Example</h3>
                <pre><code>&lt;?php
// Initialize value
$value = 5;
echo "Initial value: " . $value . "&lt;br&gt;";

// Multiply using multiplication assignment
$value *= 2;
echo "After multiplying by 2: " . $value . "&lt;br&gt;";

// Multiply again
$value *= 3;
echo "After multiplying by 3: " . $value . "&lt;br&gt;";

// Multiply by a variable amount
$factor = 1.5;
$value *= $factor;
echo "After multiplying by $factor: " . $value . "&lt;br&gt;";
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Compound Interest Calculator</h3>
                <p>The multiplication assignment operator is perfect for calculating compound interest:</p>
                
                <pre><code>&lt;?php
// Initial investment
$principal = 1000;
$annual_rate = 0.05; // 5% annual interest rate
$years = 10;

echo "&lt;h3&gt;Compound Interest Calculator&lt;/h3&gt;";
echo "Initial investment: $" . number_format($principal, 2) . "&lt;br&gt;";
echo "Annual interest rate: " . ($annual_rate * 100) . "%&lt;br&gt;";
echo "Investment period: $years years&lt;br&gt;&lt;br&gt;";

echo "&lt;table border='1'&gt;";
echo "&lt;tr&gt;&lt;th&gt;Year&lt;/th&gt;&lt;th&gt;Balance at Start&lt;/th&gt;&lt;th&gt;Interest Earned&lt;/th&gt;&lt;th&gt;Balance at End&lt;/th&gt;&lt;/tr&gt;";

$current_balance = $principal;

for ($year = 1; $year <= $years; $year++) {
    $start_balance = $current_balance;
    
    // Calculate interest
    $interest = $current_balance * $annual_rate;
    
    // Update balance using multiplication assignment (alternative approach)
    // $current_balance *= (1 + $annual_rate);
    
    // Or the longer form
    $current_balance = $current_balance + $interest;
    
    echo "&lt;tr&gt;";
    echo "&lt;td&gt;$year&lt;/td&gt;";
    echo "&lt;td&gt;$" . number_format($start_balance, 2) . "&lt;/td&gt;";
    echo "&lt;td&gt;$" . number_format($interest, 2) . "&lt;/td&gt;";
    echo "&lt;td&gt;$" . number_format($current_balance, 2) . "&lt;/td&gt;";
    echo "&lt;/tr&gt;";
}

echo "&lt;/table&gt;&lt;br&gt;";

// Calculate growth using multiplication assignment
$total_growth = $current_balance / $principal;
echo "Total growth over $years years: " . number_format($total_growth, 2) . "x initial investment";
?&gt;</code></pre>
            </div>
            
            <p><strong>Analogy:</strong> The multiplication assignment operator is like repeatedly folding a piece of paper. Each fold (multiplication) doubles the thickness, and the new thickness becomes your starting point for the next fold.</p>
        </section>

        <section class="division-assignment">
            <h2>Division Assignment (/=)</h2>
            <p>The division assignment operator (/=) divides the variable on the left by the value on the right and assigns the result back to the variable on the left.</p>
            
            <div class="code-example">
                <h3>Basic Division Assignment Example</h3>
                <pre><code>&lt;?php
// Initialize value
$value = 100;
echo "Initial value: " . $value . "&lt;br&gt;";

// Divide using division assignment
$value /= 2;
echo "After dividing by 2: " . $value . "&lt;br&gt;";

// Divide again
$value /= 5;
echo "After dividing by 5: " . $value . "&lt;br&gt;";

// Divide by a variable amount
$divisor = 2.5;
$value /= $divisor;
echo "After dividing by $divisor: " . $value . "&lt;br&gt;";

// Warning for division by zero
$safe_divide = function($value, $divisor) {
    if ($divisor == 0) {
        return "Error: Cannot divide by zero";
    }
    $value /= $divisor;
    return $value;
};

echo "Attempting to divide by zero: " . $safe_divide($value, 0) . "&lt;br&gt;";
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Resource Allocation</h3>
                <p>The division assignment operator can be useful for distributing resources:</p>
                
                <pre><code>&lt;?php
// Initial resources
$total_budget = 10000;
$remaining_budget = $total_budget;
$departments = ['Marketing', 'Development', 'Operations', 'Support'];
$department_allocations = [];

echo "&lt;h3&gt;Budget Allocation System&lt;/h3&gt;";
echo "Total annual budget: $" . number_format($total_budget, 2) . "&lt;br&gt;&lt;br&gt;";

// First allocation: Marketing gets 30%
$department = 'Marketing';
$percentage = 0.3;
$department_allocations[$department] = $remaining_budget * $percentage;
$remaining_budget -= $department_allocations[$department];
echo "$department department receives " . ($percentage * 100) . "% of total: $" . number_format($department_allocations[$department], 2) . "&lt;br&gt;";
echo "Remaining budget: $" . number_format($remaining_budget, 2) . "&lt;br&gt;&lt;br&gt;";

// Second allocation: Development gets 40% of what's left
$department = 'Development';
$percentage = 0.4;
$department_allocations[$department] = $remaining_budget * $percentage;
$remaining_budget -= $department_allocations[$department];
echo "$department department receives " . ($percentage * 100) . "% of remaining: $" . number_format($department_allocations[$department], 2) . "&lt;br&gt;";
echo "Remaining budget: $" . number_format($remaining_budget, 2) . "&lt;br&gt;&lt;br&gt;";

// Third allocation: Operations gets 50% of what's left
$department = 'Operations';
$percentage = 0.5;
$department_allocations[$department] = $remaining_budget * $percentage;
$remaining_budget -= $department_allocations[$department];
echo "$department department receives " . ($percentage * 100) . "% of remaining: $" . number_format($department_allocations[$department], 2) . "&lt;br&gt;";
echo "Remaining budget: $" . number_format($remaining_budget, 2) . "&lt;br&gt;&lt;br&gt;";

// Final allocation: Support gets what's left
$department = 'Support';
$department_allocations[$department] = $remaining_budget;
$remaining_budget = 0;
echo "$department department receives remainder: $" . number_format($department_allocations[$department], 2) . "&lt;br&gt;";
echo "Remaining budget: $" . number_format($remaining_budget, 2) . "&lt;br&gt;&lt;br&gt;";

// Summary
echo "&lt;h4&gt;Budget Allocation Summary&lt;/h4&gt;";
echo "&lt;table border='1'&gt;";
echo "&lt;tr&gt;&lt;th&gt;Department&lt;/th&gt;&lt;th&gt;Allocation&lt;/th&gt;&lt;th&gt;Percentage of Total&lt;/th&gt;&lt;/tr&gt;";

foreach ($department_allocations as $dept => $amount) {
    $percentage = ($amount / $total_budget) * 100;
    echo "&lt;tr&gt;";
    echo "&lt;td&gt;$dept&lt;/td&gt;";
    echo "&lt;td&gt;$" . number_format($amount, 2) . "&lt;/td&gt;";
    echo "&lt;td&gt;" . number_format($percentage, 1) . "%&lt;/td&gt;";
    echo "&lt;/tr&gt;";
}

echo "&lt;/table&gt;";
?&gt;</code></pre>
            </div>
            
            <p><strong>Analogy:</strong> The division assignment operator is like repeatedly sharing a cake. If you start with a whole cake and share it with one person (divide by 2), you now have half a cake. If you share that half with another person (divide by 2 again), you now have a quarter of the original cake.</p>
        </section>

        <section class="modulus-assignment">
            <h2>Modulus Assignment (%=)</h2>
            <p>The modulus assignment operator (%=) divides the variable on the left by the value on the right, then assigns the remainder back to the variable on the left.</p>
            
            <div class="code-example">
                <h3>Basic Modulus Assignment Example</h3>
                <pre><code>&lt;?php
// Initialize value
$value = 17;
echo "Initial value: " . $value . "&lt;br&gt;";

// Apply modulus assignment
$value %= 5;
echo "After applying modulo 5: " . $value . "&lt;br&gt;";  // Output: 2 (remainder of 17 ÷ 5)

// Apply another modulus
$value %= 2;
echo "After applying modulo 2: " . $value . "&lt;br&gt;";  // Output: 0 (remainder of 2 ÷ 2)
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Circular Buffer</h3>
                <p>The modulus assignment operator is useful for implementing circular buffers or wrap-around indexes:</p>
                
                <pre><code>&lt;?php
// Circular buffer implementation
$buffer_size = 5;
$buffer = array_fill(0, $buffer_size, null);
$position = 0;

echo "&lt;h3&gt;Circular Buffer Demo&lt;/h3&gt;";
echo "Buffer size: $buffer_size&lt;br&gt;&lt;br&gt;";

// Function to add item to buffer
function add_to_buffer(&$buffer, &$position, $buffer_size, $item) {
    $buffer[$position] = $item;
    $position++;
    
    // Wrap around using modulus assignment
    $position %= $buffer_size;
    
    // Alternative without modulus assignment:
    // if ($position >= $buffer_size) {
    //     $position = 0;
    // }
}

// Add items to buffer
$items = ["Apple", "Banana", "Cherry", "Date", "Elderberry", "Fig", "Grape", "Honeydew"];

echo "Adding items to buffer:&lt;br&gt;";
foreach ($items as $index => $item) {
    echo "Adding '$item' at position $position&lt;br&gt;";
    add_to_buffer($buffer, $position, $buffer_size, $item);
    
    echo "Current buffer state: [" . implode(", ", array_map(function($item) {
        return $item === null ? "empty" : $item;
    }, $buffer)) . "]&lt;br&gt;&lt;br&gt;";
}

echo "Final buffer contains only the last $buffer_size items, as older items were overwritten.";
?&gt;</code></pre>
            </div>
            
            <div class="code-example">
                <h3>Clock Example using Modulus Assignment</h3>
                <pre><code>&lt;?php
// Simulate a 12-hour clock
$hour = 10;
echo "Starting hour: " . $hour . "&lt;br&gt;";

// Add hours using modulus assignment
$hour += 3;
$hour %= 12;  // Keep hour in 0-11 range
if ($hour == 0) $hour = 12;  // Convert 0 to 12
echo "After adding 3 hours: " . $hour . "&lt;br&gt;";  // Output: 1

// Add more hours
$hour += 14;
$hour %= 12;  // Keep hour in 0-11 range
if ($hour == 0) $hour = 12;  // Convert 0 to 12
echo "After adding 14 more hours: " . $hour . "&lt;br&gt;";  // Output: 3
?&gt;</code></pre>
            </div>
            
            <p><strong>Analogy:</strong> The modulus assignment operator is like a clock that always wraps around after reaching 12. No matter how many hours you add, the clock face only shows numbers 1 through 12, always "wrapping around" when needed.</p>
        </section>

        <section class="exponentiation-assignment">
            <h2>Exponentiation Assignment (**=)</h2>
            <p>The exponentiation assignment operator (**=) raises the variable on the left to the power of the value on the right and assigns the result back to the variable on the left. This operator was introduced in PHP 7.0.</p>
            
            <div class="code-example">
                <h3>Basic Exponentiation Assignment Example</h3>
                <pre><code>&lt;?php
// Initialize value
$value = 2;
echo "Initial value: " . $value . "&lt;br&gt;";

// Apply exponentiation assignment (squares the value)
$value **= 2;
echo "After raising to power 2: " . $value . "&lt;br&gt;";  // Output: 4

// Apply another exponentiation (cubes the current value)
$value **= 3;
echo "After raising to power 3: " . $value . "&lt;br&gt;";  // Output: 64 (4^3)

// Apply fractional exponent
$value **= 0.5;
echo "After raising to power 0.5 (square root): " . $value . "&lt;br&gt;";  // Output: 8 (square root of 64)
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Population Growth Model</h3>
                <p>The exponentiation assignment operator can model exponential growth or decay:</p>
                
                <pre><code>&lt;?php
// Population growth model
$initial_population = 10000;
$growth_rate = 0.03;  // 3% annual growth
$years = 25;

echo "&lt;h3&gt;Population Growth Model&lt;/h3&gt;";
echo "Initial population: " . number_format($initial_population) . "&lt;br&gt;";
echo "Annual growth rate: " . ($growth_rate * 100) . "%&lt;br&gt;";
echo "Projection period: $years years&lt;br&gt;&lt;br&gt;";

echo "&lt;table border='1'&gt;";
echo "&lt;tr&gt;&lt;th&gt;Year&lt;/th&gt;&lt;th&gt;Population&lt;/th&gt;&lt;th&gt;Growth from Previous Year&lt;/th&gt;&lt;/tr&gt;";

$population = $initial_population;
$previous_population = $population;

// Using the formula: P(t) = P0 * (1 + r)^t
for ($year = 1; $year <= $years; $year++) {
    if ($year === 1) {
        // For the first year, use the full formula
        $population = $initial_population * ((1 + $growth_rate) ** $year);
    } else {
        // For subsequent years, just multiply by (1 + growth_rate)
        $population *= (1 + $growth_rate);
    }
    
    $growth = $population - $previous_population;
    
    echo "&lt;tr&gt;";
    echo "&lt;td&gt;$year&lt;/td&gt;";
    echo "&lt;td&gt;" . number_format(round($population)) . "&lt;/td&gt;";
    echo "&lt;td&gt;" . number_format(round($growth)) . "&lt;/td&gt;";
    echo "&lt;/tr&gt;";
    
    $previous_population = $population;
}

echo "&lt;/table&gt;&lt;br&gt;";

// Calculate total growth
$total_growth_percentage = (($population / $initial_population) - 1) * 100;
echo "After $years years, the population grows from " . number_format($initial_population) . " to " . number_format(round($population)) . "&lt;br&gt;";
echo "Total growth: " . number_format($total_growth_percentage, 1) . "%";
?&gt;</code></pre>
            </div>
            
            <p><strong>Analogy:</strong> The exponentiation assignment operator is like a snowball rolling down a hill. Each time it rolls (exponentiation), it grows dramatically in size, and that new size becomes the starting point for the next growth cycle.</p>
        </section>

        <section class="concatenation-assignment">
            <h2>Concatenation Assignment (.=)</h2>
            <p>The concatenation assignment operator (.=) appends the string on the right to the string on the left and assigns the result back to the variable on the left.</p>
            
            <div class="code-example">
                <h3>Basic Concatenation Assignment Example</h3>
                <pre><code>&lt;?php
// Initialize string
$message = "Hello";
echo "Initial string: " . $message . "&lt;br&gt;";

// Apply concatenation assignment
$message .= " World";
echo "After concatenation: " . $message . "&lt;br&gt;";  // Output: Hello World

// Add more text
$message .= "! How are you?";
echo "After additional concatenation: " . $message . "&lt;br&gt;";  // Output: Hello World! How are you?

// Concatenate variable content
$name = "John";
$message .= " My name is $name.";
echo "Final message: " . $message . "&lt;br&gt;";  // Output: Hello World! How are you? My name is John.
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: HTML Generator</h3>
                <p>The concatenation assignment operator is perfect for building HTML content dynamically:</p>
                
                <pre><code>&lt;?php
// HTML generator function
function generate_html_table($data) {
    // Initialize HTML string
    $html = "&lt;table border='1'&gt;";
    
    // Add table header
    $html .= "&lt;thead&gt;&lt;tr&gt;";
    
    // Get column names from first data row
    if (!empty($data)) {
        $first_row = reset($data);
        foreach (array_keys($first_row) as $column) {
            $html .= "&lt;th&gt;" . htmlspecialchars(ucfirst($column)) . "&lt;/th&gt;";
        }
    }
    
    $html .= "&lt;/tr&gt;&lt;/thead&gt;";
    
    // Add table body
    $html .= "&lt;tbody&gt;";
    
    // Add data rows
    foreach ($data as $row) {
        $html .= "&lt;tr&gt;";
        
        foreach ($row as $value) {
            $html .= "&lt;td&gt;" . htmlspecialchars($value) . "&lt;/td&gt;";
        }
        
        $html .= "&lt;/tr&gt;";
    }
    
    $html .= "&lt;/tbody&gt;";
    
    // Close table
    $html .= "&lt;/table&gt;";
    
    return $html;
}

// Sample data
$employees = [
    [
        'id' => 1,
        'name' => 'John Smith',
        'position' => 'Developer',
        'department' => 'IT'
    ],
    [
        'id' => 2,
        'name' => 'Jane Doe',
        'position' => 'Designer',
        'department' => 'Marketing'
    ],
    [
        'id' => 3,
        'name' => 'Bob Johnson',
        'position' => 'Manager',
        'department' => 'HR'
    ]
];

echo "&lt;h3&gt;Employee Directory&lt;/h3&gt;";
echo generate_html_table($employees);

// Generate a report using concatenation
$report = "&lt;h3&gt;Department Summary&lt;/h3&gt;";

$departments = [];
foreach ($employees as $employee) {
    $dept = $employee['department'];
    if (!isset($departments[$dept])) {
        $departments[$dept] = 0;
    }
    $departments[$dept]++;
}

$report .= "&lt;ul&gt;";
foreach ($departments as $dept => $count) {
    $report .= "&lt;li&gt;$dept: $count employee" . ($count > 1 ? "s" : "") . "&lt;/li&gt;";
}
$report .= "&lt;/ul&gt;";

echo $report;
?&gt;</code></pre>
            </div>
            
            <div class="code-example">
                <h3>Building Complex String Content</h3>
                <pre><code>&lt;?php
// Initialize email content
$email_content = "";

// Add header
$email_content .= "Dear Customer,

";

// Add body
$email_content .= "Thank you for your recent purchase. Your order details are as follows:

";

// Add order details
$order_number = "ORD-12345";
$order_date = "2025-04-25";
$order_total = "$59.99";

$email_content .= "Order Number: $order_number
";
$email_content .= "Order Date: $order_date
";
$email_content .= "Order Total: $order_total

";

// Add footer
$email_content .= "If you have any questions about your order, please don't hesitate to contact us.

";
$email_content .= "Best regards,
";
$email_content .= "The Customer Service Team";

// Display generated content
echo "&lt;h3&gt;Generated Email Content&lt;/h3&gt;";
echo "&lt;pre&gt;" . htmlspecialchars($email_content) . "&lt;/pre&gt;";
?&gt;</code></pre>
            </div>
            
            <p><strong>Analogy:</strong> The concatenation assignment operator is like writing a story where you continuously add new chapters to the end. Each addition extends the original story, and the extended version becomes your new working document.</p>
        </section>

        <section class="null-coalescing_assignment">
            <h2>Null Coalescing Assignment (??=)</h2>
            <p>The null coalescing assignment operator (??=) assigns the value on the right to the variable on the left, but only if the variable on the left is null or undefined. This operator was introduced in PHP 7.4.</p>
            
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="400" fill="#fafafa" rx="8"/>
    
    <line x1="516.6666666666667" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="400.00000000000006" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">Yes</text>
    <line x1="516.6666666666667" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">No</text>
    <rect x="223.33333333333337" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">$x ??= $y</text>
    <rect x="223.33333333333337" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">$x = $y</text>
    <rect x="438.66666666666674" y="175" width="156" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Keep $x unchanged</text>
    <rect x="410.66666666666674" y="55" width="212" height="50" 
          transform="rotate(45 516.6666666666667 80)" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Is $x null or undefined?</text>
</svg>
</div>
            
            <div class="code-example">
                <h3>Basic Null Coalescing Assignment Example</h3>
                <pre><code>&lt;?php
// Initialize variables
$name = null;
$age = 25;

echo "Initial values:&lt;br&gt;";
echo "Name: " . ($name ?? "Not set") . "&lt;br&gt;";
echo "Age: " . $age . "&lt;br&gt;&lt;br&gt;";

// Apply null coalescing assignment
$name ??= "John Doe";  // $name is null, so it gets assigned "John Doe"
$age ??= 30;           // $age is not null, so it remains unchanged

echo "After null coalescing assignment:&lt;br&gt;";
echo "Name: " . $name . "&lt;br&gt;"; // Output: John Doe
echo "Age: " . $age . "&lt;br&gt;";   // Output: 25 (unchanged)
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: User Settings with Defaults</h3>
                <p>The null coalescing assignment operator is perfect for initializing settings with default values:</p>
                
                <pre><code>&lt;?php
// Function to load user settings
function get_user_settings($user_id) {
    // In a real application, this would load from a database
    // For this example, we'll simulate some saved settings and some missing ones
    
    // User 1 has some settings defined
    if ($user_id == 1) {
        return [
            'theme' => 'dark',
            'notifications' => true,
            // 'language' and 'timezone' are not set
        ];
    }
    
    // User 2 has different settings
    if ($user_id == 2) {
        return [
            'language' => 'Spanish',
            'timezone' => 'America/Mexico_City',
            // 'theme' and 'notifications' are not set
        ];
    }
    
    // New user with no settings
    return [];
}

// Function to apply default settings
function apply_default_settings(&$settings) {
    // Use null coalescing assignment to apply defaults only where needed
    $settings['theme'] ??= 'light';
    $settings['notifications'] ??= false;
    $settings['language'] ??= 'English';
    $settings['timezone'] ??= 'UTC';
    $settings['font_size'] ??= 'medium';
    
    return $settings;
}

// Demo with different users
$user_ids = [1, 2, 3];

echo "&lt;h3&gt;User Settings System&lt;/h3&gt;";

foreach ($user_ids as $user_id) {
    echo "&lt;h4&gt;User ID: $user_id&lt;/h4&gt;";
    
    // Get user's settings
    $settings = get_user_settings($user_id);
    
    echo "Original settings:&lt;br&gt;";
    if (empty($settings)) {
        echo "No settings found.&lt;br&gt;";
    } else {
        foreach ($settings as $key => $value) {
            $display_value = is_bool($value) ? ($value ? 'true' : 'false') : $value;
            echo "$key: $display_value&lt;br&gt;";
        }
    }
    
    // Apply default settings
    apply_default_settings($settings);
    
    echo "&lt;br&gt;Settings after applying defaults:&lt;br&gt;";
    foreach ($settings as $key => $value) {
        $display_value = is_bool($value) ? ($value ? 'true' : 'false') : $value;
        echo "$key: $display_value&lt;br&gt;";
    }
    
    echo "&lt;hr&gt;";
}
?&gt;</code></pre>
            </div>
            
            <div class="code-example">
                <h3>Alternative to Null Coalescing Assignment</h3>
                <p>Before PHP 7.4, you would achieve the same result using a longer syntax:</p>
                
                <pre><code>&lt;?php
// The old way (pre-PHP 7.4)
$name = null;

// Check if variable is null before assigning
if ($name === null) {
    $name = "John Doe";
}

// Or using the null coalescing operator
$name = $name ?? "John Doe";

echo "Name: " . $name . "&lt;br&gt;"; // Output: John Doe

// With PHP 7.4+, we can simply write:
$name = null;
$name ??= "John Doe";
echo "Name: " . $name . "&lt;br&gt;"; // Output: John Doe
?&gt;</code></pre>
            </div>
            
            <p><strong>Analogy:</strong> The null coalescing assignment operator is like a safety net that only deploys when needed. If you're already safely on a platform (variable has a value), the safety net stays folded away. It only springs into action when you're falling (variable is null).</p>
        </section>

        <section class="bitwise-assignment">
            <h2>Bitwise Assignment Operators</h2>
            <p>PHP also provides bitwise assignment operators that perform bitwise operations and assign the result. While less commonly used in everyday PHP programming, they're important for certain low-level operations.</p>
            
            <div class="operators-table">
                <table>
                    <thead>
                        <tr>
                            <th>Operator</th>
                            <th>Name</th>
                            <th>Equivalent To</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>&=</td>
                            <td>Bitwise AND assignment</td>
                            <td>$x = $x & $y</td>
                            <td>Performs bitwise AND on $x and $y, assigns result to $x</td>
                        </tr>
                        <tr>
                            <td>|=</td>
                            <td>Bitwise OR assignment</td>
                            <td>$x = $x | $y</td>
                            <td>Performs bitwise OR on $x and $y, assigns result to $x</td>
                        </tr>
                        <tr>
                            <td>^=</td>
                            <td>Bitwise XOR assignment</td>
                            <td>$x = $x ^ $y</td>
                            <td>Performs bitwise XOR on $x and $y, assigns result to $x</td>
                        </tr>
                        <tr>
                            <td><<=</td>
                            <td>Left shift assignment</td>
                            <td>$x = $x << $y</td>
                            <td>Shifts $x left by $y bits, assigns result to $x</td>
                        </tr>
                        <tr>
                            <td>>>=</td>
                            <td>Right shift assignment</td>
                            <td>$x = $x >> $y</td>
                            <td>Shifts $x right by $y bits, assigns result to $x</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <div class="code-example">
                <h3>Bitwise Assignment Examples</h3>
                <pre><code>&lt;?php
// Bitwise AND assignment
$a = 0b1010; // Binary 1010 (decimal 10)
$b = 0b1100; // Binary 1100 (decimal 12)

echo "Bitwise operations with:&lt;br&gt;";
echo "a = " . decbin($a) . " (decimal $a)&lt;br&gt;";
echo "b = " . decbin($b) . " (decimal $b)&lt;br&gt;&lt;br&gt;";

$result = $a;
$result &= $b;  // Binary: 1010 & 1100 = 1000 (decimal 8)
echo "a &= b: " . decbin($result) . " (decimal $result)&lt;br&gt;";

// Bitwise OR assignment
$result = $a;
$result |= $b;  // Binary: 1010 | 1100 = 1110 (decimal 14)
echo "a |= b: " . decbin($result) . " (decimal $result)&lt;br&gt;";

// Bitwise XOR assignment
$result = $a;
$result ^= $b;  // Binary: 1010 ^ 1100 = 0110 (decimal 6)
echo "a ^= b: " . decbin($result) . " (decimal $result)&lt;br&gt;";

// Left shift assignment
$result = $a;
$result <<= 2;  // Binary: 1010 << 2 = 101000 (decimal 40)
echo "a <<= 2: " . decbin($result) . " (decimal $result)&lt;br&gt;";

// Right shift assignment
$result = $a;
$result >>= 1;  // Binary: 1010 >> 1 = 101 (decimal 5)
echo "a >>= 1: " . decbin($result) . " (decimal $result)&lt;br&gt;";
?&gt;</code></pre>
            </div>
            
            <div class="real-world">
                <h3>Real-World Application: Flag Management</h3>
                <p>Bitwise assignment operators are useful for managing flags and permissions:</p>
                
                <pre><code>&lt;?php
// Permission flags using bitwise operations
define('READ_PERMISSION',    0b0001); // 1 in decimal
define('WRITE_PERMISSION',   0b0010'); // 2 in decimal
define('EXECUTE_PERMISSION', 0b0100); // 4 in decimal
define('DELETE_PERMISSION',  0b1000); // 8 in decimal

// Function to display permissions in a readable format
function format_permissions($permissions) {
    $result = [];
    
    if ($permissions & READ_PERMISSION) $result[] = 'Read';
    if ($permissions & WRITE_PERMISSION) $result[] = 'Write';
    if ($permissions & EXECUTE_PERMISSION) $result[] = 'Execute';
    if ($permissions & DELETE_PERMISSION) $result[] = 'Delete';
    
    return empty($result) ? 'None' : implode(', ', $result);
}

echo "&lt;h3&gt;User Permission Management&lt;/h3&gt;";

// User with initial permissions
$user_permissions = READ_PERMISSION; // Can only read
echo "Initial permissions: " . format_permissions($user_permissions) . "&lt;br&gt;";

// Grant write permission using OR assignment
$user_permissions |= WRITE_PERMISSION;
echo "After granting write: " . format_permissions($user_permissions) . "&lt;br&gt;";

// Grant execute permission
$user_permissions |= EXECUTE_PERMISSION;
echo "After granting execute: " . format_permissions($user_permissions) . "&lt;br&gt;";

// Revoke write permission using AND assignment with NOT
$user_permissions &= ~WRITE_PERMISSION;
echo "After revoking write: " . format_permissions($user_permissions) . "&lt;br&gt;";

// Toggle delete permission using XOR assignment
$user_permissions ^= DELETE_PERMISSION; // Add delete
echo "After toggling delete: " . format_permissions($user_permissions) . "&lt;br&gt;";

// Toggle delete again (XOR with the same value toggles it)
$user_permissions ^= DELETE_PERMISSION; // Remove delete
echo "After toggling delete again: " . format_permissions($user_permissions) . "&lt;br&gt;";

// Check if user has specific combination of permissions
$required = READ_PERMISSION | EXECUTE_PERMISSION;
$has_permissions = ($user_permissions & $required) === $required;
echo "User has required permissions (read and execute): " . ($has_permissions ? "Yes" : "No") . "&lt;br&gt;";
?&gt;</code></pre>
            </div>
            
            <p><strong>Analogy:</strong> Bitwise assignment operators are like working with a set of light switches. Each switch can be on or off independently, and the operators let you control multiple switches at once. AND (&=) turns off any switch that's off in the pattern, OR (|=) turns on any switch that's on in the pattern, and XOR (^=) toggles the switches that are on in the pattern.</p>
        </section>

        <section class="combined-operations">
            <h2>Combined Assignment Operations: Best Practices and Examples</h2>
            
            <div class="best-practices">
                <h3>Tips for Using Assignment Operators Effectively</h3>
                <ul>
                    <li><strong>Readability:</strong> Use combined assignment operators to make your code more concise, but not at the expense of clarity.</li>
                    <li><strong>Consistency:</strong> Be consistent in your use of assignment operators throughout your codebase.</li>
                    <li><strong>String Building:</strong> Use concatenation assignment (.=) for building strings rather than repeated concatenation operations.</li>
                    <li><strong>Null Handling:</strong> Use null coalescing assignment (??=) for initializing variables with default values.</li>
                    <li><strong>Performance:</strong> Combined operators can be slightly more efficient as they reduce variable access operations.</li>
                </ul>
            </div>
            
            <div class="code-example">
                <h3>Multiple Operators in a Real Application</h3>
                <pre><code>&lt;?php
// Shopping cart system example
class ShoppingCart {
    private $items = [];
    private $total = 0;
    private $tax_rate = 0.08; // 8% tax
    
    // Add item to cart
    public function addItem($product_id, $name, $price, $quantity = 1) {
        // If product already exists, update quantity
        if (isset($this->items[$product_id])) {
            $this->items[$product_id]['quantity'] += $quantity;
        } else {
            // Otherwise add new item
            $this->items[$product_id] = [
                'name' => $name,
                'price' => $price,
                'quantity' => $quantity
            ];
        }
        
        // Update total
        $this->total += $price * $quantity;
        
        return $this;
    }
    
    // Remove item from cart
    public function removeItem($product_id, $quantity = null) {
        if (!isset($this->items[$product_id])) {
            return $this;
        }
        
        // If quantity is null or >= current quantity, remove the entire item
        if ($quantity === null || $quantity >= $this->items[$product_id]['quantity']) {
            $this->total -= $this->items[$product_id]['price'] * $this->items[$product_id]['quantity'];
            unset($this->items[$product_id]);
        } else {
            // Otherwise reduce the quantity
            $this->items[$product_id]['quantity'] -= $quantity;
            $this->total -= $this->items[$product_id]['price'] * $quantity;
        }
        
        return $this;
    }
    
    // Apply discount percentage
    public function applyDiscount($percentage) {
        if ($percentage <= 0 || $percentage >= 100) {
            return $this;
        }
        
        $discount_factor = $percentage / 100;
        $this->total *= (1 - $discount_factor);
        
        return $this;
    }
    
    // Get cart summary
    public function getSummary() {
        $subtotal = $this->total;
        $tax = $subtotal * $this->tax_rate;
        $total = $subtotal + $tax;
        
        return [
            'items' => $this->items,
            'subtotal' => $subtotal,
            'tax' => $tax,
            'total' => $total
        ];
    }
    
    // Display cart
    public function display() {
        $summary = $this->getSummary();
        
        $output = "&lt;h3&gt;Shopping Cart&lt;/h3&gt;";
        
        if (empty($this->items)) {
            $output .= "&lt;p&gt;Your cart is empty.&lt;/p&gt;";
            return $output;
        }
        
        $output .= "&lt;table border='1'&gt;";
        $output .= "&lt;tr&gt;&lt;th&gt;Product&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;th&gt;Quantity&lt;/th&gt;&lt;th&gt;Subtotal&lt;/th&gt;&lt;/tr&gt;";
        
        foreach ($this->items as $id => $item) {
            $subtotal = $item['price'] * $item['quantity'];
            $output .= "&lt;tr&gt;";
            $output .= "&lt;td&gt;{$item['name']}&lt;/td&gt;";
            $output .= "&lt;td&gt;$" . number_format($item['price'], 2) . "&lt;/td&gt;";
            $output .= "&lt;td&gt;{$item['quantity']}&lt;/td&gt;";
            $output .= "&lt;td&gt;$" . number_format($subtotal, 2) . "&lt;/td&gt;";
            $output .= "&lt;/tr&gt;";
        }
        
        $output .= "&lt;/table&gt;";
        $output .= "&lt;p&gt;Subtotal: $" . number_format($summary['subtotal'], 2) . "&lt;/p&gt;";
        $output .= "&lt;p&gt;Tax (8%): $" . number_format($summary['tax'], 2) . "&lt;/p&gt;";
        $output .= "&lt;p&gt;&lt;strong&gt;Total: $" . number_format($summary['total'], 2) . "&lt;/strong&gt;&lt;/p&gt;";
        
        return $output;
    }
}

// Use the shopping cart
$cart = new ShoppingCart();

// Add items
$cart->addItem(101, 'Widget A', 19.99, 2)
     ->addItem(102, 'Widget B', 29.99)
     ->addItem(103, 'Widget C', 39.99, 3);

echo $cart->display();

// Apply discount
$cart->applyDiscount(10); // 10% discount
echo "&lt;p&gt;After 10% discount:&lt;/p&gt;";
echo $cart->display();

// Remove an item
$cart->removeItem(101, 1); // Remove 1 Widget A
echo "&lt;p&gt;After removing one Widget A:&lt;/p&gt;";
echo $cart->display();
?&gt;</code></pre>
            </div>
        </section>

        <section class="common-errors">
            <h2>Common Errors and Troubleshooting</h2>
            
            <div class="error-examples">
                <h3>Variable Not Declared</h3>
                <pre><code>&lt;?php
// Error: $count is not initialized
// $count += 1; // This would trigger a notice: Undefined variable

// Correct approach
$count = 0; // Initialize first
$count += 1; // Then use the assignment operator
echo $count; // Outputs: 1
?&gt;</code></pre>
                
                <h3>Division by Zero</h3>
                <pre><code>&lt;?php
$num = 10;
$divisor = 0;

// This would trigger an error
// $num /= $divisor;

// Correct approach: check before division
if ($divisor !== 0) {
    $num /= $divisor;
    echo $num;
} else {
    echo "Cannot divide by zero";
}
?&gt;</code></pre>
                
                <h3>Type Confusion</h3>
                <pre><code>&lt;?php
// String and number concatenation vs. addition
$value = "5";
$value += 3; // PHP converts string to number for addition
echo $value . "&lt;br&gt;"; // Outputs: 8

$text = "Hello";
// $text += " World"; // Error: Cannot apply += to strings
$text .= " World"; // Correct: Use .= for string concatenation
echo $text; // Outputs: Hello World
?&gt;</code></pre>
                
                <h3>Operator Precedence Issues</h3>
                <pre><code>&lt;?php
$a = 5;
$b = 2;
$c = 10;

// Unexpected result due to precedence
$result = $a;
$result += $b * $c; // Multiplication happens first
echo $result . "&lt;br&gt;"; // Outputs: 25 (5 + (2 * 10))

// Use parentheses for clarity when needed
$result = $a;
$result = ($result + $b) * $c; // Different operation
echo $result; // Outputs: 70 ((5 + 2) * 10)
?&gt;</code></pre>
            </div>
            
            <div class="debugging-tips">
                <h3>Debugging Tips for Assignment Operators</h3>
                <ul>
                    <li><strong>var_dump() or print_r():</strong> Use these functions to inspect variable values and types when debugging assignment operations.</li>
                    <li><strong>Error Reporting:</strong> Set error reporting to show notices for undefined variables.</li>
                    <li><strong>Step-by-Step:</strong> For complex operations, break them down into individual steps for debugging.</li>
                    <li><strong>Type Checking:</strong> Use is_numeric(), is_string(), etc. to verify variable types before operations.</li>
                </ul>
                
                <pre><code>&lt;?php
// Debugging assignment operations
$value = "10";
$value += 5;

// Inspect the result
echo "After operation: $value&lt;br&gt;";

// Check variable type
var_dump($value);
echo "&lt;br&gt;";

// Display variable information in a structured format
print_r($value);
?&gt;</code></pre>
            </div>
        </section>

        <section class="practice-exercises">
            <h2>Practice Exercises</h2>
            <p>Test your understanding of PHP assignment operators with these exercises:</p>
            
            <div class="exercise">
                <h3>Exercise 1: String Builder</h3>
                <p>Create a PHP script that builds an HTML unordered list using the concatenation assignment operator.</p>
                <pre><code>&lt;?php
/*
 * 1. Initialize an empty string variable $html
 * 2. Add opening &lt;ul&gt; tag
 * 3. Add five &lt;li&gt; elements with different text
 * 4. Add closing &lt;/ul&gt; tag
 * 5. Output the final HTML
 */
?&gt;</code></pre>
            </div>
            
            <div class="exercise">
                <h3>Exercise 2: Number Manipulator</h3>
                <p>Create a PHP script that uses various assignment operators to manipulate a number.</p>
                <pre><code>&lt;?php
/*
 * 1. Initialize a variable $num with value 10
 * 2. Add 5 to it using +=
 * 3. Multiply it by 2 using *=
 * 4. Subtract 7 using -=
 * 5. Divide it by 3 using /=
 * 6. Calculate remainder when divided by 5 using %=
 * 7. Square it using **=
 * 8. Output the value after each operation
 */
?&gt;</code></pre>
            </div>
            
            <div class="exercise">
                <h3>Exercise 3: Config Manager</h3>
                <p>Create a PHP script that manages configuration values using the null coalescing assignment operator.</p>
                <pre><code>&lt;?php
/*
 * 1. Create an array $config with some values predefined
 * 2. Use ??= to ensure the following keys have default values if not already set:
 *    - 'theme' (default: 'default')
 *    - 'language' (default: 'en')
 *    - 'items_per_page' (default: 10)
 *    - 'debug_mode' (default: false)
 * 3. Output the final configuration array
 */
?&gt;</code></pre>
            </div>
        </section>

        <section class="summary">
            <h2>Summary</h2>
            <p>In this session, we've explored PHP's assignment operators and their practical applications:</p>
            
            <ul>
                <li><strong>Basic Assignment (=):</strong> Assigns a value to a variable.</li>
                <li><strong>Addition Assignment (+=):</strong> Adds and assigns in one operation, useful for counters and accumulation.</li>
                <li><strong>Subtraction Assignment (-=):</strong> Subtracts and assigns, ideal for decrementing or reducing values.</li>
                <li><strong>Multiplication Assignment (*=):</strong> Multiplies and assigns, perfect for scaling values.</li>
                <li><strong>Division Assignment (/=):</strong> Divides and assigns, useful for proportional adjustments.</li>
                <li><strong>Modulus Assignment (%=):</strong> Calculates remainder and assigns, great for circular operations.</li>
                <li><strong>Exponentiation Assignment (**=):</strong> Raises to a power and assigns, ideal for exponential calculations.</li>
                <li><strong>Concatenation Assignment (.=):</strong> Appends strings, essential for building dynamic text and HTML.</li>
                <li><strong>Null Coalescing Assignment (??=):</strong> Assigns only if the variable is null, perfect for setting defaults.</li>
                <li><strong>Bitwise Assignment Operators (&=, |=, ^=, <<=, >>=):</strong> Perform bitwise operations and assign, useful for flag management.</li>
            </ul>
            
            <p>These operators not only make your code more concise but also more readable and efficient. By combining operations with assignment, you reduce the number of statements needed and often make your intent clearer. As you continue building PHP applications, these operators will become essential tools in your development toolkit.</p>
        </section>

        <section class="next-session">
            <h2>Next Session Preview</h2>
            <p>In our next session, we'll explore PHP Comparison Operators, which allow you to compare values and make decisions based on those comparisons. We'll learn about equality, identity, and relational operators that form the foundation of conditional logic in PHP.</p>
        </section>

        <section class="additional-resources">
            <h2>Additional Resources</h2>
            <ul>
                <li><a href="https://www.php.net/manual/en/language.operators.assignment.php" target="_blank">PHP Manual: Assignment Operators</a></li>
                <li><a href="https://www.php.net/manual/en/language.operators.precedence.php" target="_blank">PHP Manual: Operator Precedence</a></li>
                <li><a href="https://www.php.net/manual/en/language.operators.string.php" target="_blank">PHP Manual: String Operators</a></li>
                <li><a href="https://www.php.net/manual/en/language.operators.bitwise.php" target="_blank">PHP Manual: Bitwise Operators</a></li>
            </ul>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
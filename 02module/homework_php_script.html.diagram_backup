<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>PHP Variables of Different Data Types - PHP WordPress Course</title>
<meta content="Create a PHP script that demonstrates the use of variables with different data types available in PHP. This exercise will help you understand how PHP handles va" name="description"/>
<meta content="PHP, WordPress, web development, homework:, php, script" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">Homework: PHP Script</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 1</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/review_php_setup.html">Review PHP Setup</a></li>
<li><a class="sidebar-link" href="/02module/php_tags_basic_syntax.html">PHP Tags &amp; Syntax</a></li>
<li><a class="sidebar-link" href="/02module/php_output_methods.html">Output Methods</a></li>
<li><a class="sidebar-link" href="/02module/php_comments.html">Comments in PHP</a></li>
<li><a class="sidebar-link" href="/02module/php_variables_and_data_types.html">Variables &amp; Data Types</a></li>
<li><a class="sidebar-link" href="/02module/php_constants.html">Constants</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/homework_php_script.html">Homework: PHP Script</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/01module/project_static_site.html">← Prev: Module 1: Project</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_arithmetic_operators.html">Next: Session 2: Operators →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>PHP Variables of Different Data Types</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 60 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: PHP Projects</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP programming concepts</li>
<li>Write clean, maintainable code</li>
<li>Apply best practices</li>
<li>Build dynamic applications</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="assignment">
            <h2>Assignment Overview</h2>
            <p>Create a PHP script that demonstrates the use of variables with different data types available in PHP. This exercise will help you understand how PHP handles various types of data and how to work with them.</p>
        </section>

        <section class="problem-solving">
            <h2>George Polya's 4-Step Problem Solving Method</h2>
            
            <div class="step">
                <h3>Step 1: Understand the Problem</h3>
                <p>We need to create a PHP script that:</p>
                <ul>
                    <li>Demonstrates the different data types available in PHP</li>
                    <li>Declares variables with each data type</li>
                    <li>Shows how to use these variables</li>
                    <li>Displays the type and value of each variable</li>
                </ul>
                
                <p>The main PHP data types we need to cover are:</p>
                <ul>
                    <li>String - Text and characters</li>
                    <li>Integer - Whole numbers</li>
                    <li>Float - Decimal numbers</li>
                    <li>Boolean - True/False values</li>
                    <li>Array - Collection of values</li>
                    <li>Object - Instances of classes</li>
                    <li>NULL - Special type representing no value</li>
                </ul>
            </div>
            
            <div class="step">
                <h3>Step 2: Devise a Plan</h3>
                <ol>
                    <li>Create a new PHP file named <code>data_types.php</code></li>
                    <li>Start with the PHP opening tag <code>&lt;?php</code></li>
                    <li>Declare variables for each data type</li>
                    <li>Use the <code>var_dump()</code> function to display the type and value of each variable</li>
                    <li>Add comments to explain each data type</li>
                    <li>Create an HTML structure to display the results in a readable format</li>
                    <li>End with the PHP closing tag <code>?&gt;</code></li>
                </ol>
            </div>

            <div class="step">
                <h3>Step 3: Execute the Plan</h3>
                <p>Let's implement our solution step by step:</p>
            </div>
        </section>

        <section class="solution">
            <h2>Solution: Basic PHP Data Types Script</h2>
            
            <div class="file-info">
                <p><strong>File:</strong> data_types.php</p>
                <p><strong>Location:</strong> Your web server's document root folder (e.g., htdocs, www, or public_html)</p>
            </div>

            <div class="code">
                <h3>Complete PHP Script Solution</h3>
                <pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;PHP Data Types&lt;/title&gt;
    &lt;style&gt;
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
        }
        h2 {
            color: #444;
            margin-top: 20px;
        }
        .type-box {
            background-color: #f9f9f9;
            border-left: 4px solid #007bff;
            padding: 10px 15px;
            margin-bottom: 15px;
        }
        code {
            background: #eee;
            padding: 2px 5px;
            border-radius: 3px;
            font-family: Consolas, Monaco, 'Andale Mono', monospace;
        }
        .output {
            background-color: #f0f8ff;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
            border: 1px solid #cce5ff;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="container"&gt;
        &lt;h1&gt;PHP Data Types Demonstration&lt;/h1&gt;
        
        &lt;?php
        // This script demonstrates the different data types in PHP
        
        // 1. String - Used for text
        $string_variable = "Hello, PHP World!";
        
        // 2. Integer - Whole numbers
        $integer_variable = 42;
        
        // 3. Float (or Double) - Decimal numbers
        $float_variable = 3.14159;
        
        // 4. Boolean - True or False values
        $boolean_variable = true;
        
        // 5. Array - Stores multiple values in a single variable
        $indexed_array = ["Apple", "Banana", "Cherry"]; // Indexed array
        $associative_array = [
            "name" => "John",
            "age" => 25,
            "city" => "New York"
        ]; // Associative array
        
        // 6. Object - Instance of a class
        class Person {
            public $name;
            public $age;
            
            function __construct($name, $age) {
                $this->name = $name;
                $this->age = $age;
            }
            
            function introduce() {
                return "Hi, I'm " . $this->name . " and I'm " . $this->age . " years old.";
            }
        }
        
        $object_variable = new Person("Alice", 30);
        
        // 7. NULL - Special variable with no value
        $null_variable = NULL;
        
        // 8. Resource - Reference to an external resource (not shown here)
        
        // Display each variable with its type and value
        ?&gt;
        
        &lt;h2&gt;1. String&lt;/h2&gt;
        &lt;div class="type-box"&gt;
            &lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; A string is a sequence of characters, like text.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt; &lt;code&gt;$string_variable = "Hello, PHP World!";&lt;/code&gt;&lt;/p&gt;
            &lt;div class="output"&gt;
                &lt;strong&gt;Value:&lt;/strong&gt; &lt;?php echo $string_variable; ?&gt;&lt;br&gt;
                &lt;strong&gt;Type:&lt;/strong&gt; &lt;?php echo gettype($string_variable); ?&gt;&lt;br&gt;
                &lt;strong&gt;var_dump():&lt;/strong&gt; &lt;?php var_dump($string_variable); ?&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;h2&gt;2. Integer&lt;/h2&gt;
        &lt;div class="type-box"&gt;
            &lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; An integer is a whole number without a decimal point.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt; &lt;code&gt;$integer_variable = 42;&lt;/code&gt;&lt;/p&gt;
            &lt;div class="output"&gt;
                &lt;strong&gt;Value:&lt;/strong&gt; &lt;?php echo $integer_variable; ?&gt;&lt;br&gt;
                &lt;strong&gt;Type:&lt;/strong&gt; &lt;?php echo gettype($integer_variable); ?&gt;&lt;br&gt;
                &lt;strong&gt;var_dump():&lt;/strong&gt; &lt;?php var_dump($integer_variable); ?&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;h2&gt;3. Float&lt;/h2&gt;
        &lt;div class="type-box"&gt;
            &lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; A float (or double) is a number with a decimal point.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt; &lt;code&gt;$float_variable = 3.14159;&lt;/code&gt;&lt;/p&gt;
            &lt;div class="output"&gt;
                &lt;strong&gt;Value:&lt;/strong&gt; &lt;?php echo $float_variable; ?&gt;&lt;br&gt;
                &lt;strong&gt;Type:&lt;/strong&gt; &lt;?php echo gettype($float_variable); ?&gt;&lt;br&gt;
                &lt;strong&gt;var_dump():&lt;/strong&gt; &lt;?php var_dump($float_variable); ?&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;h2&gt;4. Boolean&lt;/h2&gt;
        &lt;div class="type-box"&gt;
            &lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; A boolean represents a true or false value.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt; &lt;code&gt;$boolean_variable = true;&lt;/code&gt;&lt;/p&gt;
            &lt;div class="output"&gt;
                &lt;strong&gt;Value:&lt;/strong&gt; &lt;?php echo $boolean_variable ? 'true' : 'false'; ?&gt;&lt;br&gt;
                &lt;strong&gt;Type:&lt;/strong&gt; &lt;?php echo gettype($boolean_variable); ?&gt;&lt;br&gt;
                &lt;strong&gt;var_dump():&lt;/strong&gt; &lt;?php var_dump($boolean_variable); ?&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;h2&gt;5. Array&lt;/h2&gt;
        &lt;div class="type-box"&gt;
            &lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; An array stores multiple values in a single variable.&lt;/p&gt;
            
            &lt;h3&gt;Indexed Array&lt;/h3&gt;
            &lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt; &lt;code&gt;$indexed_array = ["Apple", "Banana", "Cherry"];&lt;/code&gt;&lt;/p&gt;
            &lt;div class="output"&gt;
                &lt;strong&gt;Value:&lt;/strong&gt; &lt;?php echo implode(", ", $indexed_array); ?&gt;&lt;br&gt;
                &lt;strong&gt;Type:&lt;/strong&gt; &lt;?php echo gettype($indexed_array); ?&gt;&lt;br&gt;
                &lt;strong&gt;var_dump():&lt;/strong&gt; &lt;?php var_dump($indexed_array); ?&gt;
            &lt;/div&gt;
            
            &lt;h3&gt;Associative Array&lt;/h3&gt;
            &lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt; &lt;code&gt;$associative_array = ["name" => "John", "age" => 25, "city" => "New York"];&lt;/code&gt;&lt;/p&gt;
            &lt;div class="output"&gt;
                &lt;strong&gt;Value:&lt;/strong&gt; 
                &lt;?php 
                foreach($associative_array as $key => $value) {
                    echo "$key: $value, ";
                } 
                ?&gt;&lt;br&gt;
                &lt;strong&gt;Type:&lt;/strong&gt; &lt;?php echo gettype($associative_array); ?&gt;&lt;br&gt;
                &lt;strong&gt;var_dump():&lt;/strong&gt; &lt;?php var_dump($associative_array); ?&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;h2&gt;6. Object&lt;/h2&gt;
        &lt;div class="type-box"&gt;
            &lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; An object is an instance of a class.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt; &lt;code&gt;$object_variable = new Person("Alice", 30);&lt;/code&gt;&lt;/p&gt;
            &lt;div class="output"&gt;
                &lt;strong&gt;Value:&lt;/strong&gt; &lt;?php echo $object_variable->introduce(); ?&gt;&lt;br&gt;
                &lt;strong&gt;Type:&lt;/strong&gt; &lt;?php echo gettype($object_variable); ?&gt;&lt;br&gt;
                &lt;strong&gt;Class:&lt;/strong&gt; &lt;?php echo get_class($object_variable); ?&gt;&lt;br&gt;
                &lt;strong&gt;var_dump():&lt;/strong&gt; &lt;?php var_dump($object_variable); ?&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;h2&gt;7. NULL&lt;/h2&gt;
        &lt;div class="type-box"&gt;
            &lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; NULL represents a variable with no value.&lt;/p&gt;
            &lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt; &lt;code&gt;$null_variable = NULL;&lt;/code&gt;&lt;/p&gt;
            &lt;div class="output"&gt;
                &lt;strong&gt;Value:&lt;/strong&gt; &lt;?php echo is_null($null_variable) ? 'NULL' : $null_variable; ?&gt;&lt;br&gt;
                &lt;strong&gt;Type:&lt;/strong&gt; &lt;?php echo gettype($null_variable); ?&gt;&lt;br&gt;
                &lt;strong&gt;var_dump():&lt;/strong&gt; &lt;?php var_dump($null_variable); ?&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;h2&gt;Type Conversion in PHP&lt;/h2&gt;
        &lt;div class="type-box"&gt;
            &lt;p&gt;PHP allows you to convert between data types. Here are some examples:&lt;/p&gt;
            
            &lt;h3&gt;String to Integer&lt;/h3&gt;
            &lt;?php $string_number = "42"; ?&gt;
            &lt;p&gt;&lt;code&gt;$string_number = "42";&lt;/code&gt;&lt;/p&gt;
            &lt;p&gt;&lt;code&gt;$converted_to_int = (int)$string_number;&lt;/code&gt;&lt;/p&gt;
            &lt;div class="output"&gt;
                &lt;?php $converted_to_int = (int)$string_number; ?&gt;
                &lt;strong&gt;Original:&lt;/strong&gt; &lt;?php var_dump($string_number); ?&gt;&lt;br&gt;
                &lt;strong&gt;Converted:&lt;/strong&gt; &lt;?php var_dump($converted_to_int); ?&gt;
            &lt;/div&gt;
            
            &lt;h3&gt;Float to Integer&lt;/h3&gt;
            &lt;?php $float_number = 3.14159; ?&gt;
            &lt;p&gt;&lt;code&gt;$float_number = 3.14159;&lt;/code&gt;&lt;/p&gt;
            &lt;p&gt;&lt;code&gt;$converted_to_int = (int)$float_number;&lt;/code&gt;&lt;/p&gt;
            &lt;div class="output"&gt;
                &lt;?php $converted_to_int = (int)$float_number; ?&gt;
                &lt;strong&gt;Original:&lt;/strong&gt; &lt;?php var_dump($float_number); ?&gt;&lt;br&gt;
                &lt;strong&gt;Converted:&lt;/strong&gt; &lt;?php var_dump($converted_to_int); ?&gt;
                &lt;p&gt;Note: The decimal part is truncated, not rounded.&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
            </div>
        </section>

        <section class="step">
            <h3>Step 4: Look Back and Review</h3>
            <p>Our PHP script successfully demonstrates:</p>
            <ul>
                <li>Declaration of variables with different data types</li>
                <li>Display of the value and type of each variable</li>
                <li>Basic type conversion examples</li>
                <li>A clean HTML output for better readability</li>
            </ul>
            <p>We've covered all the major PHP data types as required.</p>
        </section>

        <section class="explanation">
            <h2>Understanding PHP Data Types</h2>
            
            <div class="data-type_diagram">
                <h3>PHP Data Types Visualization</h3>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 1200" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="1200" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="150.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="250.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="350.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="450.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="550.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="650.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="150.0" y1="200" x2="190.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="150.0" y1="200" x2="330.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="250.0" y1="200" x2="470.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="250.0" y1="200" x2="610.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="80" x2="250.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="266.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[Compound Types] A </text>
    <line x1="516.6666666666667" y1="80" x2="450.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="483.33333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; B1[String] B </text>
    <line x1="516.6666666666667" y1="80" x2="650.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="583.3333333333334" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; B3[Float/Double] B </text>
    <line x1="150.0" y1="200" x2="330.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="240.0" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C1[Array] C </text>
    <line x1="250.0" y1="200" x2="610.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="430.0" y="255.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; D1[NULL] D </text>
    <rect x="217.33333333333337" y="55" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">PHP Data Types</text>
    <rect x="456.66666666666674" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Scalar Types</text>
    <rect x="84.0" y="175" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="150.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Compound Types</text>
    <rect x="188.0" y="175" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="250.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Special Types</text>
    <rect x="290.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="350.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">String</text>
    <rect x="390.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="450.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Integer</text>
    <rect x="490.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="550.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Float/Double</text>
    <rect x="590.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="650.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Boolean</text>
    <rect x="130.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="190.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Array</text>
    <rect x="270.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="330.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Object</text>
    <rect x="410.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="470.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">NULL</text>
    <rect x="550.0" y="295" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="610.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Resource</text>
</svg>
</div>
            </div>
            
            <div class="concept-explanation">
                <h3>Detailed Explanation of PHP Data Types</h3>
                
                <h4>Scalar Types (Single Value)</h4>
                <ul>
                    <li><strong>String:</strong> A sequence of characters, like "Hello World". Strings in PHP can be enclosed in single quotes ('text') or double quotes ("text"). Double quotes allow for variable interpolation and escape sequences.</li>
                    <li><strong>Integer:</strong> Whole numbers without a decimal point, like 42, -7, or 0. PHP integers have a maximum size depending on the system (usually up to about 2 billion on 32-bit systems).</li>
                    <li><strong>Float/Double:</strong> Numbers with a decimal point or in exponential form, like 3.14 or 1.2e3. Floating-point arithmetic in PHP can sometimes lead to precision issues due to how computers store decimal numbers.</li>
                    <li><strong>Boolean:</strong> Represents truth values - either true or false. Many PHP functions return booleans to indicate success or failure.</li>
                </ul>
                
                <h4>Compound Types (Multiple Values)</h4>
                <ul>
                    <li><strong>Array:</strong> A structured data type that can store multiple values in a single variable. PHP arrays can be:</li>
                    <ul>
                        <li>Indexed arrays (with numeric keys): <code>$fruits = ["Apple", "Banana", "Cherry"];</code></li>
                        <li>Associative arrays (with named keys): <code>$person = ["name" => "John", "age" => 30];</code></li>
                        <li>Multidimensional arrays (arrays of arrays): <code>$matrix = [[1,2,3], [4,5,6]];</code></li>
                    </ul>
                    <li><strong>Object:</strong> Instances of classes with properties and methods. Objects are a fundamental part of Object-Oriented Programming in PHP.</li>
                </ul>
                
                <h4>Special Types</h4>
                <ul>
                    <li><strong>NULL:</strong> Represents a variable with no value. A variable is null if it has been assigned the constant NULL, if it has not been set to any value yet, or if it has been unset().</li>
                    <li><strong>Resource:</strong> A special variable that holds a reference to an external resource, like a database connection or file handle. Resources are not covered in our basic script but are important for advanced PHP operations.</li>
                </ul>
            </div>
            
            <div class="type-checking">
                <h3>Checking and Converting Types in PHP</h3>
                
                <h4>Type Checking Functions</h4>
                <ul>
                    <li><code>gettype($variable)</code>: Returns a string representing the type</li>
                    <li><code>is_string($variable)</code>: Checks if the variable is a string</li>
                    <li><code>is_int($variable)</code> or <code>is_integer($variable)</code>: Checks if the variable is an integer</li>
                    <li><code>is_float($variable)</code> or <code>is_double($variable)</code>: Checks if the variable is a float</li>
                    <li><code>is_bool($variable)</code>: Checks if the variable is a boolean</li>
                    <li><code>is_array($variable)</code>: Checks if the variable is an array</li>
                    <li><code>is_object($variable)</code>: Checks if the variable is an object</li>
                    <li><code>is_null($variable)</code>: Checks if the variable is NULL</li>
                    <li><code>is_resource($variable)</code>: Checks if the variable is a resource</li>
                    <li><code>var_dump($variable)</code>: Dumps information about the variable including its type and value</li>
                </ul>
                
                <h4>Type Conversion (Casting)</h4>
                <p>PHP allows you to convert variables from one type to another using type casting:</p>
                <ul>
                    <li><code>(string)$var</code>: Converts to string</li>
                    <li><code>(int)$var</code> or <code>(integer)$var</code>: Converts to integer</li>
                    <li><code>(float)$var</code> or <code>(double)$var</code>: Converts to float</li>
                    <li><code>(bool)$var</code> or <code>(boolean)$var</code>: Converts to boolean</li>
                    <li><code>(array)$var</code>: Converts to array</li>
                    <li><code>(object)$var</code>: Converts to object</li>
                </ul>
            </div>
            
            <div class="dynamic-typing">
                <h3>PHP's Dynamic Typing</h3>
                <p>Unlike some programming languages, PHP uses dynamic typing, which means:</p>
                <ul>
                    <li>You don't need to declare the type of a variable when you create it</li>
                    <li>The same variable can hold different types of values during its lifetime</li>
                    <li>PHP automatically converts between types as needed in many operations</li>
                </ul>
                
                <div class="svg-container">
                    <svg viewBox="0 0 500 200" xmlns="http://www.w3.org/2000/svg">
                        <!-- Static Languages Box -->
                        <rect x="50" y="30" width="150" height="140" rx="10" fill="#f8d7da" stroke="#dc3545" stroke-width="2"/>
                        <text x="125" y="50" text-anchor="middle" font-weight="bold">Static Typing</text>
                        <text x="125" y="80" text-anchor="middle" font-size="14">int age = 30;</text>
                        <text x="125" y="110" text-anchor="middle" font-size="14">// Cannot change type</text>
                        <text x="125" y="140" text-anchor="middle" font-size="14">age = "thirty"; // Error!</text>
                        
                        <!-- Dynamic Languages Box -->
                        <rect x="300" y="30" width="150" height="140" rx="10" fill="#d1e7dd" stroke="#198754" stroke-width="2"/>
                        <text x="375" y="50" text-anchor="middle" font-weight="bold">Dynamic Typing (PHP)</text>
                        <text x="375" y="80" text-anchor="middle" font-size="14">$age = 30;</text>
                        <text x="375" y="110" text-anchor="middle" font-size="14">// Can change type</text>
                        <text x="375" y="140" text-anchor="middle" font-size="14">$age = "thirty"; // OK</text>
                        
                        <!-- Arrow -->
                        <line x1="210" y1="100" x2="290" y2="100" stroke="#333" stroke-width="2"/>
                        <polygon points="290,100 280,95 280,105" fill="#333"/>
                    </svg>
                </div>
            </div>
            
            <div class="real-world_examples">
                <h3>Real-World Applications of Different Data Types</h3>
                
                <div class="example">
                    <h4>1. E-commerce Product Catalog (Object)</h4>
                    <pre><code>// Using objects for a product
class Product {
    public $id;
    public $name;
    public $price;
    public $inStock;
    
    function __construct($id, $name, $price, $inStock) {
        $this->id = $id;
        $this->name = $name;
        $this->price = $price;
        $this->inStock = $inStock;
    }
    
    function getDisplayPrice() {
        return "$" . number_format($this->price, 2);
    }
    
    function isAvailable() {
        return $this->inStock > 0;
    }
}

$laptop = new Product(101, "MacBook Pro", 1299.99, 5);</code></pre>
                </div>
                
                <div class="example">
                    <h4>2. User Registration Form (Multiple Types)</h4>
                    <pre><code>// Processing user registration data
$username = $_POST['username']; // String
$age = (int)$_POST['age']; // Convert to Integer
$email = filter_var($_POST['email'], FILTER_VALIDATE_EMAIL); // String (validated)
$newsletter = isset($_POST['newsletter']); // Boolean
$interests = $_POST['interests']; // Array of selected interests</code></pre>
                </div>
                
                <div class="example">
                    <h4>3. Blog Post System (Associative Array)</h4>
                    <pre><code>// Using associative array for a blog post
$blogPost = [
    "id" => 1,
    "title" => "Understanding PHP Data Types",
    "content" => "PHP supports several data types that are important to understand...",
    "author" => "John Doe",
    "date" => "2025-04-27",
    "tags" => ["PHP", "Web Development", "Programming"],
    "published" => true
];</code></pre>
                </div>
            </div>
        </section>

        <section class="tips-tricks">
            <h2>Tips and Common Pitfalls</h2>
            
            <div class="tip">
                <h3>Comparing Values vs. Comparing Types</h3>
                <p>PHP has two equality operators:</p>
                <ul>
                    <li><code>==</code> - Loose comparison (compares values after type juggling)</li>
                    <li><code>===</code> - Strict comparison (compares values and types)</li>
                </ul>
                <pre><code>// Loose comparison
"42" == 42    // true - string converted to number

// Strict comparison
"42" === 42   // false - different types</code></pre>
                <p>Always use <code>===</code> when you need to ensure both value and type are the same.</p>
            </div>
            
            <div class="tip">
                <h3>Type Juggling in PHP</h3>
                <p>PHP automatically converts between types in expressions, which is called "type juggling":</p>
                <pre><code>$result = 5 + "10";  // 15 (integer) - string "10" is converted to int 10
$concat = "Hello" . 42;  // "Hello42" (string) - integer 42 is converted to string "42"</code></pre>
                <p>This can be convenient but can also lead to unexpected results if you're not careful.</p>
            </div>
            
            <div class="tip">
                <h3>Truth Values in PHP</h3>
                <p>The following values are considered false in PHP:</p>
                <ul>
                    <li>The boolean <code>false</code> itself</li>
                    <li>The integer <code>0</code> and float <code>0.0</code></li>
                    <li>The empty string <code>""</code> and string <code>"0"</code></li>
                    <li>An array with zero elements</li>
                    <li>The special type <code>NULL</code></li>
                </ul>
                <p>All other values are considered <code>true</code>.</p>
            </div>
        </section>

        <section class="further-resources">
            <h2>Further Learning Resources</h2>
            
            <ul>
                <li><a href="https://www.php.net/manual/en/language.types.php" target="_blank">PHP Manual: Types</a> - Official documentation on PHP data types</li>
                <li><a href="https://www.w3schools.com/php/php_datatypes.asp" target="_blank">W3Schools PHP Data Types</a> - Beginner-friendly tutorial on PHP data types</li>
                <li><a href="https://phptherightway.com/" target="_blank">PHP The Right Way</a> - Best practices for modern PHP development</li>
            </ul>
        </section>

        <section class="assignment">
            <h2>Homework Assignment</h2>
            
            <div class="task">
                <h3>Basic Assignment: Create Your Own PHP Data Types Script</h3>
                <ol>
                    <li>Create a new PHP file named <code>my_data_types.php</code></li>
                    <li>Define at least one variable for each of the main PHP data types</li>
                    <li>Use meaningful variable names and values related to a theme (e.g., a bookstore, a student database, etc.)</li>
                    <li>Display each variable with both <code>echo</code> and <code>var_dump()</code></li>
                    <li>Include at least one example of type conversion</li>
                </ol>
            </div>
            
            <div class="task">
                <h3>Challenge Assignment: PHP Data Type Calculator</h3>
                <p>Create a PHP script that:</p>
                <ol>
                    <li>Declares two variables of different types (string, integer, float)</li>
                    <li>Performs arithmetic operations with them (+, -, *, /)</li>
                    <li>Shows what happens when PHP automatically converts between types</li>
                    <li>Explicitly converts the variables to various types and shows the results</li>
                    <li>Displays the results in a nicely formatted HTML table</li>
                </ol>
            </div>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
<script src="/assets/js/mermaid-universal-fix.js"></script>
</body>
</html>
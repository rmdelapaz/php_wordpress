<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>Building a PHP Grade Calculator - PHP WordPress Course</title>
<meta content="Create a grade calculation system." name="description"/>
<meta content="PHP, WordPress, web development, homework:, grade, calculator" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">Homework: Grade Calculator</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 3</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_if.html">If Statements</a></li>
<li><a class="sidebar-link" href="/02module/php_if_else.html">If-Else Statements</a></li>
<li><a class="sidebar-link" href="/02module/php_if_elseif_else.html">If-Elseif-Else</a></li>
<li><a class="sidebar-link" href="/02module/php_switch.html">Switch Statements</a></li>
<li><a class="sidebar-link" href="/02module/php_ternary.html">Ternary Operator</a></li>
<li><a class="sidebar-link" href="/02module/php_null_coalescing.html">Null Coalescing</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/homework_php_grades.html">Homework: Grades</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_arithmetic_operators.html">← Prev: Session 2: Operators</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_for_loops.html">Next: Session 4: Loops →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>Building a PHP Grade Calculator</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 60 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: PHP Projects</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP programming concepts</li>
<li>Write clean, maintainable code</li>
<li>Apply best practices</li>
<li>Build dynamic applications</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">

<section>
            <h2>Problem Description</h2>
            <p>
                Today we'll be creating a PHP program that determines letter grades based on numerical scores. 
                This is a real-world example of conditional logic that educational institutions use to evaluate student performance.
            </p>
            
            <div class="requirements">
                <h3>Requirements</h3>
                <ul>
                    <li>Create a PHP program that takes a numerical score as input (0-100)</li>
                    <li>The program should output the corresponding letter grade based on the following scale:
                        <ul>
                            <li>90-100: A</li>
                            <li>80-89: B</li>
                            <li>70-79: C</li>
                            <li>60-69: D</li>
                            <li>Below 60: F</li>
                        </ul>
                    </li>
                    <li>The program should handle invalid inputs appropriately</li>
                </ul>
            </div>
        </section>

        <section>
            <h2>George Polya's 4-Step Problem Solving Method</h2>
            <p>
                We'll solve this problem using George Polya's four-step approach to problem solving:
            </p>
            
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="400" fill="#fafafa" rx="8"/>
    
    <line x1="516.6666666666667" y1="80" x2="283.33333333333337" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="283.33333333333337" y1="200" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="516.6666666666667" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="516.6666666666667" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[3. Execute the Plan] C </text>
    <rect x="173.33333333333337" y="55" width="220" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">1. Understand the Problem</text>
    <rect x="442.66666666666674" y="55" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">2. Devise a Plan</text>
    <rect x="197.33333333333337" y="175" width="172" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">3. Execute the Plan</text>
    <rect x="410.66666666666674" y="175" width="212" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">4. Look Back and Reflect</text>
</svg>
</div>
        </section>

        <section>
            <h2>Step 1: Understand the Problem</h2>
            <p>
                Before writing any code, let's make sure we understand exactly what we're being asked to do.
            </p>
            
            <div class="understanding">
                <h3>Inputs and Outputs</h3>
                <ul>
                    <li><strong>Input:</strong> A numerical score between 0 and 100</li>
                    <li><strong>Output:</strong> A letter grade (A, B, C, D, or F)</li>
                </ul>
                
                <h3>Grading Scale</h3>
                <p>
                    We need to map numerical ranges to specific letter grades:
                </p>
                
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 1000" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="1000" fill="#fafafa" rx="8"/>
    
    <rect x="51.636363636363626" y="55" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="113.63636363636363" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Score: 90-100</text>
    <rect x="117.27272727272725" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="177.27272727272725" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Grade: A</text>
    <rect x="180.9090909090909" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="240.9090909090909" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Score: 80-89</text>
    <rect x="244.5454545454545" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="304.5454545454545" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Grade: B</text>
    <rect x="308.1818181818182" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="368.1818181818182" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Score: 70-79</text>
    <rect x="371.8181818181818" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="431.8181818181818" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Grade: C</text>
    <rect x="435.45454545454544" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="495.45454545454544" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Score: 60-69</text>
    <rect x="499.090909090909" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="559.090909090909" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Grade: D</text>
    <rect x="562.7272727272727" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="622.7272727272727" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Score: 0-59</text>
    <rect x="626.3636363636364" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="686.3636363636364" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Grade: F</text>
</svg>
</div>
                
                <h3>Edge Cases</h3>
                <ul>
                    <li>What happens if the score is negative?</li>
                    <li>What happens if the score is greater than 100?</li>
                    <li>What happens if the input isn't a number?</li>
                </ul>
                <p>
                    Our program should handle these situations gracefully with appropriate error messages.
                </p>
            </div>
        </section>

        <section>
            <h2>Step 2: Devise a Plan</h2>
            <p>
                Now that we understand the problem, let's create a plan to solve it. We'll break this down into a series of steps.
            </p>
            
            <div class="plan">
                <h3>Whiteboard Plan</h3>
                <ol>
                    <li>Create a PHP file to hold our code</li>
                    <li>Get the score input (from form, command line, or directly in code)</li>
                    <li>Validate the input (check if it's a number and in the valid range)</li>
                    <li>Use conditional statements to determine the grade:
                        <ul>
                            <li>If score is 90-100, grade is A</li>
                            <li>If score is 80-89, grade is B</li>
                            <li>If score is 70-79, grade is C</li>
                            <li>If score is 60-69, grade is D</li>
                            <li>If score is below 60, grade is F</li>
                        </ul>
                    </li>
                    <li>Display the result</li>
                </ol>
                
                <h3>Solution Approaches</h3>
                <p>
                    We can implement this solution using different conditional structures in PHP:
                </p>
                <ul>
                    <li><strong>if-elseif-else statements:</strong> Most straightforward approach</li>
                    <li><strong>switch statement:</strong> An alternative, though less ideal for ranges</li>
                    <li><strong>Array mapping:</strong> A more advanced approach</li>
                </ul>
                
                <h3>Pseudocode</h3>
                <pre>###CODE_BLOCK_0###</pre>
            </div>
        </section>

        <section>
            <h2>Step 3: Execute the Plan</h2>
            <p>
                Now let's implement our plan as actual PHP code. We'll start with the simplest approach using if-elseif-else statements.
            </p>
            
            <div class="implementation">
                <h3>Basic Solution: if-elseif-else</h3>
                <p>
                    Create a file named <code>grade_calculator.php</code> in your web server's root directory (e.g., <code>/var/www/html/</code> on Linux or <code>C:\xampp\htdocs\</code> on Windows with XAMPP).
                </p>
                <pre>###CODE_BLOCK_4###</pre>
                
                <h3>Code Explanation</h3>
                <ul>
                    <li>We create a simple HTML form that accepts a score input</li>
                    <li>When the form is submitted, we process it in PHP</li>
                    <li>We validate the input to ensure it's a number between 0 and 100</li>
                    <li>We use if-elseif-else statements to determine the grade based on the score</li>
                    <li>Finally, we display the result to the user</li>
                </ul>
                
                <div class="analogy">
                    <h3>School Bell Analogy</h3>
                    <p>
                        Think of our conditional statements like a school bell system. When the bell rings (condition is checked), 
                        students (the program) know which class to go to (which code block to execute). 
                        Just like a school might have different bells for different periods, our program has different conditions for different grade ranges.
                    </p>
                </div>
                
                <h3>Alternative Solution: Function-Based Approach</h3>
                <p>
                    Let's create a more structured solution using a function. Create a file named <code>grade_calculator_function.php</code>:
                </p>
                <pre>###CODE_BLOCK_6###</pre>
                
                <h3>Advanced Solution: Array Mapping</h3>
                <p>
                    For a more advanced solution, we can use arrays and functions. Create <code>grade_calculator_advanced.php</code>:
                </p>
                <pre>###CODE_BLOCK_8###</pre>
                
                <h3>Visual Representation of Grade Calculation</h3>
                <svg viewBox="0 0 600 300" xmlns="http://www.w3.org/2000/svg">
                    <!-- Score scale -->
                    <rect x="50" y="100" width="500" height="40" fill="#f0f0f0" stroke="#333" />
                    
                    <!-- Grade sections -->
                    <rect x="50" y="100" width="100" height="40" fill="#ff9999" stroke="#333" />
                    <rect x="150" y="100" width="100" height="40" fill="#ffcc99" stroke="#333" />
                    <rect x="250" y="100" width="100" height="40" fill="#ffff99" stroke="#333" />
                    <rect x="350" y="100" width="100" height="40" fill="#99ff99" stroke="#333" />
                    <rect x="450" y="100" width="100" height="40" fill="#99ccff" stroke="#333" />
                    
                    <!-- Grade labels -->
                    <text x="100" y="125" text-anchor="middle" font-size="16">F</text>
                    <text x="200" y="125" text-anchor="middle" font-size="16">D</text>
                    <text x="300" y="125" text-anchor="middle" font-size="16">C</text>
                    <text x="400" y="125" text-anchor="middle" font-size="16">B</text>
                    <text x="500" y="125" text-anchor="middle" font-size="16">A</text>
                    
                    <!-- Score labels -->
                    <text x="50" y="160" text-anchor="middle" font-size="12">0</text>
                    <text x="150" y="160" text-anchor="middle" font-size="12">60</text>
                    <text x="250" y="160" text-anchor="middle" font-size="12">70</text>
                    <text x="350" y="160" text-anchor="middle" font-size="12">80</text>
                    <text x="450" y="160" text-anchor="middle" font-size="12">90</text>
                    <text x="550" y="160" text-anchor="middle" font-size="12">100</text>
                    
                    <!-- Example score pointer -->
                    <polygon points="325,80 315,60 335,60" fill="#333" />
                    <text x="325" y="50" text-anchor="middle" font-size="14">Score: 75 = C</text>
                </svg>
            </div>
        </section>

        <section>
            <h2>Step 4: Look Back and Reflect</h2>
            <p>
                Now that we've implemented our solution, let's review our work and consider improvements or extensions.
            </p>
            
            <div class="reflection">
                <h3>Testing the Solution</h3>
                <p>
                    We should test our program with various inputs to ensure it works correctly:
                </p>
                <ul>
                    <li>Test with valid scores in each grade range (e.g., 95, 85, 75, 65, 55)</li>
                    <li>Test with boundary values (e.g., 90, 89, 80, 79, etc.)</li>
                    <li>Test with invalid inputs (e.g., -10, 110, "abc")</li>
                </ul>
                
                <h3>Possible Improvements</h3>
                <p>
                    Here are some ways we could enhance our grade calculator:
                </p>
                <ul>
                    <li>Add plus/minus grades (e.g., A+, A-, B+, etc.)</li>
                    <li>Include descriptive feedback for each grade</li>
                    <li>Support multiple grading scales (e.g., 7-point scale, 4.0 GPA scale)</li>
                    <li>Calculate final grades from multiple assignments with different weights</li>
                    <li>Store grade history in a database</li>
                    <li>Generate visual reports using graphs or charts</li>
                </ul>
                
                <div class="real-world">
                    <h3>Real-World Applications</h3>
                    <p>
                        This grade calculator is a simplified version of what educational institutions use. Real-world grading systems often include:
                    </p>
                    <ul>
                        <li>Learning Management Systems (LMS) like Canvas, Blackboard, or Moodle</li>
                        <li>Student Information Systems that track academic progress</li>
                        <li>Grade books that teachers use to record and calculate grades</li>
                        <li>Progress report generators for parent-teacher conferences</li>
                    </ul>
                </div>
                
                <h3>What We've Learned</h3>
                <ul>
                    <li>How to use conditional statements to make decisions in PHP</li>
                    <li>How to validate and process user input</li>
                    <li>Different approaches to solve the same problem (procedural, functional, data-driven)</li>
                    <li>How to create a simple web application with a form and processing logic</li>
                </ul>
            </div>
        </section>

        <section>
            <h2>Additional Resources and Practice</h2>
            <div class="resources">
                <h3>Further Learning</h3>
                <ul>
                    <li><a href="https://www.php.net/manual/en/control-structures.if.php" target="_blank">PHP Manual: If Statements</a></li>
                    <li><a href="https://www.php.net/manual/en/control-structures.elseif.php" target="_blank">PHP Manual: Elseif Statements</a></li>
                    <li><a href="https://www.php.net/manual/en/function.is-numeric.php" target="_blank">PHP Manual: is_numeric()</a></li>
                    <li><a href="https://www.php.net/manual/en/language.operators.comparison.php" target="_blank">PHP Manual: Comparison Operators</a></li>
                </ul>
                
                <h3>Practice Challenges</h3>
                <ol>
                    <li>Modify the grade calculator to include plus/minus grades (e.g., 97-100: A+, 94-96: A, 90-93: A-, etc.)</li>
                    <li>Create a program that calculates the final grade based on multiple assignments with different weights</li>
                    <li>Build a class grade book that calculates statistics (average, highest, lowest) for a set of student scores</li>
                    <li>Implement a GPA calculator that converts letter grades to a 4.0 scale</li>
                </ol>
            </div>
        </section>
            </div>
<!-- Lesson Navigation -->
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
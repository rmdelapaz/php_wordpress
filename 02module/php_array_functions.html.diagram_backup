<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>PHP Array Functions: Powerful Tools for Data Manipulation - PHP WordPress Course</title>
<meta content="Use built-in array manipulation functions." name="description"/>
<meta content="PHP, WordPress, web development, php, array, functions" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>
</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Array Functions</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 5</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/php_indexed_array.html">Indexed Arrays</a></li>
<li><a class="sidebar-link" href="/02module/php_associative_arrays.html">Associative Arrays</a></li>
<li><a class="sidebar-link" href="/02module/php_multidimensional_arrays.html">Multidimensional Arrays</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/php_array_functions.html">Array Functions</a></li>
<li><a class="sidebar-link" href="/02module/php_array_sorting.html">Array Sorting</a></li>
<li><a class="sidebar-link" href="/02module/php_array_iteration.html">Array Iteration</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_array_creation_manipulation.html">Homework: Arrays</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_for_loops.html">← Prev: Session 4: Loops</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_function_declaration_and_calling.html">Next: Session 6: Functions →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>PHP Array Functions: Powerful Tools for Data Manipulation</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 45 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: Arrays and Data Manipulation</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Create and use PHP functions</li>
<li>Understand function parameters and returns</li>
<li>Master variable scope in functions</li>
<li>Build reusable code components</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="intro">
            <h2>Understanding the Power of PHP Arrays</h2>
            <p>Welcome to our deep dive into PHP array functions! Arrays are the workhorses of PHP programming - they're like the Swiss Army knives in your development toolkit. Think of PHP arrays as organized containers that can hold multiple values under a single variable name, similar to how a filing cabinet organizes folders or how a toolbox stores different tools.</p>
            
            <p>In today's digital landscape, data is everywhere. As web developers, our job is to collect, organize, manipulate, and present this data effectively. PHP arrays and their associated functions give us the power to do exactly that - whether we're building e-commerce platforms, content management systems like WordPress, or data-driven applications.</p>
        </section>

        <section class="array-types">
            <h2>Types of PHP Arrays: A Quick Review</h2>
            
            <p>Before we dive into the powerful array functions PHP offers, let's quickly refresh our understanding of the three main types of arrays you'll be working with:</p>
            
            <div class="array-type">
                <h3>Indexed Arrays</h3>
                <p>These arrays use numeric indexes to access values. Think of them as numbered shelves in a bookcase - each position has a specific number to identify it.</p>
                <div class="code-example">
                    <pre><code>// Indexed array example
$fruits = ["Apple", "Banana", "Cherry", "Dragon fruit"];
echo $fruits[0];  // Outputs: Apple
echo $fruits[2];  // Outputs: Cherry</code></pre>
                </div>
                
                <div class="visualization">
                    
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 800" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="800" fill="#fafafa" rx="8"/>
    
    <rect x="67.77777777777777" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="127.77777777777777" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">0</text>
    <rect x="145.55555555555554" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="205.55555555555554" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Apple</text>
    <rect x="223.33333333333331" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.3333333333333" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">1</text>
    <rect x="301.1111111111111" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="361.1111111111111" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Banana</text>
    <rect x="378.88888888888886" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="438.88888888888886" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">2</text>
    <rect x="456.66666666666663" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666666" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Cherry</text>
    <rect x="534.4444444444443" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="594.4444444444443" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">3</text>
    <rect x="612.2222222222222" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="672.2222222222222" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Dragon fruit</text>
</svg>
</div>
                </div>
            </div>
            
            <div class="array-type">
                <h3>Associative Arrays</h3>
                <p>These arrays use named keys to access values. Think of them as a labeled storage cabinet, where each drawer has a descriptive name rather than just a number.</p>
                <div class="code-example">
                    <pre><code>// Associative array example
$user = [
    "name" => "John Doe",
    "email" => "john@example.com",
    "age" => 28,
    "is_admin" => false
];
echo $user["name"];  // Outputs: John Doe
echo $user["age"];   // Outputs: 28</code></pre>
                </div>
                
                <div class="visualization">
                    
<div class="mermaid-converted" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
    <div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram</div>
    <svg viewBox="0 0 800 800" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;">
    
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="800" fill="#fafafa" rx="8"/>
    
    <rect x="67.77777777777777" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="127.77777777777777" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">name</text>
    <rect x="145.55555555555554" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="205.55555555555554" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">John Doe</text>
    <rect x="223.33333333333331" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.3333333333333" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">email</text>
    <rect x="287.1111111111111" y="55" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="361.1111111111111" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">john@example.com</text>
    <rect x="378.88888888888886" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="438.88888888888886" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">age</text>
    <rect x="456.66666666666663" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666666" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">28</text>
    <rect x="534.4444444444443" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="594.4444444444443" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">is_admin</text>
    <rect x="612.2222222222222" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="672.2222222222222" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">false</text>
</svg>
</div>
                </div>
            </div>
            
            <div class="array-type">
                <h3>Multidimensional Arrays</h3>
                <p>These are arrays containing other arrays. Think of them as filing cabinets with drawers that contain folders, which in turn contain documents - they organize data in multiple layers.</p>
                <div class="code-example">
                    <pre><code>// Multidimensional array example
$employees = [
    [
        "name" => "Sarah Johnson",
        "position" => "Web Developer",
        "skills" => ["PHP", "JavaScript", "MySQL"]
    ],
    [
        "name" => "Mark Williams",
        "position" => "Designer",
        "skills" => ["Photoshop", "Illustrator", "UX Design"]
    ]
];
echo $employees[0]["name"];        // Outputs: Sarah Johnson
echo $employees[1]["skills"][0];   // Outputs: Photoshop</code></pre>
                </div>
                
                <div class="visualization">
                    <svg width="700" height="300" xmlns="http://www.w3.org/2000/svg">
                        <!-- Main container -->
                        <rect x="10" y="10" width="680" height="280" fill="#f5f5f5" stroke="#333" stroke-width="2" rx="5"/>
                        <text x="20" y="30" font-family="Arial" font-size="14" font-weight="bold">$employees array</text>
                        
                        <!-- Employee 0 -->
                        <rect x="40" y="50" width="300" height="200" fill="#e6f7ff" stroke="#333" stroke-width="2" rx="5"/>
                        <text x="50" y="70" font-family="Arial" font-size="12" font-weight="bold">Index 0</text>
                        
                        <!-- Employee 0 properties -->
                        <rect x="60" y="80" width="270" height="30" fill="#d1e7dd" stroke="#333" rx="3"/>
                        <text x="70" y="100" font-family="Arial" font-size="12">"name" => "Sarah Johnson"</text>
                        
                        <rect x="60" y="120" width="270" height="30" fill="#d1e7dd" stroke="#333" rx="3"/>
                        <text x="70" y="140" font-family="Arial" font-size="12">"position" => "Web Developer"</text>
                        
                        <rect x="60" y="160" width="270" height="30" fill="#d1e7dd" stroke="#333" rx="3"/>
                        <text x="70" y="180" font-family="Arial" font-size="12">"skills" => ["PHP", "JavaScript", "MySQL"]</text>
                        
                        <!-- Employee 1 -->
                        <rect x="360" y="50" width="300" height="200" fill="#e6f7ff" stroke="#333" stroke-width="2" rx="5"/>
                        <text x="370" y="70" font-family="Arial" font-size="12" font-weight="bold">Index 1</text>
                        
                        <!-- Employee 1 properties -->
                        <rect x="380" y="80" width="270" height="30" fill="#d1e7dd" stroke="#333" rx="3"/>
                        <text x="390" y="100" font-family="Arial" font-size="12">"name" => "Mark Williams"</text>
                        
                        <rect x="380" y="120" width="270" height="30" fill="#d1e7dd" stroke="#333" rx="3"/>
                        <text x="390" y="140" font-family="Arial" font-size="12">"position" => "Designer"</text>
                        
                        <rect x="380" y="160" width="270" height="30" fill="#d1e7dd" stroke="#333" rx="3"/>
                        <text x="390" y="180" font-family="Arial" font-size="12">"skills" => ["Photoshop", "Illustrator", "UX"]</text>
                    </svg>
                </div>
            </div>
        </section>

        <section class="essential-array_functions">
            <h2>Essential Array Functions: Your Developer Toolkit</h2>
            
            <p>Now that we've refreshed our understanding of array types, let's explore the powerful functions PHP provides to manipulate them. Think of these functions as specialized tools designed for specific jobs - just as a carpenter has specific tools for cutting, measuring, and joining wood.</p>
            
            <div class="function-group">
                <h3>Array Information Functions</h3>
                <p>These functions help you understand and inspect your arrays - like gauges and measuring tools that tell you about your data.</p>
                
                <div class="function">
                    <h4>count() - Counting Array Elements</h4>
                    <p>The <code>count()</code> function returns the number of elements in an array. It's like quickly counting how many items are in a container.</p>
                    <div class="code-example">
                        <pre><code>$fruits = ["Apple", "Banana", "Cherry", "Dragon fruit"];
echo count($fruits);  // Outputs: 4

$nested_array = [1, 2, [3, 4, 5]];
echo count($nested_array);  // Outputs: 3
echo count($nested_array, COUNT_RECURSIVE);  // Outputs: 5 (counts nested elements too)</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> When displaying pagination for a product catalog, you might use <code>count()</code> to determine how many pages are needed based on the total number of products.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>sizeof() - An Alias of count()</h4>
                    <p><code>sizeof()</code> is identical to <code>count()</code> - it's simply an alternative name for the same function. Some developers prefer it when working with arrays because it mimics naming conventions from other programming languages.</p>
                    <div class="code-example">
                        <pre><code>$cart_items = ["Laptop", "Mouse", "Keyboard"];
echo sizeof($cart_items);  // Outputs: 3</code></pre>
                    </div>
                </div>
                
                <div class="function">
                    <h4>empty() - Checking if an Array is Empty</h4>
                    <p>The <code>empty()</code> function checks if an array (or variable) is empty. It's like checking if a container has anything in it before you try to use its contents.</p>
                    <div class="code-example">
                        <pre><code>$empty_array = [];
if (empty($empty_array)) {
    echo "The array is empty";
}

// A practical example with a shopping cart
$cart = [];
if (empty($cart)) {
    echo "Your shopping cart is empty. Continue shopping!";
} else {
    echo "You have " . count($cart) . " items in your cart.";
}</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In WordPress plugin development, you might check if an array of plugin settings is empty before applying default values.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>isset() - Checking if an Array Key Exists</h4>
                    <p>The <code>isset()</code> function checks if a specific key exists in an array and is not NULL. It's like checking if a specific labeled drawer exists in a filing cabinet.</p>
                    <div class="code-example">
                        <pre><code>$user = [
    "name" => "John Doe",
    "email" => "john@example.com"
];

if (isset($user["name"])) {
    echo "User name is set: " . $user["name"];
}

if (!isset($user["phone"])) {
    echo "Phone number is not set!";
}</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> When processing form submissions, use <code>isset()</code> to check if optional fields were filled out before processing them.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_key_exists() - Checking if a Key Exists</h4>
                    <p>Similar to <code>isset()</code>, but <code>array_key_exists()</code> only checks if the key exists, regardless of whether its value is NULL. It's like checking if a label exists on a container, even if the container is empty.</p>
                    <div class="code-example">
                        <pre><code>$settings = [
    "debug_mode" => true,
    "cache_enabled" => false,
    "temp_directory" => null
];

// This returns true
if (array_key_exists("temp_directory", $settings)) {
    echo "Temp directory setting exists";
}

// This returns false because isset() considers null values as "not set"
if (isset($settings["temp_directory"])) {
    echo "This won't be displayed";
}</code></pre>
                    </div>
                    <div class="difference">
                        <p><strong>When to use array_key_exists() vs isset():</strong></p>
                        <ul>
                            <li>Use <code>isset()</code> when you want to check if a key exists AND has a non-null value</li>
                            <li>Use <code>array_key_exists()</code> when you only need to check if the key exists in the array, regardless of its value</li>
                            <li><code>isset()</code> is generally faster but less precise</li>
                        </ul>
                    </div>
                </div>
                
                <div class="function">
                    <h4>in_array() - Checking if a Value Exists</h4>
                    <p>The <code>in_array()</code> function checks if a specific value exists in an array. It's like searching through a stack of papers to find a document with specific content.</p>
                    <div class="code-example">
                        <pre><code>$allowed_roles = ["admin", "editor", "author"];

$user_role = "editor";
if (in_array($user_role, $allowed_roles)) {
    echo "Access granted!";
} else {
    echo "Access denied!";
}

// Strict comparison (type checking)
$numbers = [1, 2, "3", 4];
var_dump(in_array(3, $numbers));       // Returns true (loose comparison)
var_dump(in_array(3, $numbers, true)); // Returns false (strict comparison)</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> When building an access control system, use <code>in_array()</code> to check if a user's role is in a list of roles authorized to access a specific feature.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_search() - Finding a Value's Position</h4>
                    <p>The <code>array_search()</code> function searches for a value in an array and returns its key if found. It's like not only finding a document but noting which folder it was stored in.</p>
                    <div class="code-example">
                        <pre><code>$fruits = ["Apple", "Banana", "Cherry", "Dragon fruit"];
$position = array_search("Cherry", $fruits);
echo $position;  // Outputs: 2

// In an associative array
$employees = [
    "E001" => "John Doe",
    "E002" => "Jane Smith",
    "E003" => "Robert Johnson"
];

$employee_id = array_search("Jane Smith", $employees);
echo $employee_id;  // Outputs: E002</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In an e-commerce application, use <code>array_search()</code> to find the position of a product in a list of featured products to determine its display order.</p>
                    </div>
                </div>
            </div>
            
            <div class="function-group">
                <h3>Array Manipulation Functions</h3>
                <p>These functions allow you to modify and transform arrays - like tools that reshape and reorganize your data containers.</p>
                
                <div class="function">
                    <h4>array_push() - Adding Elements to the End</h4>
                    <p>The <code>array_push()</code> function adds one or more elements to the end of an array. It's like adding new items to the back of a queue or the top of a stack.</p>
                    <div class="code-example">
                        <pre><code>$technologies = ["PHP", "HTML", "CSS"];
array_push($technologies, "JavaScript", "MySQL");
print_r($technologies);
// Outputs: Array ( [0] => PHP [1] => HTML [2] => CSS [3] => JavaScript [4] => MySQL )

// Alternative syntax using the array operator
$technologies[] = "Docker";
print_r($technologies);
// Outputs: Array ( [0] => PHP [1] => HTML [2] => CSS [3] => JavaScript [4] => MySQL [5] => Docker )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> When users browse products on an e-commerce site, use <code>array_push()</code> to add products to their recently viewed items list.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_pop() - Removing the Last Element</h4>
                    <p>The <code>array_pop()</code> function removes the last element from an array and returns it. It's like taking the top item off a stack.</p>
                    <div class="code-example">
                        <pre><code>$task_queue = ["Research", "Design", "Development", "Testing", "Deployment"];
$current_task = array_pop($task_queue);
echo "Current task: " . $current_task; // Outputs: Current task: Deployment
print_r($task_queue);
// Outputs: Array ( [0] => Research [1] => Design [2] => Development [3] => Testing )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In a task management application, use <code>array_pop()</code> to remove and retrieve the most recently added task from a stack of pending tasks.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_unshift() - Adding Elements to the Beginning</h4>
                    <p>The <code>array_unshift()</code> function adds one or more elements to the beginning of an array. It's like adding new items to the front of a queue.</p>
                    <div class="code-example">
                        <pre><code>$notifications = ["New message from Jane", "Meeting reminder"];
array_unshift($notifications, "System update required", "New login detected");
print_r($notifications);
// Outputs: Array ( [0] => System update required [1] => New login detected
//                  [2] => New message from Jane [3] => Meeting reminder )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In a news feed or notification system, use <code>array_unshift()</code> to add new notifications to the top of the list so they appear first.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_shift() - Removing the First Element</h4>
                    <p>The <code>array_shift()</code> function removes the first element from an array and returns it. It's like taking the first person out of a waiting line.</p>
                    <div class="code-example">
                        <pre><code>$customer_queue = ["Alice", "Bob", "Charlie", "David"];
$current_customer = array_shift($customer_queue);
echo "Now serving: " . $current_customer; // Outputs: Now serving: Alice
print_r($customer_queue);
// Outputs: Array ( [0] => Bob [1] => Charlie [2] => David )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In a job queue system, use <code>array_shift()</code> to remove and process the oldest job first (FIFO - First In, First Out).</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_merge() - Combining Arrays</h4>
                    <p>The <code>array_merge()</code> function combines two or more arrays into a single array. It's like pouring the contents of multiple containers into one larger container.</p>
                    <div class="code-example">
                        <pre><code>$frontend_skills = ["HTML", "CSS", "JavaScript"];
$backend_skills = ["PHP", "MySQL", "Node.js"];

$all_skills = array_merge($frontend_skills, $backend_skills);
print_r($all_skills);
// Outputs: Array ( [0] => HTML [1] => CSS [2] => JavaScript 
//                  [3] => PHP [4] => MySQL [5] => Node.js )

// With associative arrays - note that same keys will be overwritten
$default_settings = [
    "theme" => "light",
    "notifications" => true,
    "language" => "en"
];

$user_settings = [
    "theme" => "dark",
    "auto_save" => true
];

$merged_settings = array_merge($default_settings, $user_settings);
print_r($merged_settings);
// Outputs: Array ( [theme] => dark [notifications] => true 
//                  [language] => en [auto_save] => true )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> When building a WordPress theme, use <code>array_merge()</code> to combine default theme settings with user-customized settings.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_combine() - Creating Key-Value Pairs</h4>
                    <p>The <code>array_combine()</code> function creates a new array using one array for keys and another for values. It's like taking two separate lists - one of labels and one of items - and pairing them together.</p>
                    <div class="code-example">
                        <pre><code>$countries = ["USA", "Canada", "UK", "Australia"];
$capitals = ["Washington D.C.", "Ottawa", "London", "Canberra"];

$country_capitals = array_combine($countries, $capitals);
print_r($country_capitals);
// Outputs: Array ( [USA] => Washington D.C. [Canada] => Ottawa 
//                  [UK] => London [Australia] => Canberra )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> When processing form data, use <code>array_combine()</code> to map form field names to their submitted values for easier processing.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_slice() - Extracting a Portion of an Array</h4>
                    <p>The <code>array_slice()</code> function extracts a portion of an array starting at a specified position. It's like cutting out a section from a long list.</p>
                    <div class="code-example">
                        <pre><code>$months = ["January", "February", "March", "April", "May", "June", 
          "July", "August", "September", "October", "November", "December"];

// Get summer months (starting from index 5, get 3 elements)
$summer_months = array_slice($months, 5, 3);
print_r($summer_months);
// Outputs: Array ( [0] => June [1] => July [2] => August )

// Get last quarter (starting from index 8)
$last_quarter = array_slice($months, 8);
print_r($last_quarter);
// Outputs: Array ( [0] => September [1] => October [2] => November [3] => December )

// Using negative offset to count from the end
$last_two_months = array_slice($months, -2);
print_r($last_two_months);
// Outputs: Array ( [0] => November [1] => December )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> When implementing pagination for a blog, use <code>array_slice()</code> to extract just the posts needed for the current page from the full list of posts.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_splice() - Removing and Replacing Elements</h4>
                    <p>The <code>array_splice()</code> function removes and replaces elements from an array. It's like surgical editing of a list - cutting out sections and optionally inserting new content in their place.</p>
                    <div class="code-example">
                        <pre><code>$project_phases = ["Planning", "Design", "Development", "Testing", "Deployment", "Maintenance"];

// Remove phases and save them
$development_phases = array_splice($project_phases, 2, 2);
print_r($development_phases);
// Outputs: Array ( [0] => Development [1] => Testing )

print_r($project_phases);
// Outputs: Array ( [0] => Planning [1] => Design [2] => Deployment [3] => Maintenance )

// Remove and replace
$schedule = ["Monday", "Tuesday", "Thursday", "Friday"];
array_splice($schedule, 2, 0, ["Wednesday"]); // Insert without removing
print_r($schedule);
// Outputs: Array ( [0] => Monday [1] => Tuesday [2] => Wednesday [3] => Thursday [4] => Friday )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In a content management system, use <code>array_splice()</code> to update a section of a document while preserving the rest of the content structure.</p>
                    </div>
                </div>
            </div>
            
            <div class="function-group">
                <h3>Array Transformation Functions</h3>
                <p>These functions help you reshape and transform your data - like tools that convert raw materials into finished products.</p>
                
                <div class="function">
                    <h4>array_map() - Applying a Function to Each Element</h4>
                    <p>The <code>array_map()</code> function applies a callback function to each element of an array and returns a new array with the results. It's like an assembly line that performs the same operation on each item that passes through it.</p>
                    <div class="code-example">
                        <pre><code>// Apply a simple transformation
$numbers = [1, 2, 3, 4, 5];
$squared = array_map(function($n) {
    return $n * $n;
}, $numbers);
print_r($squared);
// Outputs: Array ( [0] => 1 [1] => 4 [2] => 9 [3] => 16 [4] => 25 )

// Format strings
$names = ["john doe", "jane smith", "robert johnson"];
$formatted_names = array_map(function($name) {
    return ucwords($name); // Capitalize each word
}, $names);
print_r($formatted_names);
// Outputs: Array ( [0] => John Doe [1] => Jane Smith [2] => Robert Johnson )

// Using arrow functions (PHP 7.4+)
$prices = [9.99, 19.99, 29.99, 39.99];
$discounted_prices = array_map(fn($price) => $price * 0.8, $prices);
print_r($discounted_prices);
// Outputs: Array ( [0] => 7.992 [1] => 15.992 [2] => 23.992 [3] => 31.992 )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> When displaying product data from a database, use <code>array_map()</code> to format prices, capitalize product names, or convert timestamps to readable dates before rendering them on a page.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_filter() - Filtering Array Elements</h4>
                    <p>The <code>array_filter()</code> function filters elements of an array using a callback function. It's like a sieve that only lets certain items pass through based on specific criteria.</p>
                    <div class="code-example">
                        <pre><code>// Filter out odd numbers
$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
$even_numbers = array_filter($numbers, function($n) {
    return $n % 2 === 0;
});
print_r($even_numbers);
// Outputs: Array ( [1] => 2 [3] => 4 [5] => 6 [7] => 8 [9] => 10 )

// Filter out empty strings and nulls
$user_inputs = ["apple", "", null, "banana", "0", 0, false, "cherry"];
$valid_inputs = array_filter($user_inputs);
print_r($valid_inputs);
// Outputs: Array ( [0] => apple [3] => banana [4] => 0 [6] => cherry )

// Filter an associative array
$products = [
    ["name" => "Laptop", "price" => 999, "in_stock" => true],
    ["name" => "Headphones", "price" => 99, "in_stock" => false],
    ["name" => "Keyboard", "price" => 59, "in_stock" => true],
    ["name" => "Monitor", "price" => 299, "in_stock" => true]
];

$in_stock_products = array_filter($products, function($product) {
    return $product["in_stock"] === true;
});
print_r($in_stock_products);</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In an e-commerce website, use <code>array_filter()</code> to show only products that are in stock or within a certain price range based on user filters.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_reduce() - Reducing an Array to a Single Value</h4>
                    <p>The <code>array_reduce()</code> function applies a callback function to the elements of an array to reduce it to a single value. It's like a funnel that combines multiple inputs into one output.</p>
                    <div class="code-example">
                        <pre><code>// Sum all numbers
$numbers = [1, 2, 3, 4, 5];
$sum = array_reduce($numbers, function($carry, $item) {
    return $carry + $item;
}, 0);
echo $sum; // Outputs: 15

// Calculate the total price of items in a cart
$cart_items = [
    ["name" => "Laptop", "price" => 999, "quantity" => 1],
    ["name" => "Mouse", "price" => 25, "quantity" => 2],
    ["name" => "Keyboard", "price" => 59, "quantity" => 1]
];

$total_price = array_reduce($cart_items, function($carry, $item) {
    return $carry + ($item["price"] * $item["quantity"]);
}, 0);
echo "Total: $" . $total_price; // Outputs: Total: $1108

// Joining strings
$words = ["PHP", "is", "awesome"];
$sentence = array_reduce($words, function($carry, $word) {
    return $carry . ($carry ? " " : "") . $word;
}, "");
echo $sentence; // Outputs: PHP is awesome</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In a WordPress plugin that tracks user activity, use <code>array_reduce()</code> to calculate total time spent on the site from multiple session duration records.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_keys() and array_values() - Extracting Keys and Values</h4>
                    <p>These functions extract all the keys or all the values from an array. It's like separating the labels from the items they label.</p>
                    <div class="code-example">
                        <pre><code>$user = [
    "id" => 1001,
    "username" => "johndoe",
    "email" => "john@example.com",
    "active" => true
];

// Get all keys
$fields = array_keys($user);
print_r($fields);
// Outputs: Array ( [0] => id [1] => username [2] => email [3] => active )

// Get all values
$values = array_values($user);
print_r($values);
// Outputs: Array ( [0] => 1001 [1] => johndoe [2] => john@example.com [3] => 1 )

// Common use case: Reset array keys after filtering
$numbers = [10, 25, 3, 42, 8];
$filtered = array_filter($numbers, function($n) {
    return $n > 10;
});
print_r($filtered);
// Outputs: Array ( [1] => 25 [3] => 42 ) - Note the preserved original keys

$filtered_reindexed = array_values($filtered);
print_r($filtered_reindexed);
// Outputs: Array ( [0] => 25 [1] => 42 ) - Reindexed with sequential keys</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> When building a database query in WordPress, use <code>array_keys()</code> to extract field names from form data to construct the columns part of an INSERT statement.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>array_flip() - Exchanging Keys and Values</h4>
                    <p>The <code>array_flip()</code> function exchanges keys with their associated values in an array. It's like turning a dictionary inside out - making the definitions into entries and the entries into definitions.</p>
                    <div class="code-example">
                        <pre><code>$country_codes = [
    "US" => "United States",
    "CA" => "Canada",
    "UK" => "United Kingdom",
    "AU" => "Australia"
];

$code_lookup = array_flip($country_codes);
print_r($code_lookup);
// Outputs: Array ( [United States] => US [Canada] => CA 
//                  [United Kingdom] => UK [Australia] => AU )

// Practical example - checking if a value exists in a specific position
$allowed_positions = ["admin", "editor", "contributor"];
$position_map = array_flip($allowed_positions);

$user_position = "editor";
if (isset($position_map[$user_position])) {
    echo "Valid position!";
    echo "Position index: " . $position_map[$user_position]; // Outputs: Position index: 1
}</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In a language translation system, use <code>array_flip()</code> to create reverse lookup tables that allow translation in both directions (e.g., English to Spanish and Spanish to English).</p>
                    </div>
                </div>
            </div>
            
            <div class="function-group">
                <h3>Array Sorting Functions</h3>
                <p>These functions help you organize your array elements in a specific order - like organizing items on shelves in a store by different criteria.</p>
                
                <div class="function">
                    <h4>sort() and rsort() - Sorting Arrays</h4>
                    <p>The <code>sort()</code> function sorts an array in ascending order, while <code>rsort()</code> sorts in descending order. It's like arranging items from smallest to largest or vice versa.</p>
                    <div class="code-example">
                        <pre><code>// Sorting numbers
$scores = [85, 92, 78, 95, 88];
sort($scores);
print_r($scores);
// Outputs: Array ( [0] => 78 [1] => 85 [2] => 88 [3] => 92 [4] => 95 )

rsort($scores);
print_r($scores);
// Outputs: Array ( [0] => 95 [1] => 92 [2] => 88 [3] => 85 [4] => 78 )

// Sorting strings
$fruits = ["orange", "apple", "banana", "grape"];
sort($fruits);
print_r($fruits);
// Outputs: Array ( [0] => apple [1] => banana [2] => grape [3] => orange )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In a WordPress archive page, use <code>sort()</code> to arrange posts alphabetically by title when the user selects "A-Z" sorting.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>asort() and arsort() - Sorting Associative Arrays by Value</h4>
                    <p>The <code>asort()</code> function sorts an associative array by values while preserving key associations. The <code>arsort()</code> function does the same but in descending order. It's like sorting items on shelves while keeping their labels attached.</p>
                    <div class="code-example">
                        <pre><code>// Sorting product prices
$products = [
    "laptop" => 999,
    "phone" => 699,
    "tablet" => 499,
    "watch" => 299
];

// Sort by price (ascending)
asort($products);
print_r($products);
// Outputs: Array ( [watch] => 299 [tablet] => 499 [phone] => 699 [laptop] => 999 )

// Sort by price (descending)
arsort($products);
print_r($products);
// Outputs: Array ( [laptop] => 999 [phone] => 699 [tablet] => 499 [watch] => 299 )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In an e-commerce product catalog, use <code>asort()</code> or <code>arsort()</code> to arrange products by price while maintaining the product identifiers as keys.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>ksort() and krsort() - Sorting Associative Arrays by Key</h4>
                    <p>The <code>ksort()</code> function sorts an associative array by keys in ascending order, while <code>krsort()</code> sorts by keys in descending order. It's like organizing a filing cabinet alphabetically by folder names.</p>
                    <div class="code-example">
                        <pre><code>// Sorting configuration by option name
$config = [
    "timezone" => "UTC",
    "language" => "en",
    "debug_mode" => false,
    "api_key" => "abc123"
];

// Sort by configuration option name (ascending)
ksort($config);
print_r($config);
// Outputs: Array ( [api_key] => abc123 [debug_mode] => [language] => en [timezone] => UTC )

// Sort by configuration option name (descending)
krsort($config);
print_r($config);
// Outputs: Array ( [timezone] => UTC [language] => en [debug_mode] => [api_key] => abc123 )</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In a WordPress settings page, use <code>ksort()</code> to display configuration options in alphabetical order for easier navigation.</p>
                    </div>
                </div>
                
                <div class="function">
                    <h4>usort(), uasort(), and uksort() - Custom Sorting</h4>
                    <p>These functions allow you to sort arrays using your own comparison function. It's like creating custom sorting rules for specialized collections.</p>
                    <div class="code-example">
                        <pre><code>// Sorting users by last name
$users = [
    ["name" => "John Smith", "age" => 35],
    ["name" => "Jane Doe", "age" => 28],
    ["name" => "Robert Johnson", "age" => 42],
    ["name" => "Lisa Brown", "age" => 31]
];

// Custom sorting by last name
usort($users, function($a, $b) {
    // Extract last names
    $last_name_a = explode(" ", $a["name"])[1];
    $last_name_b = explode(" ", $b["name"])[1];
    
    // Compare last names
    return strcmp($last_name_a, $last_name_b);
});

print_r($users);
// Outputs users sorted by last name: Brown, Doe, Johnson, Smith

// Sorting complex data with uasort (preserves keys)
$movies = [
    "movie1" => ["title" => "The Matrix", "year" => 1999, "rating" => 8.7],
    "movie2" => ["title" => "Inception", "year" => 2010, "rating" => 8.8],
    "movie3" => ["title" => "Interstellar", "year" => 2014, "rating" => 8.6],
    "movie4" => ["title" => "The Dark Knight", "year" => 2008, "rating" => 9.0]
];

// Sort by rating
uasort($movies, function($a, $b) {
    return $b["rating"] <=> $a["rating"]; // Descending order
});

print_r($movies);
// Outputs movies sorted by rating (highest first), preserving the movie1, movie2, etc. keys</code></pre>
                    </div>
                    <div class="real-world">
                        <p><strong>Real-world application:</strong> In a WordPress plugin for event management, use <code>usort()</code> to sort events by a complex priority calculated from date, importance, and user preferences.</p>
                    </div>
                </div>
            </div>
        </section>

        <section class="practical-applications">
            <h2>Practical Applications in WordPress Development</h2>
            <p>Now that we've explored an arsenal of PHP array functions, let's see how they apply specifically to WordPress development. These examples will help bridge the gap between theory and practice.</p>
            
            <div class="example">
                <h3>Handling WordPress Plugin Options</h3>
                <div class="code-example">
                    <pre><code>// Merge default plugin settings with user settings
function my_plugin_get_settings() {
    $default_settings = [
        'enable_feature_a' => true,
        'enable_feature_b' => false,
        'cache_ttl' => 3600,
        'api_endpoint' => 'https://api.example.com/v1',
        'debug_mode' => false
    ];
    
    // Get user settings from WordPress database
    $user_settings = get_option('my_plugin_settings', []);
    
    // Merge settings, with user settings taking precedence
    return array_merge($default_settings, $user_settings);
}

// Filter settings to include only valid options
function my_plugin_validate_settings($input) {
    $valid_settings = [];
    $allowed_keys = ['enable_feature_a', 'enable_feature_b', 'cache_ttl', 'api_endpoint', 'debug_mode'];
    
    foreach ($input as $key => $value) {
        if (in_array($key, $allowed_keys)) {
            $valid_settings[$key] = $value;
        }
    }
    
    return $valid_settings;
}</code></pre>
                </div>
            </div>
            
            <div class="example">
                <h3>Processing WordPress Custom Post Types</h3>
                <div class="code-example">
                    <pre><code>// Retrieve and process custom post type data
function get_featured_portfolio_items() {
    // Get portfolio posts
    $args = [
        'post_type' => 'portfolio',
        'posts_per_page' => -1,
        'meta_query' => [
            [
                'key' => '_is_featured',
                'value' => '1',
                'compare' => '='
            ]
        ]
    ];
    
    $portfolio_query = new WP_Query($args);
    $portfolio_items = [];
    
    if ($portfolio_query->have_posts()) {
        while ($portfolio_query->have_posts()) {
            $portfolio_query->the_post();
            
            // Build portfolio item data
            $item = [
                'id' => get_the_ID(),
                'title' => get_the_title(),
                'excerpt' => get_the_excerpt(),
                'thumbnail' => get_the_post_thumbnail_url(null, 'medium'),
                'url' => get_permalink(),
                'categories' => []
            ];
            
            // Get categories
            $terms = get_the_terms(get_the_ID(), 'portfolio_category');
            if ($terms && !is_wp_error($terms)) {
                $item['categories'] = array_map(function($term) {
                    return [
                        'id' => $term->term_id,
                        'name' => $term->name,
                        'slug' => $term->slug
                    ];
                }, $terms);
            }
            
            $portfolio_items[] = $item;
        }
        wp_reset_postdata();
    }
    
    // Sort by title alphabetically
    usort($portfolio_items, function($a, $b) {
        return strcmp($a['title'], $b['title']);
    });
    
    return $portfolio_items;
}</code></pre>
                </div>
            </div>
            
            <div class="example">
                <h3>Building a Navigation Menu Filter</h3>
                <div class="code-example">
                    <pre><code>// Filter WordPress navigation menu items
function custom_nav_menu_items($items, $args) {
    // Only modify the main menu
    if ($args->theme_location !== 'primary') {
        return $items;
    }
    
    // Current user role
    $current_user = wp_get_current_user();
    $user_roles = $current_user->ID ? $current_user->roles : ['guest'];
    
    // Filter menu items based on user role
    $filtered_items = array_filter($items, function($item) use ($user_roles) {
        // Get roles that can view this item (stored in custom field)
        $allowed_roles = get_post_meta($item->ID, '_menu_item_roles', true);
        
        // If no restriction is set, everyone can see it
        if (empty($allowed_roles) || !is_array($allowed_roles)) {
            return true;
        }
        
        // Check if user has any of the required roles
        return count(array_intersect($user_roles, $allowed_roles)) > 0;
    });
    
    // Reindex array keys
    return array_values($filtered_items);
}
add_filter('wp_nav_menu_objects', 'custom_nav_menu_items', 10, 2);</code></pre>
                </div>
            </div>
        </section>

        <section class="performance">
            <h2>Performance Considerations</h2>
            <p>When working with arrays, especially large ones, performance becomes crucial. Here are some best practices:</p>
            
            <div class="performance-tips">
                <ul>
                    <li>
                        <strong>Use array_key_exists() vs isset() appropriately:</strong> 
                        <p><code>isset()</code> is generally faster but doesn't check for NULL values, while <code>array_key_exists()</code> is more thorough but slower.</p>
                    </li>
                    <li>
                        <strong>Prefer foreach over array_map() for simple operations:</strong> 
                        <p>While <code>array_map()</code> is cleaner, a simple <code>foreach</code> loop can be more performant for basic operations.</p>
                    </li>
                    <li>
                        <strong>Use array_filter() with a key parameter:</strong> 
                        <p>In PHP 5.6+, <code>array_filter()</code> accepts a flag to filter by keys or both keys and values, which can be more efficient than writing custom loops.</p>
                    </li>
                    <li>
                        <strong>Be careful with array_merge() on large arrays:</strong>
                        <p>For very large arrays, <code>array_merge()</code> can be memory-intensive. Consider using the + operator for simple merges that don't need to handle duplicate keys specially.</p>
                    </li>
                    <li>
                        <strong>Reuse arrays when possible:</strong>
                        <p>Creating new arrays for each transformation step can consume memory. When working with large datasets, try to modify arrays in place when appropriate.</p>
                    </li>
                </ul>
            </div>
        </section>

        <section class="homework">
            <h2>Homework Assignment</h2>
            <p>Put your array function knowledge to the test with this practical WordPress-themed assignment:</p>
            
            <div class="assignment">
                <h3>WordPress Post Category Analyzer</h3>
                <p>Create a PHP script that:</p>
                <ol>
                    <li>Takes an array of WordPress posts (provided in the sample data)</li>
                    <li>Analyzes the categories assigned to each post</li>
                    <li>Returns statistical information about category usage</li>
                    <li>Identifies the most and least used categories</li>
                    <li>Suggests potential category consolidations based on usage patterns</li>
                </ol>
                <p>Your solution should use at least 5 different array functions we've covered in this lesson.</p>
                
                <div class="starter-code">
                    <pre><code>// Sample data (simulated WordPress posts)
$posts = [
    [
        'id' => 1,
        'title' => 'Getting Started with WordPress',
        'categories' => ['Beginners', 'Tutorials', 'WordPress Basics']
    ],
    [
        'id' => 2,
        'title' => 'Advanced Custom Fields Tutorial',
        'categories' => ['Advanced', 'Tutorials', 'Plugins']
    ],
    [
        'id' => 3,
        'title' => 'Optimizing WordPress Performance',
        'categories' => ['Advanced', 'Performance', 'Best Practices']
    ],
    [
        'id' => 4,
        'title' => 'WordPress Security Guide',
        'categories' => ['Security', 'Best Practices', 'Tutorials']
    ],
    [
        'id' => 5,
        'title' => 'Building Your First WordPress Theme',
        'categories' => ['Themes', 'Tutorials', 'Beginners']
    ],
    // Add more posts here...
];

// Your solution here
function analyze_post_categories($posts) {
    // 1. Extract all categories
    
    // 2. Count category occurrences
    
    // 3. Find most and least used categories
    
    // 4. Identify potential category consolidations
    
    // 5. Return the analysis results
}

$analysis = analyze_post_categories($posts);
print_r($analysis);</code></pre>
                </div>
            </div>
        </section>

        <section class="further-reading">
            <h2>Further Reading and Resources</h2>
            <ul>
                <li><a href="https://www.php.net/manual/en/book.array.php" target="_blank">PHP Manual: Array Functions</a> - The official PHP documentation</li>
                <li><a href="https://developer.wordpress.org/reference/" target="_blank">WordPress Developer Reference</a> - How WordPress utilizes PHP arrays</li>
                <li><a href="https://css-tricks.com/getting-more-out-of-array-map-and-array-filter-in-php/" target="_blank">Getting More Out of array_map() and array_filter() in PHP</a> - Advanced techniques</li>
                <li><a href="https://phpdelusions.net/top" target="_blank">PHP Delusions</a> - Common PHP array mistakes and best practices</li>
            </ul>
        </section>

        <section class="next-session">
            <h2>Coming Up Next: Session 6 - PHP Functions</h2>
            <p>In our next session, we'll be exploring PHP functions in depth - how to create them, use parameters, return values, and build reusable code structures. These concepts will build directly on the array foundations we've established today.</p>
            <p>To prepare for the next session, try creating functions that implement some of the array operations we've learned about today!</p>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>PHP Indexed Arrays: Organizing Data in Sequential Containers - PHP WordPress Course</title>
<meta content="Work with numerically indexed arrays." name="description"/>
<meta content="PHP, WordPress, web development, php, indexed, arrays" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>

<style>
/* Global diagram and SVG styles */
.mermaid-converted,
.svg-container,
.diagram {
    margin: 1.5rem auto !important;
    padding: 1rem !important;
    text-align: center !important;
    overflow: hidden !important;
    max-width: 100% !important;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #dee2e6;
}

.mermaid-converted svg,
.svg-container svg,
.diagram svg {
    max-width: 100% !important;
    height: auto !important;
    display: block !important;
    margin: 0 auto !important;
}

/* Fix for decision diamonds */
.decision-node polygon,
polygon.decision {
    fill: #fff3cd !important;
    stroke: #856404 !important;
    stroke-width: 2px !important;
}

/* Remove excessive bottom margins */
.mermaid-converted + *,
.svg-container + *,
.diagram + * {
    margin-top: 1.5rem !important;
}

/* Center content vertically in containers */
.mermaid-converted > *,
.svg-container > *,
.diagram > * {
    vertical-align: middle;
}
</style>

</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Indexed Arrays</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 5</h4>
<ul class="sidebar-menu">
<li class="active"><a class="sidebar-link active" href="/02module/php_indexed_array.html">Indexed Arrays</a></li>
<li><a class="sidebar-link" href="/02module/php_associative_arrays.html">Associative Arrays</a></li>
<li><a class="sidebar-link" href="/02module/php_multidimensional_arrays.html">Multidimensional Arrays</a></li>
<li><a class="sidebar-link" href="/02module/php_array_functions.html">Array Functions</a></li>
<li><a class="sidebar-link" href="/02module/php_array_sorting.html">Array Sorting</a></li>
<li><a class="sidebar-link" href="/02module/php_array_iteration.html">Array Iteration</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_array_creation_manipulation.html">Homework: Arrays</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/02module/php_for_loops.html">← Prev: Session 4: Loops</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_function_declaration_and_calling.html">Next: Session 6: Functions →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>PHP Indexed Arrays: Organizing Data in Sequential Containers</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 30 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: Arrays and Data Manipulation</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP array operations</li>
<li>Work with different array types</li>
<li>Use array functions effectively</li>
<li>Manipulate complex data structures</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="introduction">
            <h2>Introduction to PHP Arrays</h2>
            <p>Welcome to our session on PHP Indexed Arrays! Today we'll explore one of the most fundamental data structures in PHP programming - the indexed array. Just as a filing cabinet helps organize documents, arrays help organize data in our PHP applications.</p>
            
            <p>In the world of web development, particularly with WordPress, you'll find arrays everywhere - from storing lists of blog posts to managing plugin configurations. Mastering arrays is essential for becoming a proficient PHP developer.</p>
        </section>

        <section class="what-are_arrays">
            <h2>What Are Indexed Arrays?</h2>
            
            <p>An indexed array is a collection of values stored under a single variable name, with each value accessible via a numeric index (starting from 0). Think of an indexed array as a numbered list or a row of mailboxes, where each slot has a specific position number.</p>
            
            <div class="visualization">
                <h3>Visual Representation of an Indexed Array</h3>
                <svg viewBox="0 0 600 120" style="width: 100%; max-width: 600px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
                    <rect x="50" y="20" width="500" height="60" fill="#f0f0f0" stroke="#333" stroke-width="2"/>
                    <line x1="150" y1="20" x2="150" y2="80" stroke="#333" stroke-width="2"/>
                    <line x1="250" y1="20" x2="250" y2="80" stroke="#333" stroke-width="2"/>
                    <line x1="350" y1="20" x2="350" y2="80" stroke="#333" stroke-width="2"/>
                    <line x1="450" y1="20" x2="450" y2="80" stroke="#333" stroke-width="2"/>
                    
                    <text x="100" y="55" text-anchor="middle" font-size="16">"Apple"</text>
                    <text x="200" y="55" text-anchor="middle" font-size="16">"Banana"</text>
                    <text x="300" y="55" text-anchor="middle" font-size="16">"Cherry"</text>
                    <text x="400" y="55" text-anchor="middle" font-size="16">"Date"</text>
                    <text x="500" y="55" text-anchor="middle" font-size="16">"Elderberry"</text>
<text x="100" y="100" text-anchor="middle" font-size="14">Index 0</text>
                    <text x="200" y="100" text-anchor="middle" font-size="14">Index 1</text>
                    <text x="300" y="100" text-anchor="middle" font-size="14">Index 2</text>
                    <text x="400" y="100" text-anchor="middle" font-size="14">Index 3</text>
                    <text x="500" y="100" text-anchor="middle" font-size="14">Index 4</text>
                </svg>
            </div>
            
            <div class="key-points">
                <h3>Key Characteristics of PHP Indexed Arrays</h3>
                <ul>
                    <li><strong>Zero-based indexing:</strong> The first element is at index 0, not 1</li>
                    <li><strong>Automatically assigned indices:</strong> PHP will automatically assign sequential indices if not specified</li>
                    <li><strong>Dynamic sizing:</strong> Arrays can grow or shrink as needed</li>
                    <li><strong>Mixed data types:</strong> A single array can contain different types of data (strings, integers, booleans, etc.)</li>
                </ul>
            </div>
        </section>

        <section class="creating-arrays">
            <h2>Creating Indexed Arrays in PHP</h2>
            
            <p>PHP offers several ways to create indexed arrays. Let's explore each method with practical examples:</p>
            
            <div class="method">
                <h3>Method 1: Using the array() Function</h3>
                <p>The traditional way to create arrays in PHP is using the <code>array()</code> function:</p>
                <pre><code>// Creating an array of fruits
$fruits = array("Apple", "Banana", "Cherry", "Date", "Elderberry");

// Output the array
echo "&lt;pre&gt;";
print_r($fruits);
echo "&lt;/pre&gt;";</code></pre>
                
                <p>Output:</p>
                <pre>Array
(
    [0] => Apple
    [1] => Banana
    [2] => Cherry
    [3] => Date
    [4] => Elderberry
)</pre>
            </div>
            
            <div class="method">
                <h3>Method 2: Using Short Array Syntax (PHP 5.4+)</h3>
                <p>Modern PHP provides a more concise way to define arrays using square brackets:</p>
                <pre><code>// Creating an array of temperatures using short syntax
$temperatures = [72, 68, 75, 82, 70];

// Output the array
echo "&lt;pre&gt;";
print_r($temperatures);
echo "&lt;/pre&gt;";</code></pre>
                
                <p>Output:</p>
                <pre>Array
(
    [0] => 72
    [1] => 68
    [2] => 75
    [3] => 82
    [4] => 70
)</pre>
            </div>
            
            <div class="method">
                <h3>Method 3: Creating Empty Arrays and Adding Elements</h3>
                <p>You can create an empty array and add elements one by one:</p>
                <pre><code>// Creating an empty array
$todoList = [];

// Adding elements to the array
$todoList[] = "Complete PHP assignment";
$todoList[] = "Study WordPress hooks";
$todoList[] = "Prepare for MySQL module";
$todoList[] = "Review HTML templates";

// Output the array
echo "&lt;pre&gt;";
print_r($todoList);
echo "&lt;/pre&gt;";</code></pre>
                
                <p>Output:</p>
                <pre>Array
(
    [0] => Complete PHP assignment
    [1] => Study WordPress hooks
    [2] => Prepare for MySQL module
    [3] => Review HTML templates
)</pre>
                
                <p>When you use <code>$array[] = value;</code>, PHP automatically assigns the next available index to the new element. This is particularly useful when building arrays dynamically.</p>
            </div>
            
            <div class="method">
                <h3>Method 4: Creating Arrays with Explicit Indices</h3>
                <p>You can also specify the indices explicitly:</p>
                <pre><code>// Creating an array with explicit indices
$scores = [];
$scores[0] = 95;
$scores[1] = 88;
$scores[2] = 92;
$scores[3] = 78;
$scores[4] = 85;

// Output the array
echo "&lt;pre&gt;";
print_r($scores);
echo "&lt;/pre&gt;";</code></pre>
                
                <p>Output:</p>
                <pre>Array
(
    [0] => 95
    [1] => 88
    [2] => 92
    [3] => 78
    [4] => 85
)</pre>
                
                <p>Note: You can also skip indices, but this creates gaps in your array:</p>
                <pre><code>// Creating an array with non-sequential indices
$sparseArray = [];
$sparseArray[0] = "First";
$sparseArray[2] = "Third"; // Note we skipped index 1
$sparseArray[5] = "Sixth"; // Skipped indices 3 and 4

// Output the array
echo "&lt;pre&gt;";
print_r($sparseArray);
echo "&lt;/pre&gt;";</code></pre>
                
                <p>Output:</p>
                <pre>Array
(
    [0] => First
    [2] => Third
    [5] => Sixth
)</pre>
            </div>
        </section>

        <section class="accessing-array_elements">
            <h2>Accessing Array Elements</h2>
            
            <p>Once you've created an array, you need to access its elements. In indexed arrays, you access elements by their numeric index.</p>
            
            <div class="method">
                <h3>Accessing Individual Elements</h3>
                <pre><code>$fruits = ["Apple", "Banana", "Cherry", "Date", "Elderberry"];

// Accessing individual elements
echo "First fruit: " . $fruits[0] . "&lt;br&gt;";  // Outputs: First fruit: Apple
echo "Third fruit: " . $fruits[2] . "&lt;br&gt;";  // Outputs: Third fruit: Cherry

// Modifying an element
$fruits[1] = "Blueberry";
echo "Updated second fruit: " . $fruits[1] . "&lt;br&gt;";  // Outputs: Updated second fruit: Blueberry</code></pre>
            </div>
            
            <div class="method">
                <h3>Common Pitfalls: Accessing Non-existent Elements</h3>
                <p>Attempting to access an index that doesn't exist will result in a warning:</p>
                <pre><code>// This will generate a warning
echo $fruits[10];  // Warning: Undefined array key 10

// A safer way to access elements
if (isset($fruits[10])) {
    echo $fruits[10];
} else {
    echo "This fruit doesn't exist in our array.";
}</code></pre>
            </div>
            
            <div class="method">
                <h3>Getting Array Information</h3>
                <pre><code>$fruits = ["Apple", "Banana", "Cherry", "Date", "Elderberry"];

// Count the number of elements
echo "Number of fruits: " . count($fruits) . "&lt;br&gt;";  // Outputs: Number of fruits: 5

// Get the last element
echo "Last fruit: " . $fruits[count($fruits) - 1] . "&lt;br&gt;";  // Outputs: Last fruit: Elderberry

// Alternative way to get the last element (PHP 7.3+)
echo "Last fruit: " . end($fruits) . "&lt;br&gt;";  // Outputs: Last fruit: Elderberry</code></pre>
            </div>
        </section>

        <section class="array-operations">
            <h2>Array Operations and Manipulations</h2>
            
            <div class="method">
                <h3>Adding Elements to Arrays</h3>
                <pre><code>$planets = ["Mercury", "Venus", "Earth", "Mars"];

// Add element to the end
$planets[] = "Jupiter";

// Add multiple elements
array_push($planets, "Saturn", "Uranus", "Neptune");

echo "&lt;pre&gt;";
print_r($planets);
echo "&lt;/pre&gt;";</code></pre>
                
                <p>Output:</p>
                <pre>Array
(
    [0] => Mercury
    [1] => Venus
    [2] => Earth
    [3] => Mars
    [4] => Jupiter
    [5] => Saturn
    [6] => Uranus
    [7] => Neptune
)</pre>
            </div>
            
            <div class="method">
                <h3>Removing Elements from Arrays</h3>
                <pre><code>$planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto"];

// Remove the last element (and return it)
$lastPlanet = array_pop($planets);
echo "Removed: " . $lastPlanet . "&lt;br&gt;"; // Outputs: Removed: Pluto

// Remove the first element (and return it)
$firstPlanet = array_shift($planets);
echo "Removed: " . $firstPlanet . "&lt;br&gt;"; // Outputs: Removed: Mercury

// Remove a specific element (by value)
$earthKey = array_search("Earth", $planets);
if ($earthKey !== false) {
    unset($planets[$earthKey]);
}

// Output remaining planets
echo "&lt;pre&gt;";
print_r($planets);
echo "&lt;/pre&gt;";</code></pre>
                
                <p>Output:</p>
                <pre>Array
(
    [1] => Venus
    [3] => Mars
    [4] => Jupiter
    [5] => Saturn
    [6] => Uranus
    [7] => Neptune
)</pre>
                
                <p>Notice that <code>unset()</code> removes the element but doesn't reindex the array, leaving a gap at index 2.</p>
            </div>
            
            <div class="method">
                <h3>Reindexing Arrays After Deletions</h3>
                <pre><code>// Reindex the array to fix gaps
$planets = array_values($planets);

echo "&lt;pre&gt;";
print_r($planets);
echo "&lt;/pre&gt;";</code></pre>
                
                <p>Output:</p>
                <pre>Array
(
    [0] => Venus
    [1] => Mars
    [2] => Jupiter
    [3] => Saturn
    [4] => Uranus
    [5] => Neptune
)</pre>
            </div>
            
            <div class="method">
                <h3>Array Slice and Splice</h3>
                <p>Extract a portion of an array with <code>array_slice()</code> and modify an array in place with <code>array_splice()</code>:</p>
                
                <pre><code>$days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];

// Slice: Extract a portion (doesn't modify original array)
$weekdays = array_slice($days, 0, 5);
$weekend = array_slice($days, 5, 2);

echo "Weekdays: " . implode(", ", $weekdays) . "&lt;br&gt;";
echo "Weekend: " . implode(", ", $weekend) . "&lt;br&gt;&lt;br&gt;";

// Splice: Insert elements at a specific position
$schedule = ["Wake up", "Breakfast", "Work", "Sleep"];
array_splice($schedule, 3, 0, ["Dinner", "Relax"]); // Insert before "Sleep"

echo "Daily schedule: " . implode(" → ", $schedule) . "&lt;br&gt;&lt;br&gt;";

// Splice: Replace elements
$months = ["January", "February", "April", "May"];
array_splice($months, 2, 0, ["March"]); // Insert "March" at index 2
array_splice($months, 5, 0, ["June"]); // Add "June" at the end

echo "Corrected months: " . implode(", ", $months) . "&lt;br&gt;";</code></pre>
            </div>
            
            <div class="method">
                <h3>Merging Arrays</h3>
                <pre><code>$frontendTech = ["HTML", "CSS", "JavaScript"];
$backendTech = ["PHP", "MySQL", "WordPress"];

// Merge arrays
$fullStack = array_merge($frontendTech, $backendTech);

echo "Full Stack Technologies: " . implode(", ", $fullStack) . "&lt;br&gt;";</code></pre>
            </div>
        </section>

        <section class="iteration">
            <h2>Iterating Through Indexed Arrays</h2>
            
            <p>Processing each element in an array is a common operation. PHP provides several ways to iterate through arrays:</p>
            
            <div class="method">
                <h3>Using For Loops</h3>
                <pre><code>$fruits = ["Apple", "Banana", "Cherry", "Date", "Elderberry"];

// Using for loop
echo "&lt;h4&gt;Fruits List using for loop:&lt;/h4&gt;";
echo "&lt;ul&gt;";
for ($i = 0; $i < count($fruits); $i++) {
    echo "&lt;li&gt;" . $fruits[$i] . "&lt;/li&gt;";
}
echo "&lt;/ul&gt;";</code></pre>
            </div>
            
            <div class="method">
                <h3>Using Foreach Loops (Recommended)</h3>
                <pre><code>// Using foreach loop (preferred method)
echo "&lt;h4&gt;Fruits List using foreach loop:&lt;/h4&gt;";
echo "&lt;ul&gt;";
foreach ($fruits as $fruit) {
    echo "&lt;li&gt;" . $fruit . "&lt;/li&gt;";
}
echo "&lt;/ul&gt;";</code></pre>
            </div>
            
            <div class="method">
                <h3>Accessing Keys and Values with Foreach</h3>
                <pre><code>// Using foreach loop with key and value
echo "&lt;h4&gt;Fruits with Indices:&lt;/h4&gt;";
echo "&lt;ul&gt;";
foreach ($fruits as $index => $fruit) {
    echo "&lt;li&gt;Index " . $index . ": " . $fruit . "&lt;/li&gt;";
}
echo "&lt;/ul&gt;";</code></pre>
            </div>
            
            <div class="method">
                <h3>Using Array Functions for Iteration</h3>
                <pre><code>// Using array_map
$uppercaseFruits = array_map(function($fruit) {
    return strtoupper($fruit);
}, $fruits);

echo "&lt;h4&gt;Uppercase Fruits:&lt;/h4&gt;";
echo "&lt;ul&gt;";
foreach ($uppercaseFruits as $fruit) {
    echo "&lt;li&gt;" . $fruit . "&lt;/li&gt;";
}
echo "&lt;/ul&gt;";</code></pre>
            </div>
        </section>

        <section class="array-functions">
            <h2>Essential Array Functions</h2>
            
            <p>PHP provides a rich set of built-in functions for working with arrays. Here are some of the most useful ones:</p>
            
            <div class="function-category">
                <h3>Searching and Checking</h3>
                
<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 900" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="900" fill="#fafafa" rx="8"/>
    
    <line x1="166.66666666666669" y1="80" x2="190.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="166.66666666666669" y1="80" x2="330.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="166.66666666666669" y1="80" x2="470.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="166.66666666666669" y1="80" x2="330.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="248.33333333333334" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[array_search] A </text>
    <line x1="166.66666666666669" y1="80" x2="610.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="388.33333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; E[isset] B[in_array] </text>
    <rect x="52.666666666666686" y="55" width="228" height="50" 
          rx="5" class="node-rect"/>
    <text x="166.66666666666669" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">PHP Array Search Functions</text>
    <rect x="223.33333333333337" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">in_array</text>
    <rect x="130.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="190.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_search</text>
    <rect x="256.0" y="175" width="148" height="50" 
          rx="5" class="node-rect"/>
    <text x="330.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_key_exists</text>
    <rect x="410.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="470.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">isset</text>
    <rect x="404.0" y="175" width="412" height="50" 
          rx="5" class="node-rect"/>
    <text x="610.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Checks if a value exists in array Returns boolean</text>
    <rect x="170.0" y="55" width="460" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Searches for value and returns key Returns key or false</text>
    <rect x="290.66666666666674" y="55" width="452" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Checks if a key exists in array Works with NULL values</text>
    <rect x="319.33333333333337" y="55" width="628" height="50" 
          rx="5" class="node-rect"/>
    <text x="633.3333333333334" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Checks if key exists and value is not NULL Faster but doesn&#39;t work with NULL</text>
</svg>
</div>
                
                <div class="example">
                    <h4>Example: Searching in Arrays</h4>
                    <pre><code>$fruits = ["Apple", "Banana", "Cherry", null, "Elderberry"];

// Check if a value exists in the array
if (in_array("Banana", $fruits)) {
    echo "Yes, we have Bananas!&lt;br&gt;";
}

// Find the index of a value
$cherryIndex = array_search("Cherry", $fruits);
echo "Cherry is at index: " . $cherryIndex . "&lt;br&gt;";

// Check if an index exists
if (array_key_exists(3, $fruits)) {
    echo "Yes, index 3 exists&lt;br&gt;";
}

// Check if index exists and is not null
if (isset($fruits[3])) {
    echo "Index 3 is set&lt;br&gt;";
} else {
    echo "Index 3 is not set (or is null)&lt;br&gt;";
}</code></pre>
                </div>
            </div>
            
            <div class="function-category">
                <h3>Sorting Functions</h3>
                
<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 900" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="900" fill="#fafafa" rx="8"/>
    
    <line x1="166.66666666666669" y1="80" x2="190.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="166.66666666666669" y1="80" x2="330.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="166.66666666666669" y1="80" x2="470.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="166.66666666666669" y1="80" x2="330.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="248.33333333333334" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; C[rsort] A </text>
    <line x1="166.66666666666669" y1="80" x2="610.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="388.33333333333337" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; E[array_reverse] B[sort] </text>
    <rect x="48.666666666666686" y="55" width="236" height="50" 
          rx="5" class="node-rect"/>
    <text x="166.66666666666669" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">PHP Array Sorting Functions</text>
    <rect x="223.33333333333337" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">sort</text>
    <rect x="130.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="190.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">rsort</text>
    <rect x="270.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="330.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">shuffle</text>
    <rect x="408.0" y="175" width="124" height="50" 
          rx="5" class="node-rect"/>
    <text x="470.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">array_reverse</text>
    <rect x="416.0" y="175" width="388" height="50" 
          rx="5" class="node-rect"/>
    <text x="610.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Sorts array in ascending order Reindexes array</text>
    <rect x="202.0" y="55" width="396" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Sorts array in descending order Reindexes array</text>
    <rect x="318.66666666666674" y="55" width="396" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Randomizes the order Maintains key associations</text>
    <rect x="471.33333333333337" y="55" width="324" height="50" 
          rx="5" class="node-rect"/>
    <text x="633.3333333333334" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Reverses array order Returns new array</text>
</svg>
</div>
                
                <div class="example">
                    <h4>Example: Sorting Arrays</h4>
                    <pre><code>$numbers = [5, 2, 8, 1, 9];

// Sort in ascending order
sort($numbers);
echo "Sorted (ascending): " . implode(", ", $numbers) . "&lt;br&gt;";

// Sort in descending order
rsort($numbers);
echo "Sorted (descending): " . implode(", ", $numbers) . "&lt;br&gt;";

// Shuffle the array
shuffle($numbers);
echo "Shuffled: " . implode(", ", $numbers) . "&lt;br&gt;";

// Reverse the array
$reversed = array_reverse($numbers);
echo "Reversed: " . implode(", ", $reversed) . "&lt;br&gt;";</code></pre>
                </div>
            </div>
            
            <div class="function-category">
                <h3>Filtering and Transformation</h3>
                <pre><code>$scores = [95, 45, 78, 60, 88, 92, 70, 65, 55, 98];

// Filter scores above 80
$highScores = array_filter($scores, function($score) {
    return $score >= 80;
});

// Map scores to grades
$grades = array_map(function($score) {
    if ($score >= 90) return 'A';
    if ($score >= 80) return 'B';
    if ($score >= 70) return 'C';
    if ($score >= 60) return 'D';
    return 'F';
}, $scores);

// Calculate the sum of all scores
$totalScore = array_sum($scores);
$averageScore = $totalScore / count($scores);

echo "&lt;h4&gt;Score Analysis:&lt;/h4&gt;";
echo "High Scores (80+): " . implode(", ", $highScores) . "&lt;br&gt;";
echo "Grades: " . implode(", ", $grades) . "&lt;br&gt;";
echo "Average Score: " . round($averageScore, 2) . "&lt;br&gt;";</code></pre>
            </div>
        </section>

        <section class="real-world_applications">
            <h2>Real-World Applications in WordPress</h2>
            
            <div class="example">
                <h3>Example 1: Post Categories Display</h3>
                <p>In WordPress, category lists are often stored in arrays:</p>
                <pre><code>// WordPress-like example for getting post categories
function getPostCategories($postId) {
    // In a real WordPress site, this would use get_the_category()
    // This is a simplified example
    return [
        "PHP",
        "WordPress",
        "Web Development",
        "Arrays"
    ];
}

$postId = 123; // Example post ID
$categories = getPostCategories($postId);

echo "&lt;div class='post-categories'&gt;";
echo "Categories: ";
foreach ($categories as $index => $category) {
    echo $category;
    // Add comma except after the last item
    if ($index < count($categories) - 1) {
        echo ", ";
    }
}
echo "&lt;/div&gt;";</code></pre>
            </div>
            
            <div class="example">
                <h3>Example 2: WordPress Navigation Menu</h3>
                <p>Creating a simple navigation menu using arrays:</p>
                <pre><code>// Define the navigation menu items
$menuItems = [
    ["title" => "Home", "url" => "/"],
    ["title" => "About", "url" => "/about"],
    ["title" => "Services", "url" => "/services"],
    ["title" => "Blog", "url" => "/blog"],
    ["title" => "Contact", "url" => "/contact"]
];

// Output the navigation menu
echo "&lt;nav class='main-menu'&gt;";
echo "&lt;ul&gt;";
foreach ($menuItems as $item) {
    echo "&lt;li&gt;&lt;a href='" . $item['url'] . "'&gt;" . $item['title'] . "&lt;/a&gt;&lt;/li&gt;";
}
echo "&lt;/ul&gt;";
echo "&lt;/nav&gt;";</code></pre>
            </div>
            
            <div class="example">
                <h3>Example 3: Processing Form Data</h3>
                <p>Using arrays to process and validate form data:</p>
                <pre><code>// Example form data (mimicking $_POST)
$formData = [
    'name' => 'John Doe',
    'email' => 'john@example.com',
    'interests' => ['PHP', 'WordPress', 'JavaScript']
];

// Required fields
$requiredFields = ['name', 'email'];
$errors = [];

// Validate required fields
foreach ($requiredFields as $field) {
    if (empty($formData[$field])) {
        $errors[] = "The {$field} field is required.";
    }
}

// Process interests (if no errors)
if (empty($errors)) {
    echo "&lt;h4&gt;Form Submission Successful&lt;/h4&gt;";
    echo "Name: " . $formData['name'] . "&lt;br&gt;";
    echo "Email: " . $formData['email'] . "&lt;br&gt;";
    echo "Interests: " . implode(", ", $formData['interests']) . "&lt;br&gt;";
} else {
    echo "&lt;h4&gt;Form Errors:&lt;/h4&gt;";
    echo "&lt;ul&gt;";
    foreach ($errors as $error) {
        echo "&lt;li&gt;" . $error . "&lt;/li&gt;";
    }
    echo "&lt;/ul&gt;";
}</code></pre>
            </div>
        </section>

        <section class="advanced-topics">
            <h2>Advanced Topics: Beyond Basic Indexed Arrays</h2>
            
            <div class="topic">
                <h3>Using Arrays with WordPress Functions</h3>
                <p>WordPress often returns data as arrays or accepts arrays as parameters:</p>
                <pre><code>// Example: WordPress-style WP_Query arguments (simplified)
$queryArgs = [
    'post_type' => 'post',
    'posts_per_page' => 5,
    'category_name' => 'tutorials',
    'orderby' => 'date',
    'order' => 'DESC'
];

// In WordPress, you would use:
// $query = new WP_Query($queryArgs);

// Simulated WordPress query function
function simulateWpQuery($args) {
    // This would actually query the database in WordPress
    return [
        [
            'id' => 1,
            'title' => 'Getting Started with PHP Arrays',
            'date' => '2025-04-15'
        ],
        [
            'id' => 2,
            'title' => 'WordPress Theme Development',
            'date' => '2025-04-10'
        ],
        [
            'id' => 3,
            'title' => 'Custom Post Types in WordPress',
            'date' => '2025-04-05'
        ]
    ];
}

// Get posts
$posts = simulateWpQuery($queryArgs);

// Display posts
echo "&lt;h4&gt;Recent Tutorial Posts:&lt;/h4&gt;";
echo "&lt;ul&gt;";
foreach ($posts as $post) {
    echo "&lt;li&gt;";
    echo "&lt;strong&gt;" . $post['title'] . "&lt;/strong&gt;";
    echo " - Published on: " . $post['date'];
    echo "&lt;/li&gt;";
}
echo "&lt;/ul&gt;";</code></pre>
            </div>
            
            <div class="topic">
                <h3>Performance Considerations</h3>
                <p>When working with large arrays, consider these performance tips:</p>
                <ul>
                    <li><strong>Avoid excessive array copying:</strong> Use references when passing large arrays to functions</li>
                    <li><strong>Prefer foreach over for loops:</strong> Foreach is generally more efficient for iterating arrays</li>
                    <li><strong>Use array functions:</strong> Built-in functions like <code>array_map()</code> and <code>array_filter()</code> are optimized</li>
                    <li><strong>Be careful with array_merge on large arrays:</strong> It can be memory-intensive</li>
                </ul>
            </div>
            
            <div class="topic">
                <h3>Array Conversion and Serialization</h3>
                <p>WordPress often needs to convert arrays to strings for database storage:</p>
                <pre><code>// Array to be stored in database
$pluginSettings = [
    'enable_feature_x' => true,
    'max_items' => 10,
    'color_scheme' => 'dark',
    'allowed_roles' => ['admin', 'editor']
];

// Convert to JSON (common in modern WordPress plugins)
$jsonSettings = json_encode($pluginSettings);
echo "JSON for database storage:&lt;br&gt;";
echo $jsonSettings . "&lt;br&gt;&lt;br&gt;";

// Convert back from JSON
$retrievedSettings = json_decode($jsonSettings, true);
echo "Retrieved settings from database:&lt;br&gt;";
echo "&lt;pre&gt;";
print_r($retrievedSettings);
echo "&lt;/pre&gt;";

// Older WordPress code might use serialization
$serializedSettings = serialize($pluginSettings);
echo "Serialized for database (older method):&lt;br&gt;";
echo $serializedSettings . "&lt;br&gt;&lt;br&gt;";

// Convert back from serialized string
$retrievedOldSettings = unserialize($serializedSettings);
echo "Retrieved old-style settings:&lt;br&gt;";
echo "&lt;pre&gt;";
print_r($retrievedOldSettings);
echo "&lt;/pre&gt;";</code></pre>
            </div>
        </section>

        <section class="practical-exercise">
            <h2>Practical Exercise: Building a Simple Todo List Manager</h2>
            
            <p>Let's apply what we've learned by creating a simple todo list manager using PHP indexed arrays:</p>
            
            <pre><code>// Initialize todo list array (normally would be stored in session/database)
$todoList = [
    "Complete PHP arrays assignment",
    "Study WordPress theme structure",
    "Practice MySQL queries",
    "Review HTTP protocols"
];

// Function to add a new task
function addTask(&$list, $task) {
    if (!empty($task)) {
        $list[] = $task;
        return true;
    }
    return false;
}

// Function to remove a task
function removeTask(&$list, $index) {
    if (isset($list[$index])) {
        array_splice($list, $index, 1); // Remove and reindex
        return true;
    }
    return false;
}

// Function to mark a task as completed (prefix with ✓)
function completeTask(&$list, $index) {
    if (isset($list[$index]) && strpos($list[$index], '✓ ') !== 0) {
        $list[$index] = '✓ ' . $list[$index];
        return true;
    }
    return false;
}

// Function to display the todo list
function displayTodoList($list) {
    echo "&lt;h3&gt;Todo List&lt;/h3&gt;";
    if (empty($list)) {
        echo "&lt;p&gt;No tasks in your list. Great job!&lt;/p&gt;";
        return;
    }
    
    echo "&lt;ul class='todo-list'&gt;";
    foreach ($list as $index => $task) {
        echo "&lt;li&gt;";
        echo "[{$index}] {$task}";
        echo "&lt;/li&gt;";
    }
    echo "&lt;/ul&gt;";
}

// Simulate user actions
echo "&lt;h2&gt;Todo List Manager Demo&lt;/h2&gt;";

// Initial list
echo "&lt;h4&gt;Initial Todo List:&lt;/h4&gt;";
displayTodoList($todoList);

// Add a new task
addTask($todoList, "Learn PHP array functions");
echo "&lt;h4&gt;After Adding a Task:&lt;/h4&gt;";
displayTodoList($todoList);

// Complete a task
completeTask($todoList, 0);
echo "&lt;h4&gt;After Completing a Task:&lt;/h4&gt;";
displayTodoList($todoList);

// Remove a task
removeTask($todoList, 2);
echo "&lt;h4&gt;After Removing a Task:&lt;/h4&gt;";
displayTodoList($todoList);</code></pre>
        </section>

        <section class="best-practices">
            <h2>Best Practices for Working with Indexed Arrays</h2>
            
            <ul>
                <li><strong>Use descriptive variable names:</strong> Choose array names that clearly describe their contents (e.g., <code>$userPosts</code> instead of <code>$up</code>)</li>
                <li><strong>Prefer foreach loops:</strong> They're more readable and less prone to off-by-one errors than for loops</li>
                <li><strong>Check array bounds:</strong> Always use <code>isset()</code> or <code>array_key_exists()</code> before accessing elements</li>
                <li><strong>Use array functions:</strong> PHP's built-in array functions are optimized and make code cleaner</li>
                <li><strong>Document array structures:</strong> In complex applications, document the expected structure of important arrays</li>
                <li><strong>Think functionally:</strong> Use <code>array_map()</code>, <code>array_filter()</code>, and <code>array_reduce()</code> for cleaner code</li>
                <li><strong>Consider memory usage:</strong> For large datasets, be mindful of memory consumption</li>
            </ul>
        </section>

        <section class="homework">
            <h2>Homework Assignment: Array Manipulation Challenge</h2>
            
            <div class="assignment">
                <p>Create a PHP script that performs the following operations:</p>
                <ol>
                    <li>Create an indexed array containing the names of 10 countries</li>
                    <li>Write a function to display the array in an HTML unordered list</li>
                    <li>Sort the array alphabetically and display it again</li>
                    <li>Reverse the array order and display it again</li>
                    <li>Remove the first and last elements and display the result</li>
                    <li>Add three new countries at the beginning of the array using <code>array_unshift()</code></li>
                    <li>Create a second array with 5 more countries</li>
                    <li>Merge the two arrays and display the combined result</li>
                    <li>Create a function that takes an array and returns a new array with all items converted to uppercase</li>
                    <li>Apply your uppercase function to the merged array and display the result</li>
                </ol>
                
                <p><strong>Bonus Challenge:</strong> Create a function that shuffles the array and then groups countries by the first letter of their name. Display the result as an associative array where keys are the first letters and values are arrays of country names starting with that letter.</p>
            </div>
        </section>

        <section class="further-reading">
            <h2>Further Reading and Resources</h2>
            
            <ul>
                <li><a href="https://www.php.net/manual/en/ref.array.php">PHP Array Functions Documentation</a></li>
                <li><a href="https://developer.wordpress.org/reference/">WordPress Developer Reference</a> (for how WordPress uses arrays)</li>
                <li>"PHP Arrays: Advanced Techniques" - Chapter in "PHP & MySQL: Novice to Ninja"</li>
                <li>"Working with Arrays in Modern PHP" - Chapter in "Modern PHP: New Features and Good Practices"</li>
            </ul>
        </section>

        <section class="next-topics">
            <h2>Coming Up Next</h2>
            
            <p>In our next session, we'll build on our knowledge of indexed arrays to explore:</p>
            <ul>
                <li>Associative Arrays: Working with key-value pairs</li>
                <li>Multidimensional Arrays: Creating complex data structures</li>
                <li>Array iteration techniques for nested arrays</li>
                <li>Advanced array sorting with user-defined comparison functions</li>
            </ul>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 2 24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
</body>
</html>
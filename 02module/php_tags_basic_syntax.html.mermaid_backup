<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="ie=edge" http-equiv="X-UA-Compatible"/>
<!-- SEO Meta Tags -->
<title>PHP Tags and Basic Syntax - PHP WordPress Course</title>
<meta content="Welcome to our exploration of PHP tags and basic syntax! Today we're going to learn the fundamental building blocks of PHP code that will serve as the foundatio" name="description"/>
<meta content="PHP, WordPress, web development, php, tags, and, basic, syntax" name="keywords"/>
<meta content="PHP WordPress Course" name="author"/>
<!-- Favicon -->
<link href="/favicon.png" rel="icon" type="image/png"/>
<link href="/favicon.png" rel="apple-touch-icon"/>
<!-- CSS -->
<link href="/assets/css/main.css" rel="stylesheet"/><link href="/assets/css/sidebar-enhanced.css" rel="stylesheet"/><link href="/assets/css/sidebar-toggle.css" rel="stylesheet"/>

<style>
/* Global diagram and SVG styles */
.mermaid-converted,
.svg-container,
.diagram {
    margin: 1.5rem auto !important;
    padding: 1rem !important;
    text-align: center !important;
    overflow: hidden !important;
    max-width: 100% !important;
    background: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #dee2e6;
}

.mermaid-converted svg,
.svg-container svg,
.diagram svg {
    max-width: 100% !important;
    height: auto !important;
    display: block !important;
    margin: 0 auto !important;
}

/* Fix for decision diamonds */
.decision-node polygon,
polygon.decision {
    fill: #fff3cd !important;
    stroke: #856404 !important;
    stroke-width: 2px !important;
}

/* Remove excessive bottom margins */
.mermaid-converted + *,
.svg-container + *,
.diagram + * {
    margin-top: 1.5rem !important;
}

/* Center content vertically in containers */
.mermaid-converted > *,
.svg-container > *,
.diagram > * {
    vertical-align: middle;
}
</style>

</head>
<body>
<!-- Skip to main content -->
<a class="sr-only" href="#main-content">Skip to main content</a>
<div class="page-wrapper">
<!-- Header -->
<header class="site-header" role="banner">
<div class="header-container">
<div class="site-branding">
<a class="site-logo" href="/">
<h1 class="site-title">PHP WordPress Development</h1>
</a>
</div>
<nav aria-label="Main navigation" class="main-navigation" role="navigation">
<button aria-expanded="false" aria-label="Toggle navigation" class="mobile-menu-btn">
<span></span>
<span></span>
<span></span>
</button>
<div class="nav-menu">
<ul class="nav-list">
<li class="nav-item"><a class="nav-link" href="/">Home</a></li>
<li class="nav-item dropdown">
<button aria-haspopup="true" class="nav-link dropdown-toggle active">Modules</button>
<div class="dropdown-menu">
<a class="dropdown-item" href="/module1.html">Module 1: Web Fundamentals</a>
<a class="dropdown-item active" href="/module2.html">Module 2: PHP Fundamentals</a>
<a class="dropdown-item" href="/module3.html">Module 3: MySQL Database</a>
<a class="dropdown-item" href="/module4.html">Module 4: WordPress &amp; Docker</a>
<a class="dropdown-item" href="/module5.html">Module 5: Theme Development</a>
<a class="dropdown-item" href="/module6.html">Module 6: Plugin Development</a>
<a class="dropdown-item" href="/module7.html">Module 7: Advanced WordPress</a>
<a class="dropdown-item" href="/module8.html">Module 8: Deployment</a>
<a class="dropdown-item" href="/module9.html">Module 9: Final Project</a>
</div>
</li>
<li class="nav-item"><a class="nav-link" href="/resources.html">Resources</a></li>
<li class="nav-item"><a class="nav-link" href="/about.html">About</a></li>
</ul>
</div>
</nav>
<div class="search-container">
<div class="search-input-wrapper">
<svg class="search-icon" fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path clip-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" fill-rule="evenodd"></path>
</svg>
<input aria-label="Search" class="search-input" placeholder="Search lessons..." type="search"/>
</div>
<div class="search-results"></div>
</div>
</div>
</header>
<!-- Progress Bar -->
<div class="progress-container">
<div class="progress-header">
<h2 class="progress-title">Course Progress</h2>
<span class="progress-text">Loading...</span>
</div>
<div class="progress-bar">
<div class="progress-bar-fill">
<span class="progress-bar-text"></span>
</div>
</div>
</div>
<!-- Breadcrumb -->
<nav aria-label="Breadcrumb" class="breadcrumb container">
<ol class="breadcrumb-list">
<li class="breadcrumb-item">
<a href="/">Home</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<a href="/module2.html">Module 2</a>
<span class="breadcrumb-separator">/</span>
</li>
<li class="breadcrumb-item">
<span aria-current="page">PHP Tags and Basic Syntax</span>
</li>
</ol>
</nav>
<!-- Main Content -->
<main class="main-content" id="main-content" role="main">
<div class="container">
<div class="content-with-sidebar">
<!-- Sidebar -->
<aside class="sidebar">

<div class="sidebar-nav">
<h3 class="sidebar-title">Module 2: PHP Fundamentals</h3>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Session 1</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/02module/review_php_setup.html">Review PHP Setup</a></li>
<li class="active"><a class="sidebar-link active" href="/02module/php_tags_basic_syntax.html">PHP Tags &amp; Syntax</a></li>
<li><a class="sidebar-link" href="/02module/php_output_methods.html">Output Methods</a></li>
<li><a class="sidebar-link" href="/02module/php_comments.html">Comments in PHP</a></li>
<li><a class="sidebar-link" href="/02module/php_variables_and_data_types.html">Variables &amp; Data Types</a></li>
<li><a class="sidebar-link" href="/02module/php_constants.html">Constants</a></li>
<li><a class="sidebar-link" href="/02module/homework_php_script.html">Homework: PHP Script</a></li>
</ul>
</div>
<div class="sidebar-section">
<h4 class="sidebar-section-title">Quick Links</h4>
<ul class="sidebar-menu">
<li><a class="sidebar-link" href="/module2.html">Module Overview</a></li>
<li><a class="sidebar-link prev-session" href="/01module/project_static_site.html">← Prev: Module 1: Project</a></li>
<li><a class="sidebar-link next-session" href="/02module/php_arithmetic_operators.html">Next: Session 2: Operators →</a></li>
<li><a class="sidebar-link" href="/module1.html">← Previous Module</a></li>
<li><a class="sidebar-link" href="/module3.html">Next Module →</a></li>
<li><a class="sidebar-link" href="/resources.html">Resources</a></li>
</ul>
</div>
</div></aside>
<!-- Main Lesson Content -->
<article class="lesson-content">
<header class="lesson-header">
<h1>PHP Tags and Basic Syntax</h1>
<div class="lesson-meta">
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
</svg>
<span>Duration: 30 minutes</span>
</div>
<div class="lesson-meta-item">
<svg fill="currentColor" height="20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12 14l9-5-9-5-9 5 9 5z"></path>
</svg>
<span>Module 2: PHP Basics &amp; Setup</span>
</div>
</div>
</header>
<!-- Learning Objectives -->
<div class="lesson-objectives">
<h2>Learning Objectives</h2>
<ul>
<li>Master PHP programming concepts</li>
<li>Write clean, maintainable code</li>
<li>Apply best practices</li>
<li>Build dynamic applications</li>
</ul>
</div>
<!-- Lesson Body -->
<div class="lesson-body">
<section class="intro">
            <h2>Introduction to PHP</h2>
            <p>Welcome to our exploration of PHP tags and basic syntax! Today we're going to learn the fundamental building blocks of PHP code that will serve as the foundation for everything else you'll learn in this course.</p>
            
            <p>PHP (which stands for PHP: Hypertext Preprocessor - a recursive acronym) is a server-side scripting language specifically designed for web development. It allows you to create dynamic web pages that can interact with databases, handle form submissions, manage sessions, and much more.</p>
            
            <p>What makes PHP particularly powerful is how it seamlessly integrates with HTML. Unlike purely client-side languages like JavaScript, PHP code executes on the server and generates HTML that is then sent to the client. This means the browser receives only the processed HTML output, not the PHP code itself.</p>

<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 400" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="400" fill="#fafafa" rx="8"/>
    
    <line x1="225.0" y1="200" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="312.5" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">&quot;2. Pass to PHP Interpreter&quot;</text>
    <line x1="400.0" y1="200" x2="575.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="487.5" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">&quot;3. Database Queries if needed&quot;</text>
    <line x1="575.0" y1="200" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="487.5" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">&quot;4. Return Data&quot;</text>
    <line x1="400.0" y1="200" x2="225.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="312.5" y="195.0" text-anchor="middle" 
          class="node-text" font-size="12">&quot;5. Generate HTML&quot;</text>
    <line x1="225.0" y1="200" x2="400.0" y2="80" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="312.5" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&quot;6. HTTP Response with HTML&quot;</text>
    <rect x="334.0" y="55" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Client Browser</text>
    <rect x="165.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Web Server</text>
    <rect x="334.0" y="175" width="132" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">PHP Processing</text>
    <rect x="515.0" y="175" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">(Database)</text>
</svg>
</div>
            
            <p class="analogy"><strong>Analogy:</strong> Think of PHP as a chef in a restaurant kitchen. The customer (browser) makes an order (HTTP request), the chef (PHP) prepares the meal using ingredients (data, possibly from a database), and returns a finished dish (HTML) to the customer. The customer never sees the kitchen or the cooking process - only the final meal.</p>
        </section>

        <section class="php-tags">
            <h2>PHP Tags: The Entry and Exit Points</h2>
            <p>To embed PHP code within an HTML document, you need to use PHP tags. These tags tell the server where PHP code begins and ends, acting as boundaries between PHP and HTML.</p>
            
            <h3>Standard PHP Tags</h3>
            <p>The standard and recommended way to delimit PHP code:</p>
            <pre><code>&lt;?php
    // PHP code goes here
?&gt;</code></pre>
            
            <p>Always use these standard tags for maximum compatibility across different server configurations.</p>
            
            <h3>Short Echo Tag</h3>
            <p>A shorthand specifically for outputting data:</p>
            <pre><code>&lt;?= $variable ?&gt;</code></pre>
            
            <p>This is equivalent to <code>&lt;?php echo $variable; ?&gt;</code> and is particularly useful for quickly displaying variables within HTML. The short echo tag has been enabled by default since PHP 5.4.</p>
            
            <div class="important-note">
                <h4>Important Note on PHP Tags</h4>
                <p>In the past, other tag styles existed (like ASP style <code>&lt;% %&gt;</code> tags and short tags <code>&lt;? ?&gt;</code>), but they are either deprecated or disabled by default in modern PHP. Always use the standard <code>&lt;?php ?&gt;</code> tags or the short echo <code>&lt;?= ?&gt;</code> tag for maximum compatibility.</p>
            </div>
            
            <h3>Mixing PHP with HTML</h3>
            <p>One of PHP's strengths is how seamlessly it integrates with HTML. You can switch between PHP and HTML multiple times in the same file:</p>
            
            <pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;?php echo "Dynamic Page Title"; ?&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Welcome to my website&lt;/h1&gt;
    
    &lt;p&gt;The current date and time is: &lt;?= date("Y-m-d H:i:s") ?&gt;&lt;/p&gt;
    
    &lt;?php
    $user = "John";
    if ($user) {
        echo "&lt;p&gt;Hello, " . $user . "!&lt;/p&gt;";
    } else {
        echo "&lt;p&gt;Hello, guest!&lt;/p&gt;";
    }
    ?&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
            
            <p class="analogy"><strong>Analogy:</strong> PHP tags work like quotation marks in a conversation. When you use the opening tag <code>&lt;?php</code>, you're essentially saying "Now I'm speaking PHP," and when you use the closing tag <code>?&gt;</code>, you're saying "Now I'm back to speaking HTML."</p>
            
            <h3>Visual Representation of PHP and HTML Integration</h3>
            <svg width="600" height="300" viewBox="0 0 600 300" style="max-width: 100%; height: auto; display: block; margin: 0 auto;">
                <!-- Background -->
                <rect x="0" y="0" width="600" height="300" fill="#f5f5f5" rx="10" ry="10" />
                
                <!-- Title -->
                <text x="300" y="30" text-anchor="middle" font-weight="bold" font-size="16">PHP and HTML Integration</text>
                
                <!-- HTML sections -->
                <rect x="50" y="50" width="500" height="40" fill="#e6f2ff" stroke="#0066cc" rx="5" ry="5" />
                <text x="300" y="75" text-anchor="middle" font-size="14">&lt;html&gt;&lt;head&gt;&lt;title&gt;</text>
                
                <!-- PHP section 1 -->
                <rect x="50" y="100" width="500" height="40" fill="#ffe6e6" stroke="#cc0000" rx="5" ry="5" />
                <text x="300" y="125" text-anchor="middle" font-size="14">&lt;?php echo "Dynamic Page Title"; ?&gt;</text>
                
                <!-- HTML section 2 -->
                <rect x="50" y="150" width="500" height="40" fill="#e6f2ff" stroke="#0066cc" rx="5" ry="5" />
                <text x="300" y="175" text-anchor="middle" font-size="14">&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome&lt;/h1&gt;</text>
                
                <!-- PHP section 2 (short echo) -->
                <rect x="50" y="200" width="500" height="40" fill="#ffe6e6" stroke="#cc0000" rx="5" ry="5" />
                <text x="300" y="225" text-anchor="middle" font-size="14">&lt;?= date("Y-m-d H:i:s") ?&gt;</text>
                
                <!-- Legend -->
                <rect x="430" y="250" width="120" height="30" fill="#e6f2ff" stroke="#0066cc" rx="5" ry="5" />
                <text x="490" y="270" text-anchor="middle" font-size="12">HTML</text>
<rect x="430" y="260" width="120" height="30" fill="#ffe6e6" stroke="#cc0000" rx="5" ry="5" />
                <text x="490" y="280" text-anchor="middle" font-size="12">PHP</text>
            </svg>
            
            <h3>Common Use Cases for PHP Tags</h3>
            <ul>
                <li><strong>Template Variables:</strong> <code>&lt;title&gt;&lt;?= $pageTitle ?&gt;&lt;/title&gt;</code></li>
                <li><strong>Dynamic Content:</strong> <code>&lt;div class="content"&gt;&lt;?php echo $content; ?&gt;&lt;/div&gt;</code></li>
                <li><strong>Conditional HTML:</strong> <code>&lt;?php if ($userLoggedIn): ?&gt;&lt;div class="user-panel"&gt;...&lt;/div&gt;&lt;?php endif; ?&gt;</code></li>
                <li><strong>Loops to Generate HTML:</strong> <code>&lt;?php foreach ($items as $item): ?&gt;&lt;li&gt;&lt;?= $item ?&gt;&lt;/li&gt;&lt;?php endforeach; ?&gt;</code></li>
            </ul>
        </section>

        <section class="php-syntax">
            <h2>Basic PHP Syntax Rules</h2>
            <p>Like any language, PHP has rules that govern how you write code. Let's explore these fundamental syntax rules.</p>
            
            <h3>Statements and Semicolons</h3>
            <p>In PHP, each statement (a complete instruction) must end with a semicolon (;):</p>
            <pre><code>&lt;?php
echo "Hello, World!";
$name = "John";
echo "Hello, " . $name;
?&gt;</code></pre>
            
            <p>Forgetting semicolons is one of the most common mistakes for beginners and can cause syntax errors. Think of semicolons as the periods at the end of sentences in written language.</p>
            
            <div class="important-note">
                <h4>Exception: Closing PHP Tag</h4>
                <p>If a PHP block ends with a single statement, the semicolon before the closing PHP tag is technically optional (though still recommended for consistency):</p>
                <pre><code>&lt;?php echo "Hello World" ?&gt; &lt;!-- Works but not recommended --&gt;
&lt;?php echo "Hello World"; ?&gt; &lt;!-- Recommended --&gt;</code></pre>
            </div>
            
            <h3>Whitespace and Line Breaks</h3>
            <p>PHP generally ignores extra whitespace and line breaks, allowing you to format your code for readability:</p>
            
            <pre><code>&lt;?php
// These are all equivalent:
echo "Hello World";
echo     "Hello     World";
echo
    "Hello World"    ;
?&gt;</code></pre>
            
            <p class="analogy"><strong>Analogy:</strong> PHP's handling of whitespace is like reading a book - whether the words are spaced closely or have extra space between them, the meaning stays the same.</p>
            
            <h3>Case Sensitivity</h3>
            <p>PHP is partially case-sensitive. Here are the rules:</p>
            
            <table class="case-sensitivity">
                <thead>
                    <tr>
                        <th>Element</th>
                        <th>Case Sensitive?</th>
                        <th>Example</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Variables</td>
                        <td>Yes</td>
                        <td><code>$name</code> and <code>$Name</code> are different variables</td>
                    </tr>
                    <tr>
                        <td>Functions (user-defined)</td>
                        <td>No</td>
                        <td><code>myFunction()</code> and <code>MYFUNCTION()</code> are the same</td>
                    </tr>
                    <tr>
                        <td>Method names</td>
                        <td>No</td>
                        <td><code>$obj->method()</code> and <code>$obj->METHOD()</code> are the same</td>
                    </tr>
                    <tr>
                        <td>Class names</td>
                        <td>No</td>
                        <td><code>new MyClass()</code> and <code>new myclass()</code> are the same</td>
                    </tr>
                    <tr>
                        <td>Constants (defined with define())</td>
                        <td>Yes by default</td>
                        <td><code>define("MY_CONST", 1, true)</code> third parameter makes it case-insensitive</td>
                    </tr>
                    <tr>
                        <td>Class constants</td>
                        <td>Yes</td>
                        <td><code>MyClass::CONSTANT</code> and <code>MyClass::constant</code> are different</td>
                    </tr>
                    <tr>
                        <td>Keywords (if, else, while, etc.)</td>
                        <td>No</td>
                        <td><code>if()</code>, <code>IF()</code>, and <code>iF()</code> all work the same</td>
                    </tr>
                </tbody>
            </table>
            
            <p>Despite some elements being case-insensitive, it's best practice to maintain consistent casing throughout your code for readability and maintainability.</p>
            
            <h3>Comments</h3>
            <p>Comments let you add notes to your code that are ignored by the PHP interpreter. They're essential for documenting your code and explaining complex logic.</p>
            
            <pre><code>&lt;?php
// This is a single-line comment

# This is also a single-line comment (less common)

/*
   This is a multi-line comment
   that can span several lines
   and is useful for longer explanations
*/

// Comments can be used to temporarily disable code too
// echo "This line won't execute";

echo "Hello World"; // You can add comments at the end of a line too
?&gt;</code></pre>

<div class="mermaid-converted" style="margin: 1.5rem auto; padding: 1rem; text-align: center; overflow: hidden; max-width: 100%;">
<div style="margin-bottom: 10px; font-size: 12px; color: #6c757d; text-transform: uppercase; letter-spacing: 1px;">Diagram
</div>
    <svg viewBox="0 0 800 600" xmlns="http://www.w3.org/2000/svg" 
     style="max-width: 100%; height: auto; display: block; margin: 0 auto; background: white; border-radius: 8px;; max-width: 100%; height: auto; display: block; margin: 0 auto;">
    <!-- Embedded styles for this diagram only -->
    <defs>
        <style type="text/css">
            .node-rect { fill: #e1f5fe; stroke: #01579b; stroke-width: 2px; }
            .node-rect:hover { fill: #b3e5fc; }
            .node-text { fill: #01579b; font-family: 'Segoe UI', Arial, sans-serif; font-size: 14px; font-weight: 500; }
            .connection-line { stroke: #546e7a; stroke-width: 2px; fill: none; }
            .arrow-marker { fill: #546e7a; }
            .diagram-title { fill: #263238; font-size: 18px; font-weight: bold; }
            .subgraph-rect { fill: #fff3e0; stroke: #e65100; stroke-width: 1px; stroke-dasharray: 5,5; opacity: 0.3; }
        </style>
        
        <!-- Arrow marker -->
        <marker id="arrow" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto" markerUnits="strokeWidth">
            <path d="M0,0 L0,6 L9,3 z" class="arrow-marker"/>
        </marker>
    </defs>
    
    <!-- Background -->
    <rect x="0" y="0" width="800" height="600" fill="#fafafa" rx="8"/>
    
    <line x1="283.33333333333337" y1="80" x2="225.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="400.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="575.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="225.0" y1="200" x2="400.0" y2="320" 
          class="connection-line" marker-end="url(#arrow)"/>
    <line x1="516.6666666666667" y1="80" x2="575.0" y2="200" 
          class="connection-line" marker-end="url(#arrow)"/>
    <text x="545.8333333333334" y="135.0" text-anchor="middle" 
          class="node-text" font-size="12">&gt; D[&quot;// Comment text&quot;] B </text>
    <rect x="223.33333333333337" y="55" width="120" height="50" 
          rx="5" class="node-rect"/>
    <text x="283.33333333333337" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">PHP Comments</text>
    <rect x="426.66666666666674" y="55" width="180" height="50" 
          rx="5" class="node-rect"/>
    <text x="516.6666666666667" y="80" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Single-line comments</text>
    <rect x="139.0" y="175" width="172" height="50" 
          rx="5" class="node-rect"/>
    <text x="225.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">Multi-line comments</text>
    <rect x="330.0" y="175" width="140" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">// Comment text</text>
    <rect x="453.0" y="175" width="244" height="50" 
          rx="5" class="node-rect"/>
    <text x="575.0" y="200" text-anchor="middle" dominant-baseline="middle" 
          class="node-text"># Comment text (less common)</text>
    <rect x="274.0" y="295" width="252" height="50" 
          rx="5" class="node-rect"/>
    <text x="400.0" y="320" text-anchor="middle" dominant-baseline="middle" 
          class="node-text">/* Multi-line comment text */</text>
</svg>
</div>
            
            <h3>PHP Code Blocks</h3>
            <p>A PHP code block is a section of PHP code enclosed by the PHP opening and closing tags. Within these blocks, you can include multiple statements, control structures, functions, and more:</p>
            
            <pre><code>&lt;?php
// This entire section is a PHP code block
$firstName = "John";
$lastName = "Doe";
$fullName = $firstName . " " . $lastName;

echo "Hello, " . $fullName . "!";

if (strlen($fullName) > 10) {
    echo "You have a long name!";
} else {
    echo "You have a short name.";
}
?&gt;</code></pre>
            
            <p>You can have multiple PHP code blocks in a single file, interspersed with HTML:</p>
            
            <pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;My PHP Page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;?php
    // First PHP block
    $greeting = "Welcome to my website";
    ?&gt;
    
    &lt;h1&gt;&lt;?= $greeting ?&gt;&lt;/h1&gt;
    
    &lt;p&gt;This is regular HTML content.&lt;/p&gt;
    
    &lt;?php
    // Second PHP block
    $currentTime = date("H:i:s");
    echo "&lt;p&gt;The current time is: " . $currentTime . "&lt;/p&gt;";
    ?&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
        </section>
        
        <section class="output-methods">
            <h2>PHP Output Methods</h2>
            <p>In PHP, there are several ways to output content to the browser. The most common methods are <code>echo</code> and <code>print</code>.</p>
            
            <h3>The echo Statement</h3>
            <p><code>echo</code> is the most commonly used output method in PHP. It can output one or multiple strings:</p>
            
            <pre><code>&lt;?php
// Basic echo
echo "Hello World!";

// Echo with HTML
echo "&lt;h1&gt;Welcome&lt;/h1&gt;&lt;p&gt;to my website.&lt;/p&gt;";

// Echo multiple strings (without parentheses)
echo "Hello ", "World", "!";

// Variables in echo
$name = "John";
echo "Hello, " . $name . "!";

// Alternative syntax for embedding variables
echo "Hello, $name!";
?&gt;</code></pre>
            
            <div class="important-note">
                <h4>Quotes in PHP</h4>
                <p>Notice in the last example above that variables are automatically parsed inside double quotes (""), but not inside single quotes (''):</p>
                <pre><code>&lt;?php
$name = "John";
echo "Hello, $name!";  // Outputs: Hello, John!
echo 'Hello, $name!';  // Outputs: Hello, $name!
?&gt;</code></pre>
            </div>
            
            <h3>The print Statement</h3>
            <p><code>print</code> is very similar to <code>echo</code> but has two key differences:</p>
            <ol>
                <li>It can only output one string (not multiple arguments)</li>
                <li>It returns a value (always 1), so it can be used in expressions</li>
            </ol>
            
            <pre><code>&lt;?php
// Basic print
print "Hello World!";

// Print with HTML
print "&lt;h1&gt;Welcome&lt;/h1&gt;&lt;p&gt;to my website.&lt;/p&gt;";

// Print with variables
$name = "John";
print "Hello, " . $name . "!";

// Using print in an expression
$result = (print "Hello") + 3;  // $result will be 4
?&gt;</code></pre>
            
            <h3>echo vs print: Which to Use?</h3>
            <p>In most cases, <code>echo</code> and <code>print</code> can be used interchangeably, but <code>echo</code> is marginally faster since it doesn't return a value. For general output, <code>echo</code> is the standard choice among PHP developers.</p>
            
            <table class="comparison">
                <thead>
                    <tr>
                        <th>Feature</th>
                        <th>echo</th>
                        <th>print</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Can output multiple strings</td>
                        <td>Yes</td>
                        <td>No</td>
                    </tr>
                    <tr>
                        <td>Returns a value</td>
                        <td>No</td>
                        <td>Yes (always 1)</td>
                    </tr>
                    <tr>
                        <td>Can be used in expressions</td>
                        <td>No</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>Performance</td>
                        <td>Slightly faster</td>
                        <td>Slightly slower</td>
                    </tr>
                    <tr>
                        <td>Requires parentheses</td>
                        <td>Optional</td>
                        <td>Optional</td>
                    </tr>
                </tbody>
            </table>
            
            <h3>Other Output Methods</h3>
            <p>PHP provides several other output functions for specific purposes:</p>
            
            <h4>printf() and sprintf()</h4>
            <p>These functions allow formatted output similar to C's printf:</p>
            
            <pre><code>&lt;?php
// printf() outputs the formatted string
$name = "John";
$age = 30;
printf("My name is %s and I am %d years old.", $name, $age);
// Outputs: My name is John and I am 30 years old.

// sprintf() returns the formatted string without outputting it
$message = sprintf("My name is %s and I am %d years old.", $name, $age);
echo $message;
?&gt;</code></pre>
            
            <p>Common format specifiers include:</p>
            <ul>
                <li><code>%s</code> - String</li>
                <li><code>%d</code> - Integer</li>
                <li><code>%f</code> - Float (use %.2f for 2 decimal places)</li>
                <li><code>%b</code> - Binary</li>
            </ul>
            
            <h4>var_dump() and print_r()</h4>
            <p>These functions are invaluable for debugging as they display detailed information about variables:</p>
            
            <pre><code>&lt;?php
// var_dump() shows type and value information
$user = [
    "name" => "John Doe",
    "age" => 30,
    "active" => true
];
var_dump($user);
/* Outputs something like:
array(3) {
  ["name"]=>
  string(8) "John Doe"
  ["age"]=>
  int(30)
  ["active"]=>
  bool(true)
}
*/

// print_r() gives a more readable but less detailed output
print_r($user);
/* Outputs:
Array
(
    [name] => John Doe
    [age] => 30
    [active] => 1
)
*/
?&gt;</code></pre>
        </section>

        <section class="practical-examples">
            <h2>Practical Examples of PHP Tags and Syntax</h2>
            <p>Let's look at some real-world examples that demonstrate the use of PHP tags and basic syntax in different contexts.</p>
            
            <h3>Example 1: Simple Dynamic Content</h3>
            <p>A basic example showing how to include dynamic content in a webpage:</p>
            
            <pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Dynamic Website&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Welcome to My Website&lt;/h1&gt;
    
    &lt;?php
    $currentHour = date('G');
    
    if ($currentHour < 12) {
        echo "&lt;p&gt;Good morning, visitor!&lt;/p&gt;";
    } elseif ($currentHour < 18) {
        echo "&lt;p&gt;Good afternoon, visitor!&lt;/p&gt;";
    } else {
        echo "&lt;p&gt;Good evening, visitor!&lt;/p&gt;";
    }
    ?&gt;
    
    &lt;p&gt;The current date and time is: &lt;?= date("Y-m-d H:i:s") ?&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
            
            <h3>Example 2: HTML Template with Dynamic Data</h3>
            <p>Using PHP to loop through data and generate HTML content:</p>
            
            <pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Product List&lt;/title&gt;
    &lt;style&gt;
        .product { border: 1px solid #ddd; padding: 10px; margin: 10px; }
        .price { color: #c00; font-weight: bold; }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Our Products&lt;/h1&gt;
    
    &lt;?php
    // This array might come from a database in a real application
    $products = [
        [
            "name" => "Laptop",
            "price" => 999.99,
            "description" => "Powerful laptop for all your needs"
        ],
        [
            "name" => "Smartphone",
            "price" => 499.99,
            "description" => "Latest model with advanced features"
        ],
        [
            "name" => "Headphones",
            "price" => 79.99,
            "description" => "Noise-cancelling wireless headphones"
        ]
    ];
    ?>
    
    &lt;div class="product-list"&gt;
        &lt;?php foreach ($products as $product): ?&gt;
            &lt;div class="product"&gt;
                &lt;h2&gt;&lt;?= $product["name"] ?&gt;&lt;/h2&gt;
                &lt;p class="price"&gt;$&lt;?= number_format($product["price"], 2) ?&gt;&lt;/p&gt;
                &lt;p&gt;&lt;?= $product["description"] ?&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;?php endforeach; ?&gt;
    &lt;/div&gt;
    
    &lt;p&gt;&lt;?= count($products) ?&gt; products listed.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
            
            <p>Notice how we're using the alternative syntax for control structures (<code>foreach (...): ... endforeach;</code>) which is particularly useful when mixing PHP with HTML.</p>
            
            <h3>Example 3: Form Handling</h3>
            <p>Processing user input from a form:</p>
            
            <pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Contact Form&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;Contact Us&lt;/h1&gt;
    
    &lt;?php
    // Initialize variables
    $name = $email = $message = "";
    $errors = [];
    
    // Check if form was submitted
    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        // Validate name
        if (empty($_POST["name"])) {
            $errors[] = "Name is required";
        } else {
            $name = trim($_POST["name"]);
        }
        
        // Validate email
        if (empty($_POST["email"])) {
            $errors[] = "Email is required";
        } else {
            $email = trim($_POST["email"]);
            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $errors[] = "Invalid email format";
            }
        }
        
        // Validate message
        if (empty($_POST["message"])) {
            $errors[] = "Message is required";
        } else {
            $message = trim($_POST["message"]);
        }
        
        // If no errors, process the form
        if (empty($errors)) {
            // In a real app, you might save to a database or send an email here
            echo "&lt;div style='color: green;'&gt;Thank you for your message! We will respond shortly.&lt;/div&gt;";
            
            // Reset form fields after successful submission
            $name = $email = $message = "";
        }
    }
    ?&gt;
    
    &lt;?php if (!empty($errors)): ?&gt;
        &lt;div style="color: red;"&gt;
            &lt;ul&gt;
                &lt;?php foreach ($errors as $error): ?&gt;
                    &lt;li&gt;&lt;?= $error ?&gt;&lt;/li&gt;
                &lt;?php endforeach; ?&gt;
            &lt;/ul&gt;
        &lt;/div&gt;
    &lt;?php endif; ?&gt;
    
    &lt;form method="post" action="&lt;?= htmlspecialchars($_SERVER["PHP_SELF"]); ?&gt;"&gt;
        &lt;div&gt;
            &lt;label for="name"&gt;Name:&lt;/label&gt;
            &lt;input type="text" id="name" name="name" value="&lt;?= htmlspecialchars($name) ?&gt;"&gt;
        &lt;/div&gt;
        
        &lt;div&gt;
            &lt;label for="email"&gt;Email:&lt;/label&gt;
            &lt;input type="email" id="email" name="email" value="&lt;?= htmlspecialchars($email) ?&gt;"&gt;
        &lt;/div&gt;
        
        &lt;div&gt;
            &lt;label for="message"&gt;Message:&lt;/label&gt;
            &lt;textarea id="message" name="message" rows="5" cols="40"&gt;&lt;?= htmlspecialchars($message) ?&gt;&lt;/textarea&gt;
        &lt;/div&gt;
        
        &lt;div&gt;
            &lt;button type="submit"&gt;Send Message&lt;/button&gt;
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
            
            <p>This example demonstrates form handling, validation, and security practices like using <code>htmlspecialchars()</code> to prevent XSS attacks.</p>
            
            <h3>Example 4: Including External PHP Files</h3>
            <p>Breaking your code into reusable components:</p>
            
            <h4>header.php</h4>
            <pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;?= $pageTitle ?? 'My Website' ?&gt;&lt;/title&gt;
    &lt;link rel="stylesheet" href="styles.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;header&gt;
        &lt;h1&gt;My Website&lt;/h1&gt;
        &lt;nav&gt;
            &lt;ul&gt;
                &lt;li&gt;&lt;a href="index.php"&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="about.php"&gt;About&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href="contact.php"&gt;Contact&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/nav&gt;
    &lt;/header&gt;
    &lt;main&gt;</code></pre>
            
            <h4>footer.php</h4>
            <pre><code>    &lt;/main&gt;
    &lt;footer&gt;
        &lt;p&gt;&amp;copy; &lt;?= date('Y') ?&gt; My Website. All rights reserved.&lt;/p&gt;
    &lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
            
            <h4>index.php</h4>
            <pre><code>&lt;?php
// Set page-specific variables
$pageTitle = "Home Page";

// Include header
include "header.php";
?&gt;

&lt;h2&gt;Welcome to My Website&lt;/h2&gt;
&lt;p&gt;This is the home page content.&lt;/p&gt;

&lt;?php
// Include some dynamic content
$latestPosts = [
    "Getting Started with PHP",
    "Understanding PHP Tags",
    "PHP Syntax Basics"
];
?&gt;

&lt;h3&gt;Latest Posts&lt;/h3&gt;
&lt;ul&gt;
    &lt;?php foreach ($latestPosts as $post): ?&gt;
        &lt;li&gt;&lt;?= $post ?&gt;&lt;/li&gt;
    &lt;?php endforeach; ?&gt;
&lt;/ul&gt;

&lt;?php
// Include footer
include "footer.php";
?&gt;</code></pre>
            
            <p>This example demonstrates how to use <code>include</code> to separate your code into reusable components, a common practice in PHP development that helps maintain clean and organized code.</p>
        </section>

        <section class="best-practices">
            <h2>Best Practices for PHP Tags and Syntax</h2>
            <p>To write clean, maintainable PHP code, follow these best practices related to tags and syntax:</p>
            
            <h3>PHP Tags</h3>
            <ul>
                <li><strong>Always use standard PHP tags</strong> (<code>&lt;?php ?&gt;</code>) for maximum compatibility</li>
                <li><strong>Use short echo tags</strong> (<code>&lt;?= ?&gt;</code>) for simple output within HTML</li>
                <li><strong>Avoid short tags</strong> (<code>&lt;? ?&gt;</code>) as they may not be enabled on all servers</li>
                <li><strong>Include a space after the opening tag</strong> and before the closing tag for readability</li>
            </ul>
            
            <h3>PHP Files</h3>
            <ul>
                <li><strong>Pure PHP files should omit the closing tag</strong> to prevent accidental whitespace output</li>
                <li><strong>Files with mixed HTML and PHP should include the closing tag</strong></li>
                <li><strong>Begin files with the opening PHP tag at the top</strong> (no whitespace before it)</li>
            </ul>
            
            <h3>Coding Style</h3>
            <ul>
                <li><strong>Use consistent indentation</strong> (typically 4 spaces or a tab)</li>
                <li><strong>Always include semicolons</strong> at the end of statements, even if optional</li>
                <li><strong>Use descriptive variable and function names</strong></li>
                <li><strong>Follow a consistent naming convention</strong> (camelCase, snake_case, etc.)</li>
                <li><strong>Add comments to explain complex code</strong></li>
            </ul>
            
            <h3>Output and Security</h3>
            <ul>
                <li><strong>Always escape output in HTML contexts</strong> using <code>htmlspecialchars()</code> to prevent XSS attacks</li>
                <li><strong>Prefer the alternative syntax</strong> (<code>if(): endif;</code>, <code>foreach(): endforeach;</code>, etc.) when mixing PHP with HTML</li>
                <li><strong>Avoid complex PHP logic in templates</strong> - process data before outputting</li>
            </ul>
            
            <h3>Mixing PHP and HTML</h3>
            <ul>
                <li><strong>Separate business logic from presentation</strong> when possible</li>
                <li><strong>Consider using a template engine</strong> for larger projects</li>
                <li><strong>Use PHP includes</strong> to break code into manageable components</li>
            </ul>
            
            <div class="important-note">
                <h4>Tip: PSR Standards</h4>
                <p>The PHP Framework Interop Group (PHP-FIG) has established a set of PHP Standard Recommendations (PSRs) that define coding standards. PSR-1 (Basic Coding Standard) and PSR-12 (Extended Coding Style) are particularly relevant for syntax and style guidelines. Following these standards makes your code more consistent and easier for other developers to understand.</p>
            </div>
        </section>
        
        <section class="common-mistakes">
            <h2>Common Mistakes and How to Avoid Them</h2>
            <p>Let's look at some common mistakes beginners make with PHP tags and syntax, and how to avoid them:</p>
            
            <h3>Syntax Errors</h3>
            <div class="mistake-correction">
                <div class="mistake">
                    <h4>Mistake: Missing Semicolons</h4>
                    <pre><code>&lt;?php
$name = "John"
echo "Hello, " . $name
?&gt;</code></pre>
                </div>
                <div class="correction">
                    <h4>Correction:</h4>
                    <pre><code>&lt;?php
$name = "John";
echo "Hello, " . $name;
?&gt;</code></pre>
                </div>
            </div>
            
            <div class="mistake-correction">
                <div class="mistake">
                    <h4>Mistake: Unclosed Quotes</h4>
                    <pre><code>&lt;?php
echo "Hello, World!;
?&gt;</code></pre>
                </div>
                <div class="correction">
                    <h4>Correction:</h4>
                    <pre><code>&lt;?php
echo "Hello, World!";
?&gt;</code></pre>
                </div>
            </div>
            
            <h3>PHP Tag Issues</h3>
            <div class="mistake-correction">
                <div class="mistake">
                    <h4>Mistake: Incorrect Tag Format</h4>
                    <pre><code>&lt;? echo "Hello!"; ?&gt;  // Short tags may not be enabled
&lt;%  echo "Hello!"; %&gt;  // ASP tags are deprecated
&lt;script language="php"&gt;echo "Hello!";&lt;/script&gt;  // Script tags are deprecated</code></pre>
                </div>
                <div class="correction">
                    <h4>Correction:</h4>
                    <pre><code>&lt;?php echo "Hello!"; ?&gt;  // Standard tags always work
&lt;?= "Hello!" ?&gt;  // Short echo tag is enabled by default in PHP 5.4+</code></pre>
                </div>
            </div>
            
            <div class="mistake-correction">
                <div class="mistake">
                    <h4>Mistake: Nesting PHP Tags</h4>
                    <pre><code>&lt;?php
echo "Hello";
&lt;?php echo " World"; ?&gt;
?&gt;</code></pre>
                </div>
                <div class="correction">
                    <h4>Correction:</h4>
                    <pre><code>&lt;?php
echo "Hello";
echo " World";
?&gt;</code></pre>
                </div>
            </div>
            
            <h3>Output Problems</h3>
            <div class="mistake-correction">
                <div class="mistake">
                    <h4>Mistake: Unescaped Output</h4>
                    <pre><code>&lt;?php
$userInput = $_GET['comment'];
echo "You said: " . $userInput;  // Security vulnerability!
?&gt;</code></pre>
                </div>
                <div class="correction">
                    <h4>Correction:</h4>
                    <pre><code>&lt;?php
$userInput = $_GET['comment'] ?? '';
echo "You said: " . htmlspecialchars($userInput);  // Safe output
?&gt;</code></pre>
                </div>
            </div>
            
            <div class="mistake-correction">
                <div class="mistake">
                    <h4>Mistake: Confusion with Quotes</h4>
                    <pre><code>&lt;?php
$name = "John";
echo 'Hello, $name!';  // Variables don't expand in single quotes
?&gt;</code></pre>
                </div>
                <div class="correction">
                    <h4>Correction:</h4>
                    <pre><code>&lt;?php
$name = "John";
echo "Hello, $name!";  // Use double quotes for variable interpolation
// or
echo 'Hello, ' . $name . '!';  // Concatenation works with any quotes
?&gt;</code></pre>
                </div>
            </div>
            
            <h3>Whitespace and Headers</h3>
            <div class="mistake-correction">
                <div class="mistake">
                    <h4>Mistake: Whitespace Before Opening PHP Tag</h4>
                    <pre><code>
&lt;?php
header('Location: index.php');  // Won't work - headers already sent
?&gt;</code></pre>
                </div>
                <div class="correction">
                    <h4>Correction:</h4>
                    <pre><code>&lt;?php
header('Location: index.php');  // Works - no output before header()
?&gt;</code></pre>
                </div>
            </div>
            
            <div class="mistake-correction">
                <div class="mistake">
                    <h4>Mistake: Unnecessary Closing Tags in Pure PHP Files</h4>
                    <pre><code>&lt;?php
// Some PHP code
function doSomething() {
    // Function code
}
?&gt; 
// Invisible whitespace here can cause problems</code></pre>
                </div>
                <div class="correction">
                    <h4>Correction:</h4>
                    <pre><code>&lt;?php
// Some PHP code
function doSomething() {
    // Function code
}
// No closing tag in pure PHP files</code></pre>
                </div>
            </div>
        </section>

        <section class="practical-exercise">
            <h2>Practical Exercise: Creating a Basic PHP Template</h2>
            <p>Let's apply what we've learned by creating a basic PHP template that demonstrates proper tag usage and syntax.</p>
            
            <h3>Exercise Objectives</h3>
            <ul>
                <li>Create a reusable PHP template with header and footer</li>
                <li>Implement proper PHP tag usage</li>
                <li>Practice outputting dynamic content</li>
                <li>Use PHP to handle conditional content</li>
            </ul>
            
            <h3>Template Files</h3>
            <p>Create the following files in your project directory:</p>
            
            <h4>1. config.php</h4>
            <pre><code>&lt;?php
// Site configuration
$siteConfig = [
    'siteName' => 'My PHP Website',
    'tagline' => 'Learning PHP Tags and Syntax',
    'year' => date('Y'),
    'navigation' => [
        'Home' => 'index.php',
        'About' => 'about.php',
        'Services' => 'services.php',
        'Contact' => 'contact.php'
    ]
];

// Function to determine if current page is active
function isActivePage($pageName) {
    $currentPage = basename($_SERVER['PHP_SELF']);
    return $pageName === $currentPage;
}</code></pre>
            
            <h4>2. header.php</h4>
            <pre><code>&lt;?php
// Include configuration
require_once 'config.php';

// Set default page title if not provided
$pageTitle = $pageTitle ?? $siteConfig['siteName'];
?&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;&lt;?= htmlspecialchars($pageTitle) ?&gt;&lt;/title&gt;
    &lt;style&gt;
        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; }
        header { background-color: #333; color: white; padding: 1rem; }
        .container { max-width: 1200px; margin: 0 auto; padding: 1rem; }
        nav ul { list-style: none; padding: 0; display: flex; }
        nav li { margin-right: 1rem; }
        nav a { color: white; text-decoration: none; }
        nav a.active { font-weight: bold; text-decoration: underline; }
        main { min-height: 400px; }
        footer { background-color: #333; color: white; padding: 1rem; text-align: center; }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;header&gt;
        &lt;div class="container"&gt;
            &lt;h1&gt;&lt;?= htmlspecialchars($siteConfig['siteName']) ?&gt;&lt;/h1&gt;
            &lt;p&gt;&lt;?= htmlspecialchars($siteConfig['tagline']) ?&gt;&lt;/p&gt;
            
            &lt;nav&gt;
                &lt;ul&gt;
                    &lt;?php foreach ($siteConfig['navigation'] as $name => $url): ?&gt;
                        &lt;li&gt;
                            &lt;a href="&lt;?= $url ?&gt;" class="&lt;?= isActivePage($url) ? 'active' : '' ?&gt;"&gt;
                                &lt;?= htmlspecialchars($name) ?&gt;
                            &lt;/a&gt;
                        &lt;/li&gt;
                    &lt;?php endforeach; ?&gt;
                &lt;/ul&gt;
            &lt;/nav&gt;
        &lt;/div&gt;
    &lt;/header&gt;
    
    &lt;main class="container"&gt;</code></pre>
            
            <h4>3. footer.php</h4>
            <pre><code>    &lt;/main&gt;
    
    &lt;footer&gt;
        &lt;div class="container"&gt;
            &lt;p&gt;&amp;copy; &lt;?= $siteConfig['year'] ?&gt; &lt;?= htmlspecialchars($siteConfig['siteName']) ?&gt;. All rights reserved.&lt;/p&gt;
            
            &lt;?php if (isset($showDebugInfo) && $showDebugInfo): ?&gt;
                &lt;div style="font-size: 0.8rem; margin-top: 1rem;"&gt;
                    &lt;p&gt;Page rendered in &lt;?= round((microtime(true) - $_SERVER['REQUEST_TIME_FLOAT']) * 1000, 2) ?&gt; ms&lt;/p&gt;
                &lt;/div&gt;
            &lt;?php endif; ?&gt;
        &lt;/div&gt;
    &lt;/footer&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
            
            <h4>4. index.php</h4>
            <pre><code>&lt;?php
// Page-specific configuration
$pageTitle = "Home - PHP Tags and Syntax";
$showDebugInfo = true;

// Include header
include 'header.php';
?&gt;

&lt;h2&gt;Welcome to our PHP Tags and Syntax Demo&lt;/h2&gt;

&lt;p&gt;This is a demonstration of proper PHP tag usage and basic syntax.&lt;/p&gt;

&lt;h3&gt;Server Time&lt;/h3&gt;
&lt;p&gt;The current server time is: &lt;?= date('Y-m-d H:i:s') ?&gt;&lt;/p&gt;

&lt;?php
// Array of PHP concepts we're learning
$phpConcepts = [
    'PHP Tags',
    'Basic Syntax',
    'Output Methods',
    'Variables',
    'Conditionals',
    'Loops'
];
?&gt;

&lt;h3&gt;PHP Concepts We're Learning&lt;/h3&gt;
&lt;ul&gt;
    &lt;?php foreach ($phpConcepts as $index => $concept): ?&gt;
        &lt;li&gt;
            &lt;strong&gt;Concept &lt;?= $index + 1 ?&gt;:&lt;/strong&gt; 
            &lt;?= htmlspecialchars($concept) ?&gt;
        &lt;/li&gt;
    &lt;?php endforeach; ?&gt;
&lt;/ul&gt;

&lt;h3&gt;Server Information&lt;/h3&gt;
&lt;p&gt;You are running PHP version: &lt;?= phpversion() ?&gt;&lt;/p&gt;

&lt;?php
// Include footer
include 'footer.php';
?&gt;</code></pre>
            
            <h4>5. about.php</h4>
            <pre><code>&lt;?php
// Page-specific configuration
$pageTitle = "About - PHP Tags and Syntax";
$showDebugInfo = true;

// Include header
include 'header.php';
?&gt;

&lt;h2&gt;About This Template&lt;/h2&gt;

&lt;p&gt;This template demonstrates the proper use of PHP tags and basic syntax in a real-world context.&lt;/p&gt;

&lt;h3&gt;Features Demonstrated&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Proper PHP tag usage&lt;/li&gt;
    &lt;li&gt;Including external files&lt;/li&gt;
    &lt;li&gt;Working with variables&lt;/li&gt;
    &lt;li&gt;Conditional output&lt;/li&gt;
    &lt;li&gt;Looping through arrays&lt;/li&gt;
    &lt;li&gt;Basic security practices&lt;/li&gt;
&lt;/ul&gt;

&lt;?php
// Include footer
include 'footer.php';
?&gt;</code></pre>
            
            <h3>Exercise Instructions</h3>
            <ol>
                <li>Create the five files listed above in your web server's document root</li>
                <li>Access index.php in your browser to see the template in action</li>
                <li>Try clicking the navigation links to see how the active page highlighting works</li>
                <li>Experiment by creating additional pages following the same pattern</li>
                <li>Modify the template to include additional features or styling</li>
            </ol>
        </section>
        
        <section class="next-steps">
            <h2>Next Steps</h2>
            <p>Now that you understand PHP tags and basic syntax, you're ready to dive deeper into PHP development. Here are some topics to explore next:</p>
            
            <ul>
                <li><strong>Variables and Data Types:</strong> Learn how to store and manipulate different kinds of data</li>
                <li><strong>Operators:</strong> Explore arithmetic, comparison, logical, and other operators</li>
                <li><strong>Control Structures:</strong> Master conditionals (if, switch) and loops (for, while, foreach)</li>
                <li><strong>Functions:</strong> Create reusable blocks of code with functions</li>
                <li><strong>Arrays:</strong> Work with indexed and associative arrays</li>
                <li><strong>Form Handling:</strong> Process user input from HTML forms</li>
                <li><strong>Database Integration:</strong> Connect to databases to store and retrieve data</li>
            </ul>
            
            <p>As you continue your PHP journey, remember that understanding these foundational concepts of tags and syntax is crucial. These basics will serve as building blocks for more advanced techniques and applications.</p>
        </section>
        
        <section class="resources">
            <h2>Additional Resources</h2>
            
            <h3>Official Documentation</h3>
            <ul>
                <li><a href="https://www.php.net/manual/en/language.basic-syntax.php" target="_blank">PHP Manual: Basic Syntax</a></li>
                <li><a href="https://www.php.net/manual/en/language.basic-syntax.phptags.php" target="_blank">PHP Manual: PHP Tags</a></li>
                <li><a href="https://www.php.net/manual/en/function.echo.php" target="_blank">PHP Manual: echo</a></li>
                <li><a href="https://www.php.net/manual/en/function.print.php" target="_blank">PHP Manual: print</a></li>
            </ul>
            
            <h3>Tutorials and Guides</h3>
            <ul>
                <li><a href="https://www.w3schools.com/php/" target="_blank">W3Schools PHP Tutorial</a></li>
                <li><a href="https://phptherightway.com/" target="_blank">PHP The Right Way</a></li>
                <li><a href="https://www.tutorialspoint.com/php/index.htm" target="_blank">TutorialsPoint PHP Tutorial</a></li>
                <li><a href="https://www.php-fig.org/psr/psr-1/" target="_blank">PSR-1: Basic Coding Standard</a></li>
            </ul>
            
            <h3>Books</h3>
            <ul>
                <li>"PHP & MySQL: Novice to Ninja" by Kevin Yank</li>
                <li>"Modern PHP" by Josh Lockhart</li>
                <li>"Learning PHP, MySQL & JavaScript" by Robin Nixon</li>
            </ul>
            
            <h3>Practice Platforms</h3>
            <ul>
                <li><a href="https://www.codecademy.com/learn/learn-php" target="_blank">Codecademy PHP Course</a></li>
                <li><a href="https://www.w3schools.com/php/php_exercises.asp" target="_blank">W3Schools PHP Exercises</a></li>
                <li><a href="https://www.hackerrank.com/domains/php" target="_blank">HackerRank PHP Challenges</a></li>
            </ul>
        </section>
            
<div class="lesson-navigation">
<a class="lesson-nav-button prev" href="/module2.html">
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"></path>
</svg>
<span>
<small>Back to</small><br/>
                                    Module 2 Overview
                                </span>
</a>
<button class="complete-lesson-btn">
                                Mark as Complete
                            </button>
<a class="lesson-nav-button next" href="/module3.html">
<span>
<small>Next Module</small><br/>
                                    Module 3: MySQL Database
                                </span>
<svg fill="currentColor" height="20" viewbox="0 0 20 20" width="20" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 20 20">
<path d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"></path>
</svg>
</a>
</div>
</article>
</div>
</div>
</main>
<!-- Footer -->
<footer class="site-footer" role="contentinfo">
<div class="footer-container">
<div class="footer-content">
<div class="footer-section footer-about">
<h3>PHP WordPress Development</h3>
<p>Complete Web Development Course</p>
</div>
<div class="footer-section">
<h4>Quick Links</h4>
<ul class="footer-links">
<li><a href="/">Home</a></li>
<li><a href="/module2.html">Module 2</a></li>
<li><a href="/resources.html">Resources</a></li>
</ul>
</div>
<div class="footer-section">
<h4>Support</h4>
<ul class="footer-links">
<li><a href="/help.html">Help Center</a></li>
<li><a href="/faq.html">FAQ</a></li>
<li><a href="/contact.html">Contact</a></li>
</ul>
</div>
</div>
<div class="footer-bottom">
<div class="footer-bottom-content">
<p class="copyright">© 2025 PHP WordPress Development Course</p>
<nav class="footer-bottom-links">
<a href="/privacy.html">Privacy</a>
<span class="separator">|</span>
<a href="/terms.html">Terms</a>
</nav>
</div>
</div>
</div>
</footer>
</div>
<!-- Back to Top -->
<button aria-label="Back to top" class="back-to-top" id="back-to-top">
<svg fill="none" height="24" stroke="currentColor" stroke-width="2" viewbox="0 0 24 24" width="24" style="max-width: 100%; height: auto; display: block; margin: 0 auto;" viewBox="0 0 2 24">
<path d="M12 19V5M12 5l-7 7M12 5l7 7"></path>
</svg>
</button>
<!-- JavaScript -->
<script src="/assets/js/navigation.js"></script>
<script src="/assets/js/site-config.js"></script>
<script src="/assets/js/sidebar-toggle.js"></script>
<script src="/assets/js/mermaid-universal-fix.js"></script>
</body>
</html>